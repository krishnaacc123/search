[{"title":"Amazon Pay","desc":"Overview of Amazon Pay and how it can used with the Razorpay Standard Checkout Integrations.","url":"amazonpay","body":"\nIntroduction\n\nAmazon Pay is another wallet based payment method that allows customers with an Amazon account to make payments through their Amazon Pay balance or any other configured payment method. Learn more about Amazon Pay.\n\nOn the Checkout page, Amazon Pay will be listed as an option under the wallet payment method. Click here to learn how to integrate Amazon Pay with Razorpay Standard Checkout.","id":0},{"title":"Amazon Pay Integration - Standard Checkout","desc":"How to integrate Amazon Pay with Razorpay Standard Checkout.","url":"amazonpay/standard-checkout","body":"\nAndroid Integration\n\nTo integrate Amazon Pay wallet with the Standard Checkout on your Android app:\n\nDownload the following SDKs and add the aar files to the application library.\n    Amazon-SDK.\n\n    Download the Razorpay-Amazon Pay SDK.\n\n    Note:\n\n    The Razorpay-Amazon Pay SDK acts as a wrapper over the native Amazon-SDK.\n\nAdd the following lines of code to the build.gradle file of your application:\n\n    dependencies {\n      compile(name: 'razorpay-amazonpay', ext: 'aar')\n      compile(name:'PayWithAmazon', ext:'aar')\n      compile 'com.android.support:customtabs:26.1.0'\n    }\n\nThis will add the dependencies for the SDK and create an Amazon Pay payment method on your Checkout form.","id":1},{"url":"android-customui-sdk-3.0.x","body":"\nwindow.location.href= \"https://razorpay.com/docs/android-customui-sdk/\"\n\n//@doing a redirect here","id":2},{"title":"GST Changes","url":"announcements/gst-changes","body":"\nAs mentioned in the 31st August 2017 mailer, we will be making the following changes to support the GST taxation structure.\n\n Note: These changes will be applied to the respective sections from 1st November 2017.\n\nChanges in Dashboard\n\nThe Service Tax column will be renamed across the Dashboard as Tax column.\n\nChanges in APIs\n\nWe will stop sending the service_tax attribute, instead only the tax attribute will be sent. These changes have been made in our documentation as well.\n\n Note: You need to migrate any code you have written to read the payments.taxfield instead of the payments.service_tax field.\n\nThe APIs that will be affected are:\n/payments\n/payments/:id/capture\n/settlements\n/transfers.\n\nChanges in Reports\nThe Service Tax column will replaced by Tax column. The Tax column will be at the same position as the Service Tax column in the respective reports for better compatibility.\n\nSupport\nYou can get in touch with us at https://razorpay.com/support for any queries.","id":3},{"url":"bharat-qr","body":"\nwindow.location.href= \"https://razorpay.com/docs/bharatqr/\"\n\n//@doing a redirect here","id":4},{"title":"API Reference","desc":"Razorpay APIs lets you create, fetch, fetch all payments made from BharatQR.","url":"bharatqr/api","body":"\nLearn how to create a BQR payment and perform other operations using Razorpay APIs. To understand the basic concepts of our API usage, refer our Getting Started documentation.\n\nCreate\n\nIn order to start accepting payments using BharatQR, your virtual account must have a receiver associated with it which defines the method of payment collection. In case of BharatQR, the receiver type is QR Code which allows you to accept payments made via UPI or Cards.\n\n/virtual_accounts\n\nRequest Parameters\n\nreceivers Mandatory\n: Object consisting of configured receivers types.\n\nreceivers.types Mandatory\n: The receiver type. In this case it will be qr_code.\n\ndescription Optional\n: A brief description of the payment.\n\ncustomer_id Optional\n: unique identifier of customer for whom BharatQR is being created. Refer Customer API.\n\nnotes Optional\n: Object consisting of key value pairs as notes. Refer here for more details.\n\namount_expected Optional\n: The expected payment amount in Paise.\n\nResponse Parameters\n\nid string\n: The unique identifier of the generated QR code. A sample id for a QR code will look like this: qr_4lsdkfldlteskf.\n\nentity string\n: The name of the response entity. In this case it is qr_code.\n\nreference string\n: A 14-digit reference number or a receipt for the payment. It will be the same as the value of id without the prefix qr_. A sample reference value will look like this: 4lsdkfldlteskf.\n\nshort_url\n: The URL of the QR code. A sample short URL looks like this http://rzp.gl/l6MS. Clicking on the link will download the code. This will be useful for offline merchants.\n\nstatus\n: The status of the payment. It can have two values, active and closed.\n\ncurl -u : \\\n   -X POST \\\n   -H \"Content-Type: application/json\" \\\n   -d '\n    {\n      \"receivers\": {\n        \"types\": [\n          \"qr_code\"\n        ]\n      },\n      \"description\": \"First Payment by BharatQR\",\n      \"customerid\": \"cust805c8oBQdBGPwS\",\n      \"notes\": {\n        \"referencekey\": \"referencevalue\"\n      }\n    }\n   ' \\\n   https://api.razorpay.com/v1/virtual_accounts\n{\n  \"id\": \"va_4xbQrmEoA5WJ0G\",\n  \"entity\": \"virtual_account\",\n  \"description\": \"First Payment by BharatQR\",\n  \"customerid\": \"cust805c8oBQdBGPwS\",\n  \"status\": \"active\",\n  \"amount_paid\": 10000,\n  \"notes\": {\n    \"referencekey\": \"referencevalue\"\n  },\n  \"receivers\": [\n    {\n      \"id\": \"qr_4lsdkfldlteskf\",\n      \"entity\": \"qr_code\",\n      \"reference\": \"AgdeP8aBgZGckl\",\n      \"short_url\": \"http://rzp.gl/l6MS\",\n      }\n  ],\n  \"created_at\": 1455696638\n}\n\nFetch a Payment\n\n/virtual_accounts/:id\n\ncurl -u : \\\n   -X GET \\\n   https://api.razorpay.com/v1/virtualaccounts/va4xbQrmEoA5WJ0G\n{\n  \"id\": \"va_4xbQrmEoA5WJ0G\",\n  \"entity\": \"virtual_account\",\n  \"description\": \"First Payment by BharatQR\",\n  \"customerid\": \"cust805c8oBQdBGPwS\",\n  \"status\": \"active\",\n  \"amount_paid\": 10000,\n  \"notes\": {\n    \"referencekey\": \"referencevalue\"\n  },\n  \"receivers\": [\n    {\n      \"id\": \"qr_4lsdkfldlteskf\",\n      \"entity\": \"qr_code\",\n      \"reference\": \"AgdeP8aBgZGckl\",\n      \"short_url\": \"http://rzp.gl/l6MS\",\n      }\n  ],\n  \"created_at\": 1455696638\n}\n\nFetch All Payments\n\n/virtual_accounts\n\ncurl -u : \\\n   -X GET \\\n   https://api.razorpay.com/v1/virtual_accounts\n{\n  \"entity\": \"collection\",\n  \"count\": 2,\n  \"items\": [\n    {\n      \"id\": \"va_84lyVss1CRZ6eM\",\n      \"entity\": \"virtual_account\",\n      \"name\": \"Merchant Billing Label\",\n      \"description\": \"Second Payment by BharatQR\",\n      \"status\": \"active\",\n      \"amount_paid\": 90000,\n      \"notes\": [],\n      \"customer_id\": null,\n      \"receivers\": [\n        {\n          \"id\": \"qr_4lsdkfldlteskf\",\n          \"entity\": \"qr_code\",\n          \"reference\": \"\",\n          \"short_url\": \"http://rzp.gl/l6MS\",\n          }\n      ],\n      \"created_at\": 1497873405\n    },\n    {\n      \"id\": \"va_4xbQrmEoA5WJ0G\",\n      \"entity\": \"virtual_account\",\n      \"name\": \"Merchant Billing Label\",\n      \"description\": \"First Payment by BharatQR\",\n      \"status\": \"active\",\n      \"amount_paid\": 10000,\n      \"notes\": {\n        \"referencekey\": \"referencevalue\"\n      },\n      \"receivers\": [\n        {\n          \"id\": \"qr_4lsdkfldlfr4er\",\n          \"entity\": \"qr_code\",\n          \"reference\": \"\",\n          \"short_url\": \"http://rzp.gl/l6MS\",\n          }\n      ],\n      \"customerid\": \"cust805c8oBQdBGPwS\",\n      \"created_at\": 1497922042\n    }\n  ]\n}\n\nClosed\n\n/virtual_accounts/:id\n\ncurl -u : \\\n   -X PATCH \\\n   -H \"Content-Type: application/json\" \\\n   --data '{\"status\": \"closed\"}'\n   https://api.razorpay.com/v1/virtualaccounts/va4xbQrmEoA5WJ0G\n{\n  \"id\": \"va_4xbQrmEoA5WJ0G\",\n  \"entity\": \"virtual_account\",\n  \"description\": \"First Payment by BharatQR\",\n  \"customerid\": \"cust805c8oBQdBGPwS\",\n  \"status\": \"closed\",\n  \"amount_paid\": 10000,\n  \"notes\": {\n    \"referencekey\": \"referencevalue\"\n  },\n  \"receivers\": [\n    {\n      \"id\": \"qr_4lsdkfldlteskf\",\n      \"entity\": \"qr_code\",\n      \"reference\": \"4lsdkfldlteskf\",\n      \"short_url\": \"http://rzp.gl/l6MS\",\n      }\n  ],\n  \"created_at\": 1455696638\n}\n\n@// should we remove \"name\", \"account_number\", \"ifsc\"","id":5},{"title":"FAQs","url":"bharatqr/faqs","body":"\nHere are some questions that we frequently come across that might help you integrate a lot faster.\n\n1. How can I provide 'Scan and Pay' facility to my customers?\nRazorpay can help facilitate BharatQR code for your business and provide 'Scan and Pay' option at checkout. Sign up with Razorpay.\n\n2. Is there a limit on the number of transactions carried out via BQR?\nThe current transaction limit is set to 1 Lac/transaction. However, a lower per day transaction limit may be set at the bank's end.\n\n3. How will these payments reflect in my bank account?\nThe payments will be settled directly into your bank account.\n\n4. Where all can I accept payments via Bharat QR?\nYou can accept payments via BharatQR for streaming DTH services, paying for groceries at the nearby kirana store, or paying for utilities at the retail outlets, by scanning QR code at their system/payment counter.","id":6},{"title":"Razorpay — BharatQR","desc":"Learn how to facilitate QR-based payments on your mobile app using Razorpay.","url":"bharatqr","body":"\nWith the advent of digital payments, several businesses in India have moved from traditional methods such as NEFT and IMPS to a more advanced solutions such as UPIs and wallets due to its scalability, mobile friendliness, and quicker processing-time. Under this umbrella, BharatQR seems to be the fastest mode for recieving payments.\n\nWhat is BharatQR?\n\nBharatQR is a payment collection method that facilitates merchant-to-person transaction through a QR code.\n\nA QR code is an information matrix in a machine-readable format containing the required details to accept payments from customers. This is how a sample QR code looks like:\n\nHow it Works?\n\nBQR was built from ground up keeping mobility around virtual account transactions at its core,\nthereby making it agnostic across various mobile devices and applications.\n\nIn a BQR-based payment setting, a customer uses a BQR-enabled mobile app to scan a BQR code deployed on the merchant store/location. Upon a successful scan, customer is redirected to a checkout page where the she/he enters the card details and proceeds with the payment for the charged amount. Once the payment is complete, both merchant and customer are notified of the payment status. If the payment is successful, merchant recevies the funds directly in the bank account.\n\n@image bqrgeneralflow.png\n\nThe supported payment schemes include:\nUPI\nCredit and Debit cards\n    Mastercard\n    Visa\n    RuPay\n\n@image bharatqr_2.gif\n\nAdvantages\n\nA BQR code can be thought of as a 2 dimensional barcode but with capability of carrying 10 times more information. BQR code can accomodate a payment details such as business name, merchant's contact, destination bank details, and more. Amongst its many advantages, a BQR payment:\n\nrequires less or no setup cost.\ncharges no additional cost. It is just a new mode of payment.\nis as secure as a UPI payment as your card details are not exposed to a third party.\nis interoperable across most payment apps such as Mobikwik, PhonePe, Google Tez, and others.\n\nUse-cases\n\nBQR-based payments are being widely adopted by many merchants with physical stores as it makes accepting and receiving payments a lot quicker and easier for them. The adoption to BQR based payments may also replace:\n\nCash-on-delivery\nID cards\nPOS machines\nPaper receipts","id":7},{"title":"Notification","desc":"Recieve notifications for your Razorpay virtual account for payment captured event using webhooks and receive email notifications for payment successful event .","url":"bharatqr/notification","body":"\nYou will be notified of any payments made to your virtual accounts via webhook and email.\n\nAll payments made using BharatQR towards your account will show up on your Dashboard as well as in the usual payment API response as payments made with receiver qrcode. You can view the funds received by a virtual account using the amountpaid field in the virtual account entity. This field specifies the total amount (in Paise) that has been paid to the virtual account.\n\nWebhooks\nPayments made using this method will also trigger webhooks much like regular payments. Refer our Webhooks documentation to learn how to use webhooks.\n\nVirtual Account Credited Event\n\nPayments made using BharatQR are notified via the virtual_account.credited webhook event. The payload for this event contains details of the payment itself, as well as the virtual account that the payment was made towards.\n\n{\n  \"event\": \"virtual_account.credited\",\n  \"entity\": \"event\",\n  \"contains\": [\n    \"payment\",\n    \"virtual_account\"\n  ],\n  \"payload\": {\n    \"payment\": {\n      \"entity\": {\n        \"id\": \"pay_6X6jcHoHdRdy79\",\n        \"entity\": \"payment\",\n        \"amount\": 10000,\n        \"currency\": \"INR\",\n        \"status\": \"captured\",\n        \"amount_refunded\": 0,\n        \"refund_status\": null,\n        \"method\": \"card\", // or \"upi\"\n        \"orderid\": \"order6X4mcHoSXRdy79\",\n        \"card_id\": null,\n        \"bank\": null,\n        \"captured\": true,\n        \"email\": \"gaurav.kumar@example.com\",\n        \"contact\": \"9123456780\",\n        \"description\": \"Payment Description\",\n        \"error_code\": null,\n        \"error_description\": null,\n        \"fee\": 20,\n        \"tax\": 10,\n        \"international\": false,\n        \"notes\": [],\n        \"vpa\": null,\n        \"wallet\": null\n      }\n    },\n    \"virtual_account\": {\n      \"entity\": {\n        \"id\": \"va_4xbQrmEoA5WJ0G\",\n        \"entity\": \"virtual_account\",\n        \"description\": \"First Virtual Account\",\n        \"customerid\": \"cust805c8oBQdBGPwS\",\n        \"status\": \"active\",\n        \"amount_paid\": 10000,\n        \"notes\": {\n          \"referencekey\": \"referencevalue\"\n        },\n        \"receivers\": [\n          {\n            \"id\": \"qr_4lsdkfldlteskf\",\n            \"entity\": \"qr_code\",\n            \"short_url\": \"https://exmpl.com\",\n            \"reference\": \"AgFcZjMR4izLf9\",\n          }\n        ],\n        \"created_at\": 1455696638\n      }\n    },\n    \"created_at\": 1400826760\n  }\n}\n\nEmails\nYou will also receive a 'payment successful' notification email, as you do for regular payments.\n","id":8},{"title":"Additional Operations","desc":null,"url":"bharatqr/start","body":"\nRazorpay lets you perform few additional operations around your BQR-based payment.\n\nSharing\n\nThe QR code can be shared using short_url. The QR code gets downloaded by clicking on link.\n\nshort_url: bit.ly/w.com\n\nThe customer can embed the QR code image from this URL onto any preferred platform such as invoice, standee or ID card and start accepting payments.\n\nRefunds\n\nYou can create refunds for the payments received on your QR Code. When a payment is received via\nUPI or Cards, it will be labeled as refund on the customer’s bank statement, crediting the refunded amount back to his/her account. Refunds are generally processed within 3-5 business days. The transaction fee and GST charged on successful transactions will not be reversed in case of refunds.","id":9},{"title":"Statuses","desc":"Your Razorpay virtual account can have active or closed status.","url":"bharatqr/status","body":"\nOnce created, a QR code can be in the following states:\n\nActive\n\nUpon created, a QR code is said to be in active status. This means it is ready to receive payments from any of its receivers.\n\nClosed\n\nA QR code will remain active until explicitly closed by you. The account is then said to be in closed state, and customers will no longer be able to make payments to the associated receivers.\n","id":10},{"title":"Testing","desc":"Create and manage your Razorpay virtual accounts in test mode before you start making and receiving actual payments.","url":"bharatqr/testing","body":"\nYou can create and manage your BQR code in test mode before you start receiving actual transactions.\n\nTest Payments\nTest payments can be initiated towards any BQR code created in test mode, using the BharatQR test payment route.\n\nRequest Parameters\n\nreference string\n: The unique identifier of the QR code that receives the test payment. Length should be 17. For example, qr_4lsdkfldlteskf.\n\namount integer\n: Amount of the payment in Paise.\n\nmethod string\n: Payment method for the test payment. Can have the following values: card or upi.\n\ncurl -u : \\\n   -X POST https://api.razorpay.com/v1/bharatqr/pay/test \\\n   -H \"Content-Type: application/json\" \\\n   -d '\n    {\n      \"reference\": \"qr_4lsdkfldlteskf\",\n      \"amount\": 500,\n      \"method\": \"card\"\n    }'\n\nThis will trigger the same webhook notifications that a live payment made via BharatQR code would.\n","id":11},{"title":"Disputes","desc":"You can create chargeback and disputes on Razorpay Dashboard for your customers and learn about the proofs required by the issuing bank.","url":"disputes","body":"A dispute is a situation that arises when your customer or the issuing bank questions the validity of a payment. It could arise due to reasons such as unauthorised charges, failure to deliver the promised merchandise, excessive charges and so on.\n\nTypes of Disputes\n\nA dispute can be of the following different types:\n\nFraud : It is a dispute that gets raised when the issuing bank suspects a transaction to be fraudulent based on the risk analysis.\nRetrieval : A retrieval is a request, initiated by the customer with their issuer bank for more information about a transaction. This is essentially a soft chargeback.\nChargeback : A claim raised against a transaction, initiated by the customers with their issuer bank, for a refund. The bank starts an official enquiry in this case.\nPre-Arbitration : When a chargeback that you have won is challenged by the customer for the second time.\nArbitration : When a chargeback that you have won is challenged for a third time by the customer and the card networks directly get involved. These disputes are usually very expensive.\n\nNote: The pre-arbitration and arbitration phases are usually long-drawn, complicated and challenging. It is advised to take remedial action during the retrievals and chargebacks phase itself to avoid further complication.\n\nDisputes Process Flow\n\nThe overall flow in which disputes are raised is given below:\n\nA dispute is always raised by the issuing bank. However, it can be initiated by the bank or the customer.\n\tInitiated by the issuing bank - The issuing bank suspects a fraudulent transaction and asks the merchant for justification.\n\tInitiated by the customer: The customer claims that the transaction was unauthorized and raises it with the issuing bank.\n\nThe merchant gets notified about the dispute and can do one of the following:\n\tAccept: If the merchant feels that the dispute is legitimate, the dispute request can be accepted. In the case of a fraud, the merchant must refund the amount. In other cases, Razorpay will auto-refund the amount.\n\tContest: If the merchant feels that the dispute is not legitimate, the dispute can be contested. In this case, the merchant submits the relevant documents to prove that the transaction was fair.\n\nIf the merchant contests, the documents are sent to the customer’s bank. The bank reviews the case and provides a verdict.\n\nIf the merchant loses, the amount would be deducted from the merchant’s account and is sent to the customer.\n\nSubmitting Evidences\n\nIf you are contesting a dispute and sending proofs, the following evidences may be required. This list is not exhaustive and the actual proofs required will depend on the customer's issuing bank:\n\nMerchant's explanation letter\nCustomer's recall letter\nOrder/Service confirmation\nRefund confirmation\nOrder/service cancelled\nDelivery proof\nShipping proof\nAccess activity log (any server or activity logs proving that the customer accessed or downloaded the purchased digital product).","id":12},{"title":"Related Information","desc":"View the status of disputes on the Razorpay Dashboard, enable webhooks when disputes are created and recieve email notification.","url":"disputes/related","body":"\nYou can view disputes, track its status on the Razorpay Dashboard and recieve notifications in the form of emails and webhook alerts.\n\nViewing Disputes\n\nYou can view the disputes raised against a charge on the Razorpay Dashboard. The list of disputes raised appears on the Razorpay Dashboard, as shown below:\n\n@image disputesscreennew.png\n\nNotifications\n\nNotifications are sent when disputes are created. These notifications are in the form of:\nEmails\nWebhook alerts\n\nEmails\n\nAn email notification is sent out when the dispute is created with details of the transaction, amount, cause of dispute and others.\n\nWebhooks\n\nYou can use webhooks to recieve alerts whenever a dispute is created or there is a change in status. The available webhook events for disputes are:\n\npayment.dispute.created\npayment.dispute.lost\npayment.dispute.won\npayment.dispute.closed\n\nThe sample payload posted for the payment.dispute.created event is shown below:\n\n{\n \"entity\": \"event\",\n \"accountid\": \"acc8Pl5TfyzwTDtt3\",\n \"event\": \"payment.dispute.created\",\n \"contains\": [\n  \"payment\",\n  \"dispute\"\n ],\n \"payload\": {\n  \"payment\": {\n   \"entity\": {\n    \"id\": \"pay_9EnFZTBmQcxoUA\",\n    \"entity\": \"payment\",\n    \"amount\": 50000,\n    \"currency\": \"INR\",\n    \"status\": \"captured\",\n    \"order_id\": null,\n    \"invoice_id\": null,\n    \"international\": false,\n    \"method\": \"netbanking\",\n    \"amount_refunded\": 0,\n    \"amount_transferred\": 0,\n    \"refund_status\": null,\n    \"captured\": true,\n    \"description\": \"Add Funds to Account\",\n    \"card_id\": null,\n    \"bank\": \"HDFC\",\n    \"wallet\": null,\n    \"vpa\": null,\n    \"email\": \"gaurav.kumar@example.com\",\n    \"contact\": \"9123456789\",\n    \"notes\": {\n     \"dashboard\": \"true\"\n    },\n    \"fee\": 1476,\n    \"tax\": 226,\n    \"error_code\": null,\n    \"error_description\": null,\n    \"created_at\": 1513598384\n   }\n  },\n  \"dispute\": {\n   \"entity\": {\n    \"id\": \"disp_9bg0Jxor3LpROR\",\n    \"entity\": \"dispute\",\n    \"paymentid\": \"pay9EnFZTBmQcxoUA\",\n    \"amount\": 45000,\n    \"amount_deducted\": 0,\n    \"currency\": \"INR\",\n    \"gatewaydisputeid\": \"dfghj\",\n    \"reasoncode\": \"chargebackauthorization\",\n    \"respond_by\": 1518853863,\n    \"status\": \"open\",\n    \"phase\": \"chargeback\",\n    \"created_at\": 1518594688\n   }\n  }\n },\n \"created_at\": 1518594688\n}\n\nYou can read more about webhooks here.\n\nStatuses\n\nYou can track a dispute on the Razorpay Dashboard which displays the following statuses:\n\nStatus | Description\n\nOpen | Indicates that the dispute has been created.\n\nUnder Review | Indicates that the dispute is being reviewed by the issuing bank.\n\nWon | Indicates that the bank has accepted the remedial documents and you have won the chargeback.\n\nLost | Indicates that the bank did not accept the remedial documents and you have lost the chargeback.\n\nClosed | This status appears in the case of fraud transactions. A fraud case is closed after you provide details of the transaction or make a refund to the customer.\n","id":13},{"title":"Listing External Wallets","url":"external-wallets-pvt/external-wallets-pvt","body":"\nYou can list external wallets (wallets not supported by Razorpay) on our checkout form. Razorpay will not process payments for external wallets but hand over the control to you along with any other customer data entered in the checkout form.\n\nNote:\nIf you are using any of the following external wallets, you can make them appear in your checkout form:\nCitrus\nPaytm\nAmazon Pay\n\nYou can list these wallets on any of the following platforms:\n\n Web application\n Android\n iOS\n\nNote: Wallet payment option can be used for a purchase amount of upto @data 20000 (2000000 in paise).\n\nWeb Application\n\nTo list external wallet on your web application, you need to first integrate our checkout form. After you integrate, follow the steps given below:\n\nAdd a key external to checkout.js options.\n\nSet wallets with wallet name array in external as the first parameter.\n\n      external: {\n      wallets: ['paytm']\n    }\n\nSet handler with a callback function in exteranl as second parameter. This is where you receive a callback from which you can handle external wallets, based on the parameters:\n\n      external: {\n      wallets: ['paytm'],\n      handler: function(data) {\n         'data'\n        console.log(this, data)\n      }\n    }\n\nThe external wallet sent in options will be shown in the wallets section. If the customer selects external wallet and clicks Submit, our checkout.js library will return the control to you in the external:handler: method. You will get the selected wallet name as an argument. You will now have to handle the external payment method.\n\nAndroid\n\nTo list external wallet on your Android app, you need to first integrate our Android checkout SDK. After you integrate our Android checkout, follow the steps given below:\n\nImplement ExternalWalletListener in your activity.\n\n        public class PaymentActivity extends Activity implements PaymentResultListener, ExternalWalletListener {\n        //..\n\n        @Override\n    \tpublic void onExternalWalletSelected(String walletName, PaymentData paymentData){\n\t\t\t// add your logic here to handle external wallet payments like\n\t\t\tif(walletName.equals(\"paytm\"){\n\t\t\t    //handle paytm payment\n\t\t\t}\n\n    \t}\n\n    }\n\nSend external wallet information to checkout in options. You can send it in the following way:\n\n        JSONArray wallets = new JSONArray();\n    wallets.put(\"paytm\");\n    JSONObject externals = new JSONObject();\n    externals.put(\"wallets\", wallets);\n    options.put(\"external\", externals);\n    The external wallet sent in options will be shown in wallets section. If the customer selects an external wallet and submits it, our SDK will return control to you in the onExternalWalletSelected method. You will get the selected wallet name as an argument. You will now have to handle your payment.\n\niOS\n\nTo list external wallet on your iOS app, you need to first setup your framework. Download the Razorpay.framework-0.14.11 from here.\n\nYour next step is to integrate the Bitcode enabled SDK. Refer Razorpay iOS Integration for integration. Once you are done with that, you can follow the steps given below:\n\nImplement ExternalWalletSelectionProtocol in your view controller.\n\n        @interface ViewController ()  {\n\nSet  ExternalWalletSelectionDelegate to get callback in delegate method.\n\n        [razorpay setExternalWalletSelectionDelegate:self];\n\nSend external wallet information to Checkout in options. You can send it in the following way:\n\n        NSDictionary *options = @{\n    @\"amount\" : @\"20000\",\n    @\"currency\" : @\"INR\",\n    @\"description\" : @\"A Wild Sheep Chase is the third novel by Japanese author Haruki Murakami\",\n    @\"image\" : http://example.com/your_logo.png,\n    @\"name\" : @\"Gaurav Kumar\",\n    @\"external\" : @{@\"wallets\" : @[ @\"paytm\" ]},\n    @\"prefill\" :\n        @{@\"email\" : @\"gaurav.kumar@razorpay.com\", @\"contact\" : @\"9123456789\"},\n    @\"theme\" : @{@\"color\" : @\"#3594E2\"}\n    };\n\nImplement onExternalWalletSelected:WithPaymentData: delegate method to receive callback and get control back.\n\nThe external wallet sent in options will be shown in wallets section. If the customer selects an external wallet and clicks Submit, our SDK will return control to you in the onExternalWalletSelected: method. You will get the selected wallet name as an argument. You will not have to handle the external payment method.\n","id":14},{"title":"Bank Holiday List 2017","url":"getting-started/bank-holidays","body":"Following is a list of official bank holidays 2017 for Mumbai as\nper the Reserve Bank of India. Settlements to merchants will not\ntake place on the holidays listed below and any scheduled settlement on\nthese days will occur on the next working day.\n\nName of Festival\nDate\nDay of the Week\n\nRepublic Day\nJanuary 26\nThursday\n\nBMC Elections 2017\nFebruary 21\nTuesday\n\nMahashivratri\nFebruary 24\nFriday\n\nHoli (2nd day)/Yaosang 2nd Day\nMarch 13\nMonday\n\nGudi Padwa\nMarch 28\nTuesday\n\nAnnual Closing of Accounts\nApril 1\nSaturday\n\nShree Ram Navami\nApril 4\nTuesday\n\nDr. Babasaheb Ambedkar Jayanti/Cheiraoba/Good Friday/Biju Festival\nApril 14\nFriday\n\nMaharashtra Din/May Day\nMay 1\nMonday\n\nBuddha Pournima\nMay 10\nWednesday\n\nRamzan Id (Id-ul-Fitr)\nJune 26\nMonday\n\nAnnual Closing of RBI/Kharchi Puja\nJuly 1\nSaturday\n\nIndependence Day/Janmashtami\nAugust 15\nTuesday\n\nParsi New Year (Shahenshahi)\nAugust 17\nThursday\n\nGanesh Chaturthi\nAugust 25\nFriday\n\nBakri Id (Id-ul-Zuha)\nSeptember 2\nSaturday\n\nDurga Puja/Dussehra (Vijaya Dashmi)\nSeptember 30\nSaturday\n\nMahatma Gandhi Jayanti\nOctober 2\nMonday\n\nDiwali Amavasaya (Laxmi Pujan)/Kali Puja\nOctober 19\nThursday\n\nDiwali (Balipratipada)\nOctober 20\nFriday\n\nGuru Nanak Jayanti\nNovember 4\nSaturday\n\nId-e-Milad/Eid Milad-un-Nabi\nDecember 1\nFriday\n\nChristmas\nDecember 25\nMonday\n\n Note: All 2nd and 4th Saturdays and all Sundays\nof every month are bank holidays. This list is available on the Holidays\npage in the RBI official website.\n","id":15},{"title":"Team Support","url":"getting-started/team-support","body":"\nYou can invite members in your organization and assign various roles to team using the option Team provided in the Razorpay Dashboard.\n\nTo access the Team feature:\n\nGo to Razorpay Dashboard.\nClick Team under Features on the left panel\nThe Manage Team screen appears as shown below. Select User Role from the drop-down.\n\nYou can invite anyone to your Razorpay account. Every user will have their own email and password. If you invite an existing user to your dashboard, they will see the invite in the profile section of the Dashboard.\n\nIf the user you have invited does not have an account, a registration link is sent on their email.  They will then have to accept the invite and create an account by providing a username and password.\n\nSwitching Accounts: After accepting the invite, the user can switch between both the accounts using a switcher option Switch Merchant available in the Dashboard header.\n\nThe Dashboard also displays any pending invites that you may have, as shown below:\n\nOnce a user has accepted an invite, you can view the list of users that you have added in your team. You can choose to Remove or Update their roles, as required.\n\nThe following table explains each of the roles and the permissions in details:\n\nDashboard Permissions\nOwner\nAdmin\nManager\nOperations\nFinance\nSupport\nePOS\n\nPayments\nAll\nAll\nAll\nRead-only\nRead-only\nRead-only\nNone\n\nOrders\nAll\nAll\nAll\nRead-only\nRead-only\nRead-only\nNone\n\nRefunds\nAll\nAll\nAll\nAll\nRead-only\nRead-only\nNone\n\nInvoices\nAll\nAll\nAll\nRead-only\nRead-only\nRead-only\nNone\n\nReferrals\nAll\nAll\nAll\nRead-only\nRead-only\nRead-only\nNone\n\nSettlements\nAll\nAll\nAll\nRead-only\nRead-only\nNone\nNone\n\nAdd Funds\nAll\nAll\nAll\nAll\nRead-only\nRead-only\nNone\n\nReports\nAll\nAll\nAll\nRead-only\nRead-only\nNone\nNone\n\nTeam\nAll\nNone\nNone\nNone\nNone\nNone\nNone\n\nCredits\nAll\nAll\nAll\nRead-only\nRead-only\nNone\nNone\n\nAPI Keys\nAll\nAll\nNone\nNone\nNone\nNone\n\nActivation\nAll\nAll\nAll\nNone\nNone\nNone\nNone\n\nWebhook\nAll\nAll\nAll\nNone\nNone\nNone\nNone\n\nProfile\nAll\nAll\nAll\nAll\nAll\nAll\nAll\n\nProfile - GST Details\nAll\nNone\nNone\nNone\nAll\nNone\nNone\n\nConfiguration\nAll\nAll\nAll\nNone\nNone\nNone\nNone\n\nPayment Links\nAll\nAll\nAll\nAll\nAll\nNone\nAll\n\nNote: Finance role cannot perform any action on the payment such as capture or refund.\n","id":16},{"title":"Razorpay-WIX Checkout Widget","url":"integrations/wix","body":"\n\nThis document covers customer side payment widget only. You'll also need to capture the payments manually\nusing either Razorpay's dashboard or webhooks.\n\nAdding widget to your site\n\nOpen WIX Editor, and add \"HTML Code\" element. See screenshot below for reference.\nResize and position the element appropriately. Recommended size is 340x520.\nEdit and paste following code. Replace test key shown below with your own generated from Razorpay dashboard.\n\nThat's all. You should see pay button and amount field in preview and published site after saving.\n\nMore Options\n\nAdditional options can be passed using data- attributes. for example, to customize pay button text, code will be:\n\nYou can view list of all possible options here.\n\nCustomization\nYou can also select a logo and theme color for payment window in dashboard.\n\nTo pass a pre-selected amount, add data-amount option as well. Please note that data-amount should be specified in paise:\n\nIf amount is passed, then user wouldn't be prompted for amount.\n\nScreenshots\n\nInstallation:\n  @image plugins/wix/1.jpg\n\nEdit Code:\n  @image plugins/wix/2.jpg\n\nGenerated Widget:\n  @image plugins/wix/3.jpg\n\nPayment Screen:\n  @image plugins/wix/4.jpg\n\nPost Payment:\n  @image plugins/wix/5.jpg\n","id":17},{"title":"API Reference","url":"invoices/api","body":"The following APIs will help you perform different Invoice operations. The same operations are available via the Dashboard as well.\n\nImportant: Currently, we do not support creating GST Invoices via APIs. Therefore the following APIs will enable you to create normal invoices only.\n\nEntity Structure\n\nThe below JSON is the representation for the invoice entity:\n\n{\n    \"id\": \"inv_gHQwerty123ggd\",\n    \"entity\": \"invoice\",\n    \"receipt\": \"BILL13375649\",\n    \"customerid\": \"custgHQwerty123ggd\",\n    \"customer_details\": {\n        \"name\": \"Gaurav Kumar\",\n        \"email\": \"gaurav.kumar@razorpay.com\",\n        \"contact\": \"9123456789\",\n        \"billing_address\": \"318 C-Wing, Suyog Co. Housing Society Ltd., T.P.S Road, Vazira, Borivali, West Mumbai, Maharashtra, 400092\",\n        \"customer_name\": null,\n        \"customer_email\": \"gaurav.kumar@razorpay.com\",\n        \"customer_contact\": \"9123456789\"\n    },\n    \"orderid\": \"ordergHQwerty123ggd\",\n    \"line_items\": [\n        {\n            \"id\": \"li_gHQwerty123ggd\",\n            \"itemid\": \"itemgHQwerty123gg1\",\n            \"name\": \"Book / English August\",\n            \"description\": \"Funny story of an IAS officer wanting to be aything other than an IAS.\",\n            \"amount\": 20000,\n            \"unit_amount\": 20000,\n            \"gross_amount\": 20000,\n            \"tax_amount\": 0,\n            \"net_amount\": 20000,\n            \"currency\": \"INR\",\n            \"type\": \"invoice\",\n            \"tax_inclusive\": false,\n            \"unit\": null,\n            \"quantity\": 1,\n            \"taxes\": []\n        },\n        {\n            \"id\": \"li_gHQwerty123ggg\",\n            \"itemid\": \"itemgHQwerty123gg2\",\n            \"name\": \"Book / A Wild Sheep Chase\",\n            \"description\": \"A Wild Sheep Chase is the third novel by Japanese author Haruki Murakami.\",\n            \"amount\": 20000,\n            \"unit_amount\": 20000,\n            \"gross_amount\": 20000,\n            \"tax_amount\": 0,\n            \"net_amount\": 20000,\n            \"currency\": \"INR\",\n            \"type\": \"invoice\",\n            \"tax_inclusive\": false,\n            \"unit\": null,\n            \"quantity\": 1,\n            \"taxes\": []\n        }\n    ],\n    \"payment_id\": null,\n    \"status\": \"issued\",\n    \"expire_by\": null,\n    \"issued_at\": 1488446398,\n    \"paid_at\": null,\n    \"cancelled_at\": null,\n    \"expired_at\": null,\n    \"sms_status\": \"pending\",\n    \"email_status\": \"pending\",\n    \"date\": 1505937098,\n    \"terms\": null,\n    \"partial_payment\": false,\n    \"gross_amount\": 20000,\n    \"tax_amount\": 0,\n    \"amount\": 20000,\n    \"amount_paid\": 0,\n    \"amount_due\": 20000,\n    \"currency\": \"INR\",\n    \"description\": null,\n    \"notes\": [],\n    \"comment\": null,\n    \"short_url\": \"http://rzp.io/w4ahvtz\",\n    \"view_less\": true,\n    \"billing_start\": null,\n    \"billing_end\": null,\n    \"type\": \"invoice\",\n    \"grouptaxesdiscounts\": false,\n    \"user_id\": null,\n    \"created_at\": 1505935715\n}\n\nCreating an Invoice\n\nThe following API endpoint creates an invoice:\n\n/invoices\n\nRequest Body Attributes\n\nThe following table lists out the attributes and their explanations that are sent in request body:\n\nAttribute\nDatatype\nRequirement/Description\n\ntype\nstring in: link/ecod/invoice\nMandatory. Must pass type=invoice\n\ncustomer_id\nstring\nOptional. You can pass the customer_id in this field, if you are using Customer API. If not, you can pass the customer object described in the below fields.\n\ncustomer[name]\nstring\nMandatory, without customer_id.\n\ncustomer[email]\nstring\nOptional\n\ncustomer[contact]\nstring\nOptional\n\ncustomerbilling_address\nstring\nMandatory, with customer[billing_address]\n\ncustomerbilling_address\nstring\nOptional\n\ncustomerbilling_address\nstring\nMandatory, with customer[billing_address]\n\ncustomerbilling_address\nstring\nMandatory, with customer[billing_address]\n\ncustomerbilling_address\nstring\nMandatory, with customer[billing_address]\n\ncustomerbilling_address\nstring\nMandatory, with customer[billing_address]\n\ncurrency\nstring\nMandatory. Only INR is supported currently\n\ndescription\nstring\nOptional\n\nline_items\nstring\nOptional. If you are using Items API, you may use existing item as a template for line items of invoice. You can still override other details such as name, description by passing these along with item_id. Item will not be updated.\n\nline_items\nstring\nMandatory. without item_id\n\nline_items\nstring\nOptional\n\nline_items\ninteger\nMandatory, without item_id\n\nline_items\ninteger\nMandatory, without item_id. Only INR is accepted for now. Also, this needs to be same as currency attribute.\n\nline_items\ninteger\nOptional. Defaults to 1\n\nexpire_by\nepoch/integer\nOptional\n\nsms_notify\nstring in: 0/1\nOptional. Defaults to 1\n\nemail_notify\nstring in: 0/1\nOptional. Defaults to 1\n\ndate\nepoch/integer\nOptional\n\nterms\nstring\nOptional\n\nnotes\nobject\nOptional\n\ncomment\nstring\nOptional\n\ndraft\nstring in: 0/1\nOptional, Defaults to 0\n\nreceipt\nstring\nOptional\n\nSample Request and Response\n\n{\n    \"type\":\"invoice\",\n    \"customer\":{\n      \"name\": \"Gaurav Kumar\",\n        \"email\":\"gaurav.kumar@gmail.com\",\n        \"contact\":\"9123456789\",\n        \"billing_address\":{\n            \"line1\":\"318 C-Wing, Suyog Co. Housing Society Ltd., T.P.S Road, Vazira, Borivali\",\n            \"city\":\"West Mumbai\",\n            \"state\":\"Maharashtra\",\n            \"zipcode\":\"400092\",\n            \"country\":\"India\"\n        }\n    },\n    \"line_items\":[\n        {\n            \"name\":\"Book / English August\",\n            \"description\":\"Funny story of an IAS officer wanting to be aything other than an IAS.\",\n            \"amount\":20000,\n            \"currency\":\"INR\",\n            \"quantity\":1\n        },\n        {\n          \"itemid\": \"itemgHQwerty123ggd\"\n        }\n    ],\n    \"currency\":\"INR\",\n    \"sms_notify\": \"1\",\n    \"email_notify\": \"1\"\n}\n{\n  \"id\": \"inv_gHQwerty123ggd\",\n  \"entity\": \"invoice\",\n  \"receipt\": \"BILL13375649\",\n  \"customerid\": \"custgHQwerty123ggd\",\n  \"customer\": {\n    \"name\": Gaurav Kumar,\n    \"email\": \"gaurav.kumar@gmail.com\",\n    \"contact\": \"9123456789\",\n    \"billing_address\": {\n      \"id\": \"addr_gHQwerty123ggd\",\n      \"type\": \"billing_address\",\n      \"primary\": true,\n      \"line1\": \"318 C-Wing, Suyog Co. Housing Society Ltd., T.P.S Road, Vazira, Borivali\",\n      \"line2\": null,\n      \"zipcode\": \"400092\",\n      \"city\": \"West Mumbai\",\n      \"state\": \"Maharashtra\",\n      \"country\": \"in\"\n    }\n  },\n  \"orderid\": \"ordergHQwerty123ggd\",\n  \"line_items\": [\n    {\n      \"id\": \"li_gHQwerty123gg1\",\n      \"name\": \"Book / English August\",\n      \"description\": null,\n      \"amount\": 20000,\n      \"currency\": \"INR\",\n      \"quantity\": 1\n    },\n    {\n      \"id\": \"li_gHQwerty123gg2\",\n      \"name\": \"Book / A Wild Sheep Chase,\n      \"description\": null,\n      \"amount\": 20000,\n      \"currency\": \"INR\",\n      \"quantity\": 1\n    }\n  ],\n  \"payment_id\": null,\n  \"status\": \"issued\",\n  \"expire_by\": 1498439025,\n  \"issued_at\": 1488446398,\n  \"paid_at\": null,\n  \"expired_at\": null,\n  \"sms_status\": \"pending\",\n  \"email_status\": \"pending\",\n  \"date\": 1505937098,\n  \"terms\": \"Terms and condition of the service/invoice\",\n  \"amount\": 20000,\n  \"description\": \"A summary for the invoice.\",\n  \"notes\": {\n    \"random_key\": \"A random note.\"\n  },\n  \"comment\": \"An optional comment for the customer.\",\n  \"currency\": \"INR\",\n  \"short_url\": \"https://rzp.io/xyzx\",\n  \"view_less\": true,\n  \"type\": \"invoice\",\n  \"user_id\": null,\n  \"created_at\": 1505935715\n}\n\n Note:\nYou can create a blank invoice (with no details at all) in draft state, update it with\nnecessary information and then issue it at a later time with this API. Only after the invoice is\nissued, you will get a short URL. Also, only after the invoice is issued, it can be sent to customers\nand the corresponding payment can be made against it. You can use Items APIs\nto create items which you can later use as a template to create line items in an invoice.\n\nUpdating an Invoice\n\nTo update an invoice from the Dashboard, refer Invoice Operation Section.\nTo update an invoice via API, use this endpoint:\n\n/invoices/:id\n\nIn draft state all the attributes are allowed.\n\nSample Inputs and Outputs\n\n{\n  \"line_items\": [\n      {\n        \"id\": \"li_gHQwerty123gg1\",\n        \"name\": \"Book / English August - Updated name and quantity\",\n        \"quantity\": 1\n      },\n      {\n        \"name\": \"Book / A Wild Sheep Chase\",\n        \"amount\": 20000,\n        \"currency\": \"INR\",\n        \"quantity\": 1\n      }\n  ],\n  \"notes\": {\n    \"updated-key\": \"An updated note.\"\n  }\n}\n{\n    \"id\": \"inv_gHQwerty123ggd\",\n    \"entity\": \"invoice\",\n    \"receipt\": \"BILL13375649\",\n    \"invoice_number\": null,\n    \"customerid\": \"cust00000000000001\",\n    \"customer_details\": {\n        \"name\": \"Gaurav Kumar\",\n        \"email\": \"gaurav.kumar@razorpay.com\",\n        \"contact\": \"9123456789\",\n        \"billing_address\": null,\n    },\n    \"order_id\": null,\n    \"line_items\": [\n        {\n            \"id\": \"li_gHQwerty123gg1\",\n            \"item_id\": null,\n            \"name\": \"Book / English August - Updated name and quantity\",\n            \"description\": \"Funny story of an IAS officer wanting to be aything other than an IAS.\",\n            \"amount\": 20000,\n            \"unit_amount\": 20000,\n            \"gross_amount\": 20000,\n            \"tax_amount\": 0,\n            \"net_amount\": 20000,\n            \"currency\": \"INR\",\n            \"type\": \"invoice\",\n            \"tax_inclusive\": false,\n            \"unit\": null,\n            \"quantity\": 1,\n            \"taxes\": []\n        },\n        {\n            \"id\": \"li_gHQwerty123gg2\",\n            \"item_id\": null,\n            \"name\": \"Book / A Wild Sheep Chase\",\n            \"description\": null,\n            \"amount\": 20000,\n            \"unit_amount\": 20000,\n            \"gross_amount\": 20000,\n            \"tax_amount\": 0,\n            \"net_amount\": 20000,\n            \"currency\": \"INR\",\n            \"type\": \"invoice\",\n            \"tax_inclusive\": false,\n            \"unit\": null,\n            \"quantity\": 1,\n            \"taxes\": []\n        },\n        {\n            \"id\": \"li_gHQwerty123gg3\",\n            \"item_id\": \"null\",\n            \"name\": \"Book / Rocket Man: Elon Musk in His Own Words\",\n            \"description\": \"Elon Musk, the South African--born entrepreneur who made his first fortune with Internet companies such as PayPal, has risen to global prominence as the visionary CEO of both Tesla Motors and SpaceX\",\n            \"amount\": 20000,\n            \"unit_amount\": 20000,\n            \"gross_amount\": 20000,\n            \"tax_amount\": 0,\n            \"net_amount\": 20000,\n            \"currency\": \"INR\",\n            \"type\": \"invoice\",\n            \"tax_inclusive\": false,\n            \"unit\": null,\n            \"quantity\": 1,\n            \"taxes\": []\n        }\n    ],\n    \"payment_id\": null,\n    \"status\": \"draft\",\n    \"expire_by\": null,\n    \"issued_at\": null,\n    \"paid_at\": null,\n    \"cancelled_at\": null,\n    \"expired_at\": null,\n    \"sms_status\": \"pending\",\n    \"email_status\": \"pending\",\n    \"date\": 1505937098,\n    \"terms\": null,\n    \"partial_payment\": false,\n    \"gross_amount\": 20000,\n    \"tax_amount\": 0,\n    \"amount\": 20000,\n    \"amount_paid\": null,\n    \"amount_due\": null,\n    \"currency\": \"INR\",\n    \"description\": null,\n    \"notes\": {\n        \"updated-key\": \"An updated note.\"\n    },\n    \"comment\": null,\n    \"short_url\": null,\n    \"view_less\": true,\n    \"billing_start\": null,\n    \"billing_end\": null,\n    \"type\": \"invoice\",\n    \"grouptaxesdiscounts\": false,\n    \"user_id\": null,\n    \"created_at\": 1505935715\n}\n{\n  \"terms\": \"Updated terms and conditions\",\n  \"comment\": \"Updated comment for customer\"\n}\n{\n    \"id\": \"inv_gHQwerty123ggd\",\n    \"entity\": \"invoice\",\n    \"receipt\": \"BILL13375649\",\n    \"invoice_number\": null,\n    \"customerid\": \"custgHQwerty123ggd\",\n    \"customer_details\": {\n        \"name\": null,\n        \"email\": \"gaurav.kumar@razorpay.com\",\n        \"contact\": \"9123456789\",\n        \"billing_address\": null,\n    },\n    \"order_id\": null,\n    \"line_items\": [\n        {\n            \"id\": \"li_gHQwerty123gg1\",\n            \"item_id\": null,\n            \"name\": \"Book / English August - Updated name and quantity\",\n            \"description\": \"Funny story of an IAS officer wanting to be aything other than an IAS.\",\n            \"amount\": 20000,\n            \"unit_amount\": 20000,\n            \"gross_amount\": 20000,\n            \"tax_amount\": 0,\n            \"net_amount\": 20000,\n            \"currency\": \"INR\",\n            \"type\": \"invoice\",\n            \"tax_inclusive\": false,\n            \"unit\": null,\n            \"quantity\": 1,\n            \"taxes\": []\n        },\n        {\n            \"id\": \"li_gHQwerty123gg2\",\n            \"item_id\": null,\n            \"name\": \"Book / A Wild Sheep Chase\",\n            \"description\": null,\n            \"amount\": 20000,\n            \"unit_amount\": 20000,\n            \"gross_amount\": 20000,\n            \"tax_amount\": 0,\n            \"net_amount\": 20000,\n            \"currency\": \"INR\",\n            \"type\": \"invoice\",\n            \"tax_inclusive\": false,\n            \"unit\": null,\n            \"quantity\": 1,\n            \"taxes\": []\n        },\n        {\n            \"id\": \"li_gHQwerty123gg3\",\n            \"item_id\": \"null\",\n            \"name\": \"Book / Rocket Man: Elon Musk in His Own Words\",\n            \"description\": \"Elon Musk, the South African--born entrepreneur who made his first fortune with Internet companies such as PayPal, has risen to global prominence as the visionary CEO of both Tesla Motors and SpaceX\",\n            \"amount\": 20000,\n            \"unit_amount\": 20000,\n            \"gross_amount\": 20000,\n            \"tax_amount\": 0,\n            \"net_amount\": 20000,\n            \"currency\": \"INR\",\n            \"type\": \"invoice\",\n            \"tax_inclusive\": false,\n            \"unit\": null,\n            \"quantity\": 1,\n            \"taxes\": []\n        }\n    ],\n    \"payment_id\": null,\n    \"status\": \"draft\",\n    \"expire_by\": null,\n    \"issued_at\": null,\n    \"paid_at\": null,\n    \"cancelled_at\": null,\n    \"expired_at\": null,\n    \"sms_status\": \"pending\",\n    \"email_status\": \"pending\",\n    \"date\": 1505937098,\n    \"terms\": \"Updated terms and conditions\",\n    \"gross_amount\": 20000,\n    \"tax_amount\": 0,\n    \"amount\": 20000,\n    \"amount_paid\": null,\n    \"amount_due\": null,\n    \"currency\": \"INR\",\n    \"description\": null,\n    \"notes\": {\n        \"updated-key\": \"An updated note.\"\n    },\n    \"comment\": \"Updated comment for customer\",\n    \"short_url\": null,\n    \"view_less\": true,\n    \"billing_start\": null,\n    \"billing_end\": null,\n    \"type\": \"invoice\",\n    \"grouptaxesdiscounts\": false,\n    \"user_id\": null,\n    \"created_at\": 1505935715\n}\n\nNote: Invoice update is a patch request and line_items are treated as attributes. So when you\nsend lineitems array, you would be replacing current set of lineitems with the new set. Given that, you\nmay do something like following: keep some(optionally with updated values) of the existing line items(by line_item's id\nin dictionary with other optional attributes), remove some of the existing line_items(by not having them in new set at all) and add\nsome new line items by passing new dictionary in same line_items array(or list).\n\nFor example, in Request #1 - lineitems with id li00000000000001 will be patched with the updated name and quantity,\na new lineitems would be added (the second dictionary in the lineitems array) and all other existing would be removed.\n\nIssuing an Invoice\n\nYou can issues an invoice in draft state. A short URL or payment link gets created only\nwhen the invoice is in issued state. Only then can the customer proceed with the payment.\n\nThe following endpoint can be used to issue an invoice:\n\n/invoices/:id/issue\n\nIt can only be called on an invoice that is in the draft state.\nIts response is the invoice entity, similar to create/update API response. Its status now would be issued\nand it'll have short_url generated. Also SMS and Email would be sent to customer based on what parameters were\nsent initially during creation.\n\nDeleting an Invoice\n\nTo delete an invoice use this endpoint:\n\nYou can delete an invoice which is in the draft state.\n\n/invoices/:id\n\nThe response is always be an empty array, as shown below:\n\n[]\n\nCancelling an Invoice\n\nTo cancel an unpaid Invoice with given ID via API, use this endpoint:\n\n/invoices/:id/cancel\n\nIt can only be called on an invoice that is not in the paid state.\nThe response for the API will be the invoice entity, similar to create/update API response, with status\nattribute's value as cancelled.\n\nGetting an Invoice\n\nTo search an invoice via API with given ID, use this endpoint:\n\n/invoices/:id\n\nThe response for the API will be similar to the entity as detailed here.\n\nFetching Multiple Invoices\n\nYou can fetch multiple invoices using the following end point:\n\n/invoices\n\nAccepted Query Parameters\ntype\npayment_id\nreceipt\ncustomer_id\n\nSample Response\n\n{\n    \"entity\": \"collection\",\n    \"count\": 2,\n    \"items\": [\n        {\n            \"id\": \"inv_gHQwerty123ggd\",\n            \"entity\": \"invoice\",\n            \"receipt\": \"BILL13375649\",\n            \"invoice_number\": null,\n            \"customerid\": \"custgHQwerty123ggd\",\n            \"customer_details\": {\n                \"name\": null,\n                \"email\": \"gaurav.kumar@razorpay.com\",\n                \"contact\": \"9123456789\",\n                \"billing_address\": null,\n            },\n            \"order_id\": null,\n            \"line_items\": [\n                {\n                    \"id\": \"li_gHQwerty123gg1\",\n                    \"item_id\": null,\n                    \"name\": \"Book / English August - Updated name and quantity\",\n                    \"description\": \"Funny story of an IAS officer wanting to be aything other than an IAS.\",\n                    \"amount\": 20000,\n                    \"unit_amount\": 20000,\n                    \"gross_amount\": 20000,\n                    \"tax_amount\": 0,\n                    \"net_amount\": 20000,\n                    \"currency\": \"INR\",\n                    \"type\": \"invoice\",\n                    \"tax_inclusive\": false,\n                    \"unit\": null,\n                    \"quantity\": 1,\n                    \"taxes\": []\n                },\n                {\n                    \"id\": \"li_gHQwerty123gg2\",\n                    \"item_id\": null,\n                    \"name\": \"Book / Elon Musk's Autobiography\",\n                    \"description\": null,\n                    \"amount\": 20000,\n                    \"unit_amount\": 20000,\n                    \"gross_amount\": 20000,\n                    \"tax_amount\": 0,\n                    \"net_amount\": 20000,\n                    \"currency\": \"INR\",\n                    \"type\": \"invoice\",\n                    \"tax_inclusive\": false,\n                    \"unit\": null,\n                    \"quantity\": 1,\n                    \"taxes\": []\n                },\n                {\n                    \"id\": \"li_gHQwerty123gg3\",\n                    \"item_id\": \"null\",\n                    \"name\": \"Sample item name\",\n                    \"description\": \"Sample item description\",\n                    \"amount\": 20000,\n                    \"unit_amount\": 20000,\n                    \"gross_amount\": 20000,\n                    \"tax_amount\": 0,\n                    \"net_amount\": 20000,\n                    \"currency\": \"INR\",\n                    \"type\": \"invoice\",\n                    \"tax_inclusive\": false,\n                    \"unit\": null,\n                    \"quantity\": 1,\n                    \"taxes\": []\n                }\n            ],\n            \"payment_id\": null,\n            \"status\": \"draft\",\n            \"expire_by\": null,\n            \"issued_at\": null,\n            \"paid_at\": null,\n            \"cancelled_at\": null,\n            \"expired_at\": null,\n            \"sms_status\": \"pending\",\n            \"email_status\": \"pending\",\n            \"date\": 1505937098,\n            \"terms\": null,\n            \"partial_payment\": false,\n            \"gross_amount\": 20000,\n            \"tax_amount\": 0,\n            \"amount\": 20000,\n            \"amount_paid\": null,\n            \"amount_due\": null,\n            \"currency\": \"INR\",\n            \"description\": null,\n            \"notes\": {\n                \"updated-key\": \"An updated note.\"\n            },\n            \"comment\": null,\n            \"short_url\": null,\n            \"view_less\": true,\n            \"billing_start\": null,\n            \"billing_end\": null,\n            \"type\": \"invoice\",\n            \"grouptaxesdiscounts\": false,\n            \"user_id\": null,\n            \"created_at\": 1505935715\n        },\n        {\n            \"id\": \"inv_gHQwerty123ggd\",\n            \"entity\": \"invoice\",\n            \"receipt\": \"BILL13375649\",\n            \"invoice_number\": null,\n            \"customerid\": \"custgHQwerty123ggd\",\n            \"customer_details\": {\n                \"name\": null,\n                \"email\": \"gaurav.kumar@razorpay.com\",\n                \"contact\": \"9123456789\",\n                \"billing_address\": null,\n            },\n            \"orderid\": \"ordergHQwerty123ggd\",\n            \"line_items\": [\n                {\n                    \"id\": \"li_gHQwerty123gg1\",\n                    \"item_id\": null,\n                    \"name\": \"Book / English August\",\n                    \"description\": \"Funny story of an IAS officer wanting to be aything other than an IAS.\",\n                    \"amount\": 20000,\n                    \"unit_amount\": 20000,\n                    \"gross_amount\": 20000,\n                    \"tax_amount\": 0,\n                    \"net_amount\": 20000,\n                    \"currency\": \"INR\",\n                    \"type\": \"invoice\",\n                    \"tax_inclusive\": false,\n                    \"unit\": null,\n                    \"quantity\": 1,\n                    \"taxes\": []\n                },\n                {\n                    \"id\": \"li_gHQwerty123gg2\",\n                    \"itemid\": \"itemgHQwerty123ggd\",\n                    \"name\": \"Sample item name\",\n                    \"description\": \"Sample item description\",\n                    \"amount\": 20000,\n                    \"unit_amount\": 20000,\n                    \"gross_amount\": 20000,\n                    \"tax_amount\": 0,\n                    \"net_amount\": 20000,\n                    \"currency\": \"INR\",\n                    \"type\": \"invoice\",\n                    \"tax_inclusive\": false,\n                    \"unit\": null,\n                    \"quantity\": 1,\n                    \"taxes\": []\n                }\n            ],\n            \"payment_id\": null,\n            \"status\": \"issued\",\n            \"expire_by\": null,\n            \"issued_at\": 1488446398,\n            \"paid_at\": null,\n            \"cancelled_at\": null,\n            \"expired_at\": null,\n            \"sms_status\": \"sent\",\n            \"email_status\": \"sent\",\n            \"date\": 1505937098,\n            \"terms\": null,\n            \"partial_payment\": false,\n            \"gross_amount\": 40000,\n            \"tax_amount\": 0,\n            \"amount\": 40000,\n            \"amount_paid\": 0,\n            \"amount_due\": 40000,\n            \"currency\": \"INR\",\n            \"description\": null,\n            \"notes\": [],\n            \"comment\": null,\n            \"short_url\": \"http://rzp.io/uzvlif3\",\n            \"view_less\": true,\n            \"billing_start\": null,\n            \"billing_end\": null,\n            \"type\": \"invoice\",\n            \"grouptaxesdiscounts\": false,\n            \"user_id\": null,\n            \"created_at\": 1505935715\n        }\n    ]\n}\n\nSend/Resend Notifications\n\nYou can send/resend notifications with the short url to customer via email/sms, using following endpoint:\n\n/invoices/:id/notify_by/:medium\n\nAllowed values for medium URL param is SMS and Email.\n\n{\n    \"success\": true\n}\n\nOther References\n\nCustomers APIs\nItems APIs\n\nSupport\nIn case of any issue with integrating Invoices, please write to us at integrations@razorpay.com\n","id":18},{"title":"Glossary","url":"invoices/glossary","body":"\nThe following terms and its descriptions would help you understand Razorpay invoices better:\n\nTerms | Description\n\nGSTIN | GST Identification Number\n\nCIN | Corporate Identity Number\n\nIGST | Integrated Goods and Service Tax\n\nSGST | State Goods and Service Tax\n\nCGST | Central Goods and Service Tax\n\nEXPIRY DATE | The date after which the customer will be unable to pay for the invoice.\n\nISSUE DATE | Invoice creation date\n\nBilling Address | The address on which the invoice will be billed.\n\nShipping Address | The address at which the the ordered item will be shipped.\n\nPLACE OF SUPPLY | The name of the state where the ordered item will be delivered.\n\nHSN Code | Harmonized System of Nomenclature code of a particular class of item/service under GST. HSN code is 8-character long.\n\nSAC Code | Service Accounting Codes (SAC) of a particular class of item/service under GST. The character range of an SAC code can be from 2-6 characters.\n\nTax Rate | The rate of tax applicable for a particular class of item as per HSN/SAC code.\n\nUnit Price | Price of a single item.\n","id":19},{"title":"Razorpay Invoices","desc":"Razorpay Invoice is a digital copy that summarises details of an order or a transaction for customers. You can also track statuses of invoices on dashboard.","url":"invoices","body":"\nIntroduction\n\nAn Invoice is a digital document that summarises the details of an order or a transaction\nand allows customers to initiate payments. A typical invoice contains sale transaction\ninformation such as the name of the ordered products or services, quantities or billing cycle,\nprice breakup, receipt number, customer information, and so on.\n\nGST Compliance: Currently,GST complaint Invoices can be created via Dashboard only. However, we still support creation of non-GST invoices via APIs.\n\nHow Invoices Work\n\nRazorpay Dashboard allows you to create\ninvoices and perform other operations such as update, cancel and delete. You can perform the same via APIs as well. Once an invoice is issued, the customer can initiate the payment.\n\nLifecycle of an Invoice\n\nThe lifecycle of an invoice starts in the Draft state and ends as Paid after being Issued to the customer.\n\n@image lifecycle-of-an-invoice.png\n\n Note: deleted is not a status of an invoice. A deleted invoice disappears from the list of invoices.\n\nThe table below describes each state of an invoice:\n\nStatus | Description |\n\ndraft | When an invoice is saved, it moves to the draft state.\n\nissued | This status indicates that an invoice has been created and is sent to the customer.\n\npaid | This status indicates that a payment for an invoice is completed by the customer. Paid is the final state of an invoice and no write operations are allowed after an invoice reaches the Paid status. It can only be viewed.\n\nexpired | This status indicates that an invoice has expired. You can set the expire timestamp at the time of invoice creation via APIs using expire_by. Refer Creating an Invoice.\n\ncancelled | This status indicates that an invoice has been cancelled. Cancelled invoice are not viewable/payable by customers, however, it will be listed on the Dashboard. You only can cancel an issued invoice.\n\ndeleted | Deleted invoices does not appear on Dashboard as they are removed from the list. Only the invoices that were saved as drafts can be deleted.\n","id":20},{"title":"Invoice Operations","desc":"Razorpay Invoice lets you create, update, issue, cancel, delete & search invoices via Dashboard or API. Use webhooks to receive alerts for paid/expired invoices.","url":"invoices/operations","body":"\nRazorpay Dashboard lets you create and issue invoices to your customers quickly and easily. You can also take other actions on an invoice such as search, update, cancel, and delete.\n\nGST-supported Invoices Currently, we support creation of GST-complaint Invoices only via Dashboard. However, regular invoices (without GST options) can still be created via APIs.\n\nTip: If GSTIN is not provided prior to Invoice creation, the option to display Tax Rate on the invoice as per the HSN/SAC code of each item would not unavailable. You can however swtich to GST-Invoices anytime by clicking +Add GST details button on the main menu.\n\nCreating an Invoice\n\nInvoice creation from the Razorpay Dashboard can be broken down into the following steps:\n\nCreating a customer\nAdding an item\n\nNote: Refer our glossary section to learn about the terminology used.\n\nCreating a Customer\n\nLog in to your Razorpay Dashboard.\nClick Invoices tool.\nClick +Create Invoice.\nSelect the Invoice label from the Registered Name or Billing Name.\nClick Start Creating Invoices. A new Invoice draft will be displayed with your Company Name and Logo, GSTIN, and CIN.\nOn the New Invoice Draft, enter the Invoice number.\nEnter a brief description or Summary of the purchase.\nUnder the BILLING TO field, select a customer by searching from the list of existing customers.\n    Note: Razorpay gives you the flexibility to create Customers on-the-fly so that your billing is not interrupted while creating an invoice. New customers can be added by clicking +Add a new Customer on the draft invoice which opens a pop-up modal, where you can enter basic details of the customer such as, Company/Individual Name, Email, Contact No., GSTIN and Billing Address. The newly added customers will appear in the Customers tool and can be reused in future invoices as well. To know more on how to create Customers, refer the detailed Customer documentation.\n\n    @image invgst1.png\nEnter the ISSUE DATE of the Invoice. By default, it takes the present date.\nUnder EXPIRY DATE, Choose from Calendar the date of expiry of the invoice.\nUnder BILLING ADDRESS option, do the following:\n    Add the Billing Address.\n    Select the checkbox if Shipping Address is same as Billing Address, else enter the SHIPPING ADDRESS of the customer.\n    Note: Once an address (billing or shipping) is added, it can be used later as either of the options.\n\n    @image invgst2.png\nIf the SHIPPING ADDRESS is same as the BILLING ADDRESS the same will be pre-filled. If the SHIPPING ADDRESS and BILLING ADDRESS are not same:\n    Click Add Shipping Address.\n    Click +Add new Address to enter the new address. The same will added to the list of saved addresses.\n        @image invgst3.png\nEnter the PLACE OF SUPPLY by searching the State name from the dropdown. This is a mandatory field as this will help determine the GST of the items.\n    Note: The PLACE OF SUPPLY field is auto-filled using the SHIPPING ADDRESS.\n\nAdding an Item\n\nOn the Add Item text field, +Add a new Item.\nEnter the Name of the item.\nEnter the Unit Price in INR.\nEnter a short Description of the item.\nSelect the applicable Tax Rate for the item from the dropdown list.\n    You can Add Cess to the the order amount.\nSelect your taxes imposed to be Inclusive or Exclusive of the order amount as per your business requirements.\n    Note: If the PLACE OF SUPPLY/SHIPPING ADDRESS is of a different state from the BILLING ADDRESS, the tax will be computed as IGST else it will divided into CGST and SGST.\n\nEnter the 8-Character HSN or *SAC code of the item.\nClick Add Item.\n      @image invgst4.png\nSpecify the quantity(QTY) of the item.\n    Tip: To edit an existing Item, search from the list previously created items and click Edit. This will open a Edit Item window, where you be shown the same options as in +Add a new Item.\n\n    You can add mulitple items in the same manner by clicking Add Line. To Remove Item click the cancel button beside the added item.\n    Note: To know more on how to create Items, refer the detailed Items documentation.\n\nOptional Steps\n\nIn the Add Customer Notes (Optional) field, you can enter additional details if any.\n    Note:\n    You can add a maximum of 2048 characters in this field.\n\nIn the Add Terms and Conditions (Optional) field, you can enter additional details if any.\n    Note:\n    You can add a maximum of 2048 characters in this field.\n\nSelect the Enable Partial Payment to accept multiple payments for the same order amount.\nIf you are sure about all the fields, click Finalize and Issue to send the created invoice.\nSelect the mode of sending invoice and payment instruction from Mobile number and Email address.\nClick Issue and Send Invoice.\n\nThe created Invoice will appear on the list of previously created Invoices.\n\nImportant: Before issuing an invoice, ensure that you have updated it with the latest changes. You can even create a blank invoice (with no details at all) in Draft state, and later update it with necessary information and issue it.\n\nThe filled invoice creation screen appears as shown below:\n\n@image invcus5.png\n\nNote: When an item's attributes are modified at the time of invoice creation, the modified item cannot be resused. The item will then be referred as a Line item. In other words, a Line Item is created when an Item is used as a template, in order to customize its attributes.\n\nUpdating an Invoice\n\nYou can only update a Draft invoice.\n\nTo update an invoice via the API, refer the\nUpdating an Invoice API section.\n\nTo update an Invoice on the Dashboard:\n\nLog in to your Razorpay Dashboard.\nClick on Invoices.\nSearch for the particular Draft invoice using the search criteria.\nSelect the Invoice Id you want to update and click edit under Actions.\nMake the necessary changes on the invoice.\nClick Save Invoice.\n\nThe invoice will now show the latest changes.\n\nIssuing an Invoice\n\nA Draft invoice can be issued to any one of the listed customers.\n\nTo issue an invoice via the API, refer the\nIssuing an invoice API section.\n\nTo issue to an invoice from the Dashboard:\n\nLog in to your Razorpay Dashboard.\nClick on Invoices.\nSearch for the particular Draft invoice using the search criteria.\nClick edit under Actions on the Invoice Id you want to issue.\nClick Finalize and Issue.\nSelect the mode of sending invoice and payment instruction.\nClick Issue Invoice.\n\nThis sends the invoice to the customer along with a short URL called payment link which allows the customer to initiate the payment.\n\nCancelling an Invoice\n\nYou can only cancel an Invoice in draft state and even after creating. Cancelling an Invoice makes it non-payable.\n\nTo cancel an invoice via the API, refer the\nInvoice Cancellation API Reference.\n\nTo cancel an invoice from the Dashboard:\n\nLog in to your Razorpay Dashboard.\nClick on Invoices.\nSearch for the particular Draft invoice using the search criteria.\nSelect the Invoice Id you want to cancel and click edit under Actions.\nClick Cancel Invoice.\nOn the Cancel Invoice? dialog box, click Yes, Cancel to confirm the cancellation.\n\nThe cancelled invoices display a Cancelled status label.\n\nDeleting an Invoice\n\nYou can only delete an invoice in the draft state.\n\nTo delete an invoice via the API, refer the\nInvoice Deletion API Reference.\n\nTo delete an invoice from the Dashboard:\n\nLog in to your Razorpay Dashboard.\nClick on Invoices.\nSearch for the particular Draft invoice using the search criteria.\nSelect the Invoice Id you want to delete and click edit under Actions.\nClick Delete Invoice.\nOn the Delete Invoice? dialog box, click Yes, Delete to confirm deletion.\n\nSearching Invoices\n\nYou can search for invoices (except Deleted), using the following filters:\n\nFilter | Description\n\nInvoice status | Lifecycle status of the invoice\n\nInvoice Id | Invoice Id of the invoice\n\nReceipt No. | Receipt No. of the invoice\n\nCustomer Contact | Registered contact of the customer\n\nCustomer Email | Email address of the customer\n\nUsing Webhooks with Invoices\n\nWhen the customer pays the amount given in the invoice, you can enable a webhook\nto get notified about it. You can use the following webhooks along with Invoices:\n\nInvoice Paid\n\nTriggered when an invoice is successfully paid. The sample payload posted for the invoice.paid event is given below:\n\n{\n  \"entity\": \"event\",\n  \"event\": \"invoice.paid\",\n  \"contains\": [\"payment\", \"order\", \"invoice\"],\n  \"payload\": {\n    \"payment\": {\n      \"entity\": {\n        \"id\": \"pay_6koWN7bvxujzxM\",\n        \"entity\": \"payment\",\n        \"amount\": 10000,\n        \"currency\": \"INR\",\n        \"status\": \"captured\",\n        \"orderid\": \"order6koWN7bvxujzxM\",\n        \"invoiceid\": \"inv6GfX4mcIAdsfDQ\",\n        \"international\": false,\n        \"method\": \"card\",\n        \"amount_refunded\": 0,\n        \"refund_status\": null,\n        \"captured\": true,\n        \"description\": \"A Wild Sheep Chase is the third novel by Japanese author Haruki Murakami\",\n        \"cardid\": \"card6koWNAT6LASUqy\",\n        \"bank\": null,\n        \"wallet\": null,\n        \"vpa\": null,\n        \"email\": \"gaurav.kumar@example.com\",\n        \"contact\": \"9123456780\",\n        \"notes\": {\n          \"merchantorderid\": \"merchantrecieptid\"\n        },\n        \"fee\": 23000,\n        \"tax\": 3000,\n        \"error_code\": null,\n        \"error_description\": null,\n        \"created_at\": 1479978483\n      }\n    },\n    \"order\": {\n      \"entity\": {\n        \"id\": \"order_6koWNAT6LASUqy\",\n        \"entity\": \"order\",\n        \"amount\": 10000,\n        \"currency\": \"INR\",\n        \"receipt\": \"random\",\n        \"status\": \"paid\",\n        \"attempts\": 1,\n        \"notes\": [],\n        \"created_at\": 1479978483\n      }\n    },\n    \"invoice\": {\n      \"entity\": {\n        \"id\": \"inv_6koWNAT6LASUqy\",\n        \"receipt\": null,\n        \"entity\": \"invoice\",\n        \"customerid\": \"cust6koWNAT6LASUqt\",\n        \"customer_details\": {\n          \"name\": \"test\",\n          \"email\": \"gaurav.kumar@example.com\",\n          \"contact\": \"9123456780\",\n          \"address\": null\n        },\n        \"orderid\": \"merchantreciept_id\",\n        \"line_items\": [],\n        \"paymentid\": \"pay6koWN7bvxujzxM\",\n        \"status\": \"paid\",\n        \"issued_at\": null,\n        \"paid_at\": 1479978484,\n        \"sms_status\": \"sent\",\n        \"email_status\": \"sent\",\n        \"date\": null,\n        \"terms\": null,\n        \"amount\": 10000,\n        \"notes\": [],\n        \"currency\": \"INR\",\n        \"short_url\": \"http://bit.ly/3he311a\",\n        \"view_less\": true,\n        \"type\": \"link\",\n        \"created_at\": 1479978483\n      }\n    }\n  },\n  \"created_at\": 1479978484\n}\n\nInvoice Expired\n\nTriggered when an invoice gets expired. The sample payload posted for the invoice.expired event is given below:\n\n{\n  \"entity\": \"event\",\n  \"event\": \"invoice.expired\",\n  \"contains\": [\"invoice\"],\n  \"payload\": {\n    \"invoice\":{\n      \"entity\":{\n        \"id\":\"inv_6koWN7bvxujzxM\",\n        \"entity\":\"invoice\",\n        \"receipt\":null,\n        \"invoice_number\":null,\n        \"customerid\":\"cust6koWN7bvxujzxM\",\n        \"customer_details\":{\n          \"name\":\"test\",\n          \"email\":\"gaurav.kumar@example.com\",\n          \"contact\":\"9123456780\",\n          \"billing_address\":null,\n        },\n        \"orderid\":\"order6koWN7bvxujzxM\",\n        \"payment_id\":null,\n        \"status\":\"expired\",\n        \"expire_by\":1505201091,\n        \"issued_at\":1505088000,\n        \"paid_at\":null,\n        \"cancelled_at\":null,\n        \"sms_status\":\"sent\",\n        \"email_status\":\"sent\",\n        \"date\":null,\n        \"terms\":null,\n        \"partial_payment\":false,\n        \"gross_amount\":null,\n        \"tax_amount\":null,\n        \"amount\":10000,\n        \"amount_paid\":0,\n        \"amount_due\":10000,\n        \"currency\":\"INR\",\n        \"description\":null,\n        \"notes\":[],\n        \"comment\":null,\n        \"short_url\":\"https://rzp.io/xyzxyzx\",\n        \"view_less\":true,\n        \"billing_start\":null,\n        \"billing_end\":null,\n        \"type\":\"invoice\",\n        \"grouptaxesdiscounts\":false,\n        \"user_id\":null,\n        \"created_at\":1505201092\n      }\n    }\n  },\n  \"created_at\":1505201092\n}\n\nThe webhook invoice.paid let's you receive notification\nwhen an invoice gets paid by the customer. This can be enabled on your Dashboard\nunder the webhooks section.\n\nRefer our webhook documentation for more details.\n","id":21},{"title":"Frequently Asked Questions","desc":"Frequently asked questions about how to integrate Razorpay's payment system with your iOS application to start accepting payments.","url":"ios/faq","body":"\nBelow is a list of frequently asked questions while integrating our iOS SDK.\n\nContact our support team, for other queries.\n\nI am getting an error Razorpay contains unsupported Architecture x86_64 while submitting the archive to the app store. What should I do?\n\nWhen a framework is distributed, it contains architectures of the simulators so that the consumer of the framework can build it on a simulator.\n\nHowever, when you upload the archive on iTunes, you have to strip these architectures.\n\nFollow the below mentioned steps to strip these architectures:\n\nDownload the script.\nLocate the directory in which Razorpay.framework is present in the archive that you are trying to upload.\nMove the attached script in the above directory and run it.\nRemove the script file.\n\nAlternatively, you are using cocoapods to build your app. It strips the simulator architectures on it's own.\n\nI am seeing a message on the screen to update my SDK. Will my customers also see the message?\n\nNo.\n\nYou are seeing the update SDK alert because a newer version of our SDK is available. It is highly recommended that you always use the latest SDK.\n\nThis message appears only when you run the app on a simulator or are using a test key to initialize the SDK.\n\nI am getting an error Image not loaded: .dyld. What should I do ?\n\nPlease ensure that Razorpay.framework is present in both the Embedded Binaries and Linked Frameworks in your project settings.\n\nAlso ensure that Always Embed Swift Libraries is set to yes in the project settings.\n\nNote:\nThis issue might also arise because the Swift version with which Razorpay.framework is developed and the Swift version of your project are not compatible. We highly recommend you to use the framework compiled with the required Swift language from our iOS documentation.\n\nRazorpay's framework is bitcode enabled. Do I also have to enable bitcode in my project?\n\nIf you have or do not have bitcode enabled project, you can use our bitcode enabled framework. There will be no issue and our bitcode enabled framework works in both the cases.\n\nI am getting an error Module compiled with Swift X version cannot be imported in Swift Y version. What should I do?\n\nThere are multiple Swift versions available. Unfortunately, Apple does not make all the versions compatible with each other. This is why we release frameworks compiled in multiple Swift versions. Download the framework that is compatible with your project.\n\nIf you run into a compatibility issue, ensure that you try both the frameworks.\n\nIm getting an error saying Could not find module RazorpayCommonCrypto.\n\nA module map is used to define the header files that should be converted into modules and used by your project.\n\nRazorpay handles this internally. The reason you are facing this issue is because we have made an assumption that your default Xcode's name is Xcode.app, which might not be the case always. For example, your default Xcode might be named Xcode9.3.\n\nTo resolve this issue, simply insert this script in the directory that contains Razorpay.framework file and run it from your terminal and your good to go.\n","id":22},{"title":"Checkout - iOS SDK","desc":"Learn how to integrate Razorpay's payment system with your iOS application to start accepting payments.","url":"ios","body":"\nThe iOS SDK library lets you seamlessly integrate Razorpay's entire payment ecosystem in your iOS application and start accepting payments.\n\nNote:\n\nWe have moved our SDKs to Swift framework. This framework only supports iOS version 10.0 and above. Public contracts have not been changed.\n\nWe have ensured that you will not have to change anything in your code when you move from the Objective-C library to our new Swift framework. If you wish to use the older version, the documentation is available here.\n\nNote:\n\nWe no longer support Swift 3, moving forward only the latest version of Swift will be supported.\n\nDownload the SDK\n\nSDK | Framework Version | Framework Compiled With | Download Link\n\nRazorpay(with bit code enabled) | 1.0.28 | Swift 4.2.1 | Link\n\nStep 1: Import the Library\n\nFor cocoapod users, our cocoapod page can be found here (bitcode enabled).\n\nTo import the SDK library to your Swift or Objective-C project:\n\nFor Swift:\n\nDownload and unzip the SDK.\nOpen your project in XCode and go to file under Menu.\nSelect Add files to \"yourproject\".\nSelect Razorpay.framework in the directory you just unzipped.\nCheck the Copy items if needed check-box.\nClick Add.\nNavigate to Target settings and then to General and add the Razorpay.framework in both Embeded Binaries and Linked Frameworks and Libraries.\n\nFor Objective-C:\n\nDownload and unzip the SDK.\nOpen your project in XCode and go to file under Menu.\nSelect Add files to \"yourproject\".\nSelect Razorpay.framework in the directory you just unzipped.\nCheck the Copy items if needed check-box.\nClick Add.\nNavigate to Target settings and then to General and add the Razorpay.framework in both Embeded Binaries and Linked Frameworks and Libraries.\nGo to Project Settings.\nSelect Build Settings - All and Combined from the Menu of the project settings.\nSet Always Embed Swift Standard Libraries option to TRUE under Build Options .\n\nNote:\nFor both iOS and Objective C projects, ensure the framework is added in both the Embedded Binaries and Linked Frameworks and Libraries under Target settings - General.\n\nStep 2: Initialize the Razorpay SDK\n\nTo initialize the Razorpay SDK, you will need the following:\nAPI key\nA delegate that implements RazorpayPaymentCompletionProtocol or RazorpayPaymentCompletionProtocolWithData\n\nimport Razorpay\nclass ViewController: UIViewController, RazorpayPaymentCompletionProtocol {\n\n\tvar razorpay: Razorpay!\n\t.\n\t.\n\toverride func viewDidLoad() {\n        super.viewDidLoad()\n        .\n        .\n        razorpay = Razorpay.initWithKey(razorpayTestKey, andDelegate: self)\n    }\n    .\n    .\n}\n\n#import\n@interface ViewController ()  {\n  Razorpay *razorpay;\n\t.\n\t.\n\t(void)viewDidLoad {\n  \t\t[super viewDidLoad];\n  \t\t.\n  \t\t.\n  \t\trazorpay = [Razorpay initWithKey:@\"YOURPUBLICKEY\" andDelegate:self];\n\t}\n}\n\nStep 3: Pass Payment Options and Display Checkout Form\n\nAdd the following code to your ViewController or where ever you want to initialize payments:\n\ninternal func showPaymentForm(){\n\tlet options: [String:Any] = [\n\t\t\t\t\"amount\" : \"100\" //mandatory in paise\n            \t\"description\": \"purchase description\"\n            \t\"image\": \"https://url-to-image.png\",\n            \t\"name\": \"business or product name\"\n            \t\"prefill\": [\n                \t\"contact\": \"9797979797\",\n                \t\"email\": \"foo@bar.com\"\n                ],\n                \"theme\": [\n                    \"color\": \"#F37254\"\n              \t]\n        \t]\n\trazorpay.open(options)\n}\n\n(void)showPaymentForm { // called by your app\n  NSDictionary *options = @{\n                            @\"amount\": @\"1000\", // mandatory, in paise\n                            // all optional other than amount.\n                            @\"image\": @\"https://url-to-image.png\",\n                            @\"name\": @\"business or product name\",\n                            @\"description\": @\"purchase description\",\n                            @\"prefill\" : @{\n                                @\"email\": @\"foo@bar.com\",\n                                @\"contact\": @\"9797979797\"\n                            },\n                            @\"theme\": @{\n                                @\"color\": @\"#F37254\"\n                            }\n                        };\n    [razorpay open:options];\n}\n\nNOTE:\n\nWe now support another optional parameter to the open method displayController.\n\nWhen this parameter is specified, the razorpay controller is pushed on to this controller's navigation controller if present or presented on this controller if absent.\n\nFor example the swift call is:\n\nrazorpay.open(options, displayController: self)\n\nYou can find the list of all supported options here.\n\nProgress Bar:\n\nTo support theme color in the progress bar, pass HEX color values only.\n\nStep 4: Handle Success and Errors\n\nYou can handle success/errors when a payment is completed by implementing onPaymentSuccess and onPaymentError methods of the RazorpayPaymentCompletionProtocol.\n\nAlternatively, you can also implement onPaymentSuccess and onPaymentError methods of RazorpayPaymentCompletionProtocolWithData.\n\npublic func onPaymentError(_ code: Int32, description str: String){\n    let alertController = UIAlertController(title: \"FAILURE\", message: str, preferredStyle: UIAlertControllerStyle.alert)\n    let cancelAction = UIAlertAction(title: \"OK\", style: UIAlertActionStyle.cancel, handler: nil)\n    alertController.addAction(cancelAction)\n    self.view.window?.rootViewController?.present(alertController, animated: true, completion: nil)\n}\n\npublic func onPaymentSuccess(_ payment_id: String){\n    let alertController = UIAlertController(title: \"SUCCESS\", message: \"Payment Id \\(payment_id)\", preferredStyle: UIAlertControllerStyle.alert)\n    let cancelAction = UIAlertAction(title: \"OK\", style: UIAlertActionStyle.cancel, handler: nil)\n    alertController.addAction(cancelAction)\n    self.view.window?.rootViewController?.present(alertController, animated: true, completion: nil)\n}\n\n(void)onPaymentSuccess:(nonnull NSString*)payment_id {\n      [[[UIAlertView alloc] initWithTitle:@\"Payment Successful\" message:payment_id delegate:self cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show];\n}\n\n(void)onPaymentError:(int)code description:(nonnull NSString *)str {\n      [[[UIAlertView alloc] initWithTitle:@\"Error\" message:str delegate:self cancelButtonTitle:@\"OK\" otherButtonTitles:nil] show];\n}\n\nAfter a payment is done, you have to add the necessary actions based on success/error criteria.\n\nPossible values for a failure code are:\n0: Network error\n1: Initialization failure / Unexpected behavior\n2: Payment cancelled by user\n\nSuccess handler receives a payment_id that you can use later to capture the payment.\n\niOS 9 Update\n\niOS 9 has higher requirements for secure URLs. As many Indian banks do not comply with the requirements, you can implement the following as a workaround:\n\nNSAppTransportSecurity\n\n    NSAllowsArbitraryLoads\n\nAdd the above to your info.plist file. For more information click here.\n","id":23},{"title":"Integration Videos","desc":"Videos on how to integrate Razorpay's payment system with your iOS application to start accepting payments.","url":"ios/integration-videos","body":"\nThe following videos help you to integrate our SDK in iOS, React Native and Cordova applications. They also address some commonly faced issues.\n\nIntegrate the SDK using the iOS Framework\n\nThere are two ways to integrate the SDK in your iOS application using the iOS Framework:\nUsing iOS frameworks\nUsing Cocoapods\n\nUsing iOS Frameworks\n\nThe following video demonstrates the native iOS approach:\n\nUsing Cocoapods\n\nFor user who have cocoapod installed, the following video help integrate the Razorpay iOS SDK in your application:\n\nCreate an App Archive\n\nThe following video will assist you in archiving the app:\n\nIntegrate the SDK using React Native\n\nFor React Native users, the following video help you install and integrate the SDK in your application:\n\nIntegrate the SDK on a Cordova-based Application\n\nFor Cordova users, the following video help you install and integrate the SDK in your Cordova-based iOS application:\n\nIf you have any trouble integrating the SDK, contact our integrations team.","id":24},{"title":"Handling Late Authorized Payments","desc":"Late authorization cases with Razorpay are very rare but you can utilize Orders API or webhooks to handle such situations.","url":"late-authorization/handling_late_authorization","body":"\nGenerally, you do not need to handle late authorized payment as on an average, only less than 0.5% of the total number payments get late authorized. Additionally, the payments that are late authorized and not captured are auto-refunded in 5 days.\n\nHowever, following are few suggestions on how you can handle payments that get late authorized:\n\nCommunicate with your customer\nWhen a customer reaches out to you about a payment that was debited from her/his bank account before a successful order completion, ensure that you have clearly communicated about the status of the payment and how you will be handling it. You can choose to send out a message such as the following: “If your order has failed and the amount has been debited, the debited amount will be auto-refunded in 5 working days (without taking into account the processing time of your bank).”\n\nUnderstand your business need\nDepending upon your business needs, you can decide how to handle payments that may get late authorized. This would largely depend on whether you can provide service for the late authorized payment.\n\n    If you cannot provide service for a late authorized payment, it can be ignored. Payments that stay in Authorized state will be auto-refunded to customers within 5 working days (without taking into account bank's processing time).\nFor example, an online food ordering service needs to deliver food immediately on receiving payments. Since the need to deliver the service is immediate in this business, the merchant cannot oblige her/his customer if the payment gets authorized late. In this case, the merchant can ignore the payment made as it will be auto-refunded and communicate to the customer accordingly.\n\n    If you wish to provide the service later, there are ways in which you can keep a close track of these payments and fulfill the order when it is authorized.\nFor example, an online marketplace merchant that sells clothes and accessories, can mark the order as 'pending' in her/his system and deliver the order when the payment gets authorized.\n\n    Note: Auto-refunds are issued within 5 days. However, if you want to issue a refund instantly, you can capture the payment and issue a refund as per your requirements.\n\nUtilize recommended options\nFollowing are ways in which payments that are authorized late can be effectively managed to fulfil your customer’s order:\n\nOrder API\n\nOrder API makes it easier to handle cases of late authorization in the following ways:\n\nIt clubs multiple payment attempts against the same order. If one of the payment is successful and another attempt gets Late Authorized, the late authorized payment is refunded immediately and only successful payment is marked against the order.\n\nIt supports auto-capturing of normal payments. However, payments that are Late Authorized are not auto-captured. (This support feature can vary for different business models as auto-capturing of late authorized payments is available on request.) To enable this feature, you can get in touch with us at https://razorpay.com/support for any queries.\n\nNote: Auto-capturing can be enabled for only those payments that have been authorized within 5 days of payment creation. If the payment remains in Authorized state even after 5 days, it will get auto-refunded.\n\nAnother advantage of using Orders API is that only one successful payment is allowed against an order. In case your customer retries the payment against the same order, Order API will ensure that only one successful payment is processed against it.\n\nWebhooks\nWebhooks allow you to get notified when payments move to Authorized state. The webhook payment.authorized sends you a notification when the payment you were expecting to be Late Authorized moves to Authorized state. This allows you to send email notifications to your customers on the payment section and take further action to deliver the service. You can set up webhooks from the your Razorpay Dashboard. Go through our Webhooks documentation to know more.\n\nFAQs\n\nIs late authorization of payment specific to Razorpay?\nNo. While other gateways also face these interruptions, Razorpay ensures that our merchants have a way of handling late authorized payments via Orders API or Webhooks and track their progress on the Dashboard.\n\nWill a payment change to Authorized* if the customer's account has been debited?*\nNo. In some cases, although rare, banks automatically refund the transaction without changing the status. This can vary from bank to bank.\n","id":25},{"title":"Late Authorization of Payments","desc":"Learn what late authorization is, how to handle it, causes of late authorization or what is the difference between normal payments & late authorized payments.","url":"late-authorization","body":"\nWhat is Late Authorization?\n\nLate authorization is a situation that arises when a payment that is near to completion is interrupted by external factors such as network issues, technical errors at customer's/bank's end, manual intervention, and many others. In such cases, funds may get debited from the customer's bank account and Razorpay does not receive a payment status from the bank.\n\nIf there is no response from the bank, the Dashboard shows this payment attempt as Created\nfor the first 10 minutes, it is then marked as Failed due to timeout. Thereafter, Razorpay will poll the bank at various intervals for 5 days, from the day of payment creation. During\nthis time, if our system receives the payment status from the bank as Successful, the payment\nis marked as authorized like any other payment and is considered as Late authorized.\n\nThe odds of a late authorized payment\nOn an average, only less than 0.5% of the total number payments get late authorized. In cases where funds get debited from the customer's bank account and are not captured at your end, Razorpay automatically refunds the customer with the same amount. As a best practice, the payment.authorized webhook can be subscribed, which notifies when a payment gets authorized or failed.\n\nNot all payments that appear as Failed will be considered as Late authorized. Late authorization is a special case of handling technical/manual interruptions that prevent Razorpay from receiving payment status from the bank and proceed with the payment flow.\n\nWhat causes Late Authorization?\n\nInterruptions that prevent a payment gateway from receiving payment status information from the bank is a common scenario. In most cases, payments are interrupted because of any of the following reasons:\nNetwork issues at the customer's end\nTechnical issues at the customer's bank's end\nCustomers closing the pop-up window or pressing the back button after submitting the OTP.\n\nIf at a later time, Razorpay is able to receive the payment status from the bank, payment is moved to Authorized state leading to late authorization of the payment. While there is only little control on these interruptions, you can prepare to handle such situations to avoid customer inconvenience. More details on handling late authorized payments is in the section Handling Late Authorization.\n\n@image late_auth.png\n\nThe difference in the payment flow for a normal payment and a late authorized payment is explained in the table below:\n\nNormal payment\nLate authorization\n\nCustomer completes the payment, bank gateway notifies Razorpay.\nCustomer completes the payment, bank gateway fails to notify Razorpay.\n\nIf the bank gateway response is Successful (customer's bank account is debited), Razorpay records this as an Authorized payment.\nIf there is no response from the bank, the payment remains in Created state for the first 10 minutes and is then marked as Failed after getting timed out. Customer's bank account may or may not have been debited.\n\nOnce authorized, you can either choose to Capture or Refund this payment.\n\nNote: Authorized payments are payments that are completed by the customer. To record it for settlement at merchant's end, this payment has to be Captured.\n\nThis payment can be Captured or Refunded only after it is late authorized.\n","id":26},{"title":"Magento Plugin 1.x","url":"magento/1.x","body":"\nThe Razorpay Magento Plugin enables you to accept payments on your Magento e-commerce site via Razorpay Checkout form. You can empower your customers to pay through card, net banking, UPI or through any of our supported wallets and handle refunds, chargebacks seamlessly. In addition to this, in our latest Magento 2.0 Plugin, we have added the option of page redirect which allows you to take your customers to a page you want for checkout.\n\nWe also support display of international currencies at the time of checkout on your Magento site. However, all pricing calculations and settlements are done in INR. You can get in touch with us at https://razorpay.com/support to activate international payments.\n\nPreparing for Your Installation\n\nDownloading the Plugin\nDownload the latest version of our plugin available on our Releases Page. We have Magento plugins for both Magento 1.x and Magento 2.0. You can check out our Release Page and download the latest plugin for the version of Magento you are using.\n\nOur plugins are supported on all operating systems -Windows, Mac OS, and Linux.\n\nTo download the plugin:\n\nGo to our GitHub Repo.\n\nSelect master-1.x from the drop-down Branch, as shown below:\n  @image Magento1_1.png\n\nClick Clone or download.\nClick Download ZIP, as shown below:\n\n  @image Magento1_2.png\n\nIf you have one page checkout (IWD or Fire checkout),\n\n   Select master from the drop-down Branch.\n   Click Clone or download.\n   Click Download ZIP.\n\nOr\n\nUse git clone: https://github.com/razorpay/razorpay-magento.git\n\nInstallation\n\nYou can choose to install our Magento Plugin using any of the following methods:\nYou can upload the files into your FTP server using the instructions below.\n\nOr\n\nGo to the folder in your local system where you have downloaded razorpay-magento-v1.0.2.\nCopy the folders “app” and “js” separately.\nPaste and merge it into the Magento root folder respectively.\n\nConfiguration\n\nTo configure your Magento store for Razorpay\n  Sign into your Magento store.\n  Click System > Configuration, as shown below:\n    @image Magento1_3.png\n  Click Payment Methods on the left side menu.\n    @image Magento132.png\n  Scroll down and click Razorpay. The screen appears as shown below:\n    @image Magento1_5.png\n  Enter your API Key and API Key Secret, which can be generated from your Razorpay Dashboard.\n\nGenerating Key ID/ Secret\n\nTo generate your Key ID and Key Secret\n  Sign into Razorpay Dashboard.\n  Click Api Keys > Generate Test Keys, as shown below:\n   @image Magentogeneratetest_keys.png\n  Click Generate Test Key. The API Key ID and Secret Key ID is generated as shown below:\n   @image Magentonewkey.png\n\nYou can now pass test payments on your magento site using these key IDs.\n","id":27},{"title":"Magento Plugin 2.x","url":"magento/2.x","body":"\nThe Razorpay Magento Plugin enables you to accept payments on your Magento e-commerce site via Razorpay Checkout form. You can empower your customers to pay through card, net banking, UPI or through any of our supported wallets and handle refunds, chargebacks seamlessly. In addition to this, in our latest Magento 2.x Plugin, we have added the option of page redirect which allows you to take your customers to a page you want for checkout.\n\nWe also support display of international currencies at the time of checkout on your Magento site. However, all pricing calculations and settlements are done in INR. You can get in touch with us at https://razorpay.com/support to activate international payments.\n\nPreparing for Your Installation\nDownloading the Plugin\nDownload the latest version of our plugin available on our Releases Page. We have Magento plugins for both Magento 1.x and Magento 2.x. The Magento 2.x releases have release tags in the form 2.x.x. You can see this on the left side of the page.\n\nOur plugins are supported on all operating systems -Windows, Mac OS, and Linux.\n\nTo download the plugin, you can either:\n\nUse git clone: https://github.com/razorpay/razorpay-magento.git\nOr,\n\nGo to our GitHub Repo.\nSelect master-2.x from the drop-down Branch.\nClick Clone or download.\nClick Download ZIP.\n\nInstallation\n\nYou can choose to install our Magento Plugin using any of the following methods:\n\nUsing Composer\n\nGo to your installation root directory of Magento and execute the following:\n\n        composer require razorpay/magento\n\nCheck if the installation was successful by executing following command in the Magento root directory:\n\n        bin/magento module:status\n        You should see Razorpay_Magento in the status. It might appear on the disabled modules list.\n\nEnable and deploy the Razorpay module using commands:\n\n        bin/magento module:enable Razorpay_Magento\n    bin/magento setup:upgrade\n    bin/magento setup:static-content:deploy\n\nManual Installation\n\nGo to the vendor directory in your Magento root folder\nCreate another folder called razorpay\nCreate a sub-folder within it called magento\nUpload the contents of razorpay directory as is into the magento vendor directory.\n\nYou can upload the files into your FTP server using the instructions given above.\n\nConfiguration\nTo configure your mangento store for Razorpay,\n\nSign into your Magento store.\nClick Stores on the control panel to the left.\nClick Configuration under Settings, as shown below:\n  @image Magento2_1.png\nClick Sales on the Configuration page.\nClick Payment Methods, as shown below:\n  @image Magento2_2.png\nSelect Razorpay, as shown below:\n  @image Magento2_3.png\n\n  Note: If you do not see Razorpay in your gateway list, clear your Magento Cache from your Admin Panel. To clear cache, go to System > Cache Management.\n\nEnter your API Key and API Key Secret, which can be generated from your Razorpay Dashboard.\n\nGenerating Key ID/ Secret\n\nTo generate your Key ID and Key Secret\nSign into Razorpay Dashboard.\nClick Api Keys > Generate Test Keys, as shown below:\n  @image Magentogeneratetest_keys.png\nClick Generate Test Key. The API Key ID and Secret Key ID is generated as shown below:\n  @image Magentonewkey.png\nYou can now pass test payments on your magento site using these key IDs.\n","id":28},{"title":"Testing Payments Magento 1.x","url":"magento/testing-1.x","body":"You have to sign back into your Magento account to enter your key IDs and test payments.\n\nSign into your Magento account and go to Configurations page.\nEnter the Key ID and Key Secret in the credentials required on the Magento page, as shown below:\nSelect Yes for the option Enabled.\nClick Save Config. This activates your account in the “Test Mode”. You can use this account to make a few test payments to ensure a successful workflow. In test mode, no real money is deducted from your account.\nOnce your application has been reviewed successfully by Razorpay, you can go to the Dashboard and switch to Live Mode, as shown below:\nGenerate API keys once again.\n\nNote: Ensure that your test keys are saved safely. Also, be sure to save your live keys as well.\n\nGo back to your Magento Payment Settings. Under Razorpay, replace the old API Key and API Key Secret with the new ones.\n\nYou can now create payments for your customers which is in Live mode.\n\nNote: As of now, Razorpay Order ID on Magento Admin Panel cannot be displayed and the Magento Order ID cannot be displayed as the default Order ID on the Razorpay Dashboard.\nHowever, to view Magento Order ID on Razorpay Dashboard, click individual orders and click Notes to view the Order IDs. You can also search for Magento Order ID in the Razorpay Dashboard.\nGo to Entities > Entity type > Order.\nEnter the Magento ID in the field Receipt and search.\n\nTroubleshooting\nSome of the common error messages and the possible reasons and fixes are given below:\n\nBad request error\n: Cause 1\nThe API key and Secret key are not configured correctly.\n\n Fix\nMake sure that the Key ID and Secret key are activated and entered correctly into the magento settings page.\n: Cause 2\nYou maybe using a custom checkout theme like IWD and Firecheckout.\n\n Fix\nMake sure that you are using the github/master branch.\n\ncURL error\n: Cause 1\nPHP-cURL on your server is not installed on your server\n\n Fix\nEnsure that you have installed PHP-cURL on your server.\n: Cause 2\nPort 443 is blocked.\n\n Fix\nContact your hosting service to unblock the port.\n\nSupport\n\nVisit https://razorpay.com for support requests or email us at contact@razorpay.com.\n","id":29},{"title":"Testing Payments Magento 2.x","url":"magento/testing-2.x","body":"You have to sign back into your Magento account to enter your key IDs and test payments.\n\nSign into your Magento account and go to Configurations page.\nEnter the Key ID and Key Secret in the credentials required on the Magento page, as shown below:\nSelect Yes for the option Enabled.\nClick Save Config. This activates your account in the “Test Mode”. You can use this account to make a few test payments to ensure a successful workflow. In test mode, no real money is deducted from your account.\nOnce your application has been reviewed successfully by Razorpay, you can go to the Dashboard and switch to Live Mode, as shown below:\nGenerate API keys once again.\nGo back to your Magento Payment Settings. Under Razorpay, replace the old API Key and API Key Secret with the new ones.\nYou can now create payments for your customers which is in Live mode.\n\nNote: As of now, Razorpay Order ID on Magento Admin Panel cannot be displayed and the Magento Order ID cannot be displayed as the default Order ID on the Razorpay Dashboard.\nHowever, to view Magento Order ID on Razorpay Dashboard, click individual orders and click Notes to view the Order IDs. You can also search for Magento Order ID in the Razorpay Dashboard.\nGo to Entities > Entity type > Order.\nEnter the Magento ID in the field Receipt and Search.\n\nTroubleshooting\nSome of the common error messages and the possible reasons and fixes are given below:\n\nBad request error\n: Cause 1\nThe API key and Secret key are not configured correctly.\n\n Fix\nMake sure that the Key ID and Secret key are activated and entered correctly into the magento settings page.\n: Cause 2\nYou maybe using a custom checkout theme like IWD and Firecheckout.\n\n Fix\nMake sure that you are using the github/master branch.\n\ncURL error\n: Cause 1\nPHP-cURL on your server is not installed on your server.\n\n Fix\nEnsure that you have installed PHP-cURL on your server.\n: Cause 2\nPort 443 is blocked.\n\n Fix\nContact your hosting service to unblock the port.\n\nSupport\n\nVisit https://razorpay.com for support requests or email us at contact@razorpay.com.\n","id":30},{"title":"Usage","url":"magic/usage","body":"\nCustom UI SDK integration\n\nBefore you can begin with the Magic plugin integration, you need to complete the Custom UI SDK integration. The integration guide for the Custom UI SDK can be found on this page: https://razorpay.com/docs/customui-android-sdk/usage\n\nEnabling Magic\n\nTo enable Magic you just need to pass true to razorpay.setMagicEnabled. This will load our Magic Views in a Bottomsheet dialog. This method needs to be called before you submit the payment data i.e. before you call razorpay.submit\n\nrazorpay.setMagicEnabled(true);\n\nCustom Color Scheme\n\nMagic allows the merchant override the default colors and button styles for its views.\nTo do customise the colors, you need to add the following resource values to colors.xml\n\n  #000000\n\n  #DE1AACE5\n\n`","id":31},{"title":"At-Rules","hashnav":false,"url":"meta/at-rules","body":"\nConstants\nconstants can be declared in src/data.yml. These are accessible as \\@data.property.\n\nkeyid: \\@data.testkey\n\nkeyid: @data.testkey\n\nUsing \\@data.Rs anywhere will get converted to @data.Rs\n\nPartials\nUse @include to use a partial from src/partials folder. Same markdown syntax is also applicable\nover included files.\n\n\\@// loads src/partials/part1.md\n\\@include part1\n\nImages\nPut images in src/assets/images folder. Then it's accessible with @image  method.\n\n\\@image swift-bridging.png\n\n  @image swift-bridging.png\n\nComments\nStart a line with @// to make a comment. It wouldn't be part of generated docs.\n\nmarkdown\n\n\\@// some comment\nmore markdown\n\nmarkdown\n\n@// some comment\nmore markdown\n\n  HTML Comment (``) is visible in output. Avoid that.\n\nEscaping\n\\ can be used to escape:\n\n \\\\@data.Rs\n\n\\@data.Rs\n","id":32},{"title":"Accessing Resources","desc":"Learn about the tokens utilized for authorization using Razorpay OAuth.","url":"oauth/access","body":"\nOnce an access token is obtained, it can be used to access merchant's data on\nRazorpay APIs. The access is controlled based on the scope requested for and\ngranted by the user during authorization.\n\nBearer Authorization\n\nThe access token needs to be provided in the Bearer Authorization header while\nrequesting Razorpay APIs.\n\ncurl -XGET https://api.razorpay.com/v1/payments\n\t-H \"Authorization: Bearer \"\ncurl -XGET https://api.razorpay.com/v1/payments\n  -H \"Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6IjlUNVV.ZeVJzQTlNY3c5In0eyJhdW\"\n{\n   \"count\":2,\n   \"entity\":\"collection\",\n   \"items\":[\n      {\n         \"id\":\"pay_7IZD7aJ2kkmOjk\",\n         \"entity\":\"payment\",\n         \"amount\":29900,\n         \"currency\":\"INR\",\n         \"status\":\"captured\",\n         \"order_id\":null,\n         \"invoice_id\":null,\n         \"international\":false,\n         \"method\":\"wallet\",\n         \"amount_refunded\":0,\n         \"refund_status\":null,\n         \"captured\":true,\n         \"description\":\"Purchase Description\",\n         \"card_id\":null,\n         \"bank\":null,\n         \"wallet\":\"freecharge\",\n         \"vpa\":null,\n         \"email\":\"gaurav.kumar@example.com\",\n         \"contact\":\"9123456780\",\n         \"notes\":{\n            \"merchantorderid\":\"order id\"\n         },\n         \"fee\":12,\n         \"tax\":2,\n         \"error_code\":null,\n         \"error_description\":null,\n         \"created_at\":1487348129\n      },\n      {\n         \"id\":\"pay_19btGlBig6xZ2f\",\n         \"entity\":\"payment\",\n         \"amount\":500,\n         \"currency\":\"INR\",\n         \"status\":\"captured\",\n         \"order_id\":null,\n         \"invoice_id\":null,\n         \"international\":false,\n         \"method\":\"card\",\n         \"amount_refunded\":0,\n         \"refund_status\":null,\n         \"captured\":true,\n         \"description\":\"Purchase Description\",\n         \"cardid\":\"card12abClEig3hi2k\",\n         \"bank\":null,\n         \"wallet\":null,\n         \"vpa\":null,\n         \"email\":\"saurav.kumar@example.com\",\n         \"contact\":\"9988776655\",\n         \"notes\":{\n            \"merchantorderid\":\"order id\"\n         },\n         \"fee\":12,\n         \"tax\":2,\n         \"error_code\":null,\n         \"error_description\":null,\n         \"created_at\":1400826750\n      }\n   ]\n}\n\nToken Expiry\n\nAll codes and tokens expire after a fixed period of time. While the\nauthorizationcode is short-lived, accesstoken and refresh_token have long\nexpiry TTLs.\n\nIf an expired access_token is used, the API will respond with a HTTP 401 status.\nAccess tokens can be exchanged for a new accesstoken and refreshtoken.\n\nRefresh Tokens\nAs explained above, refresh tokens can be used to generate a new access token. In\n case your access token expires, you will receive a 4XX response from the API.\nYou can make a request using your refresh token to generate a new\n(accesstoken, refreshtoken) pair.\n\nRefer the following API request on how to request a new token:\n\nhttps://auth.razorpay.com/token\n\nNote: This request must be made from the application's backend server.\n\nRequest\n\nThe following parameters should be sent in the request:\n\nclient_id\n: Unique client identifer.\n\nclient_secret\n: Client secret string.\n\ngrant_type\n: The type of grant for the request. This should be set to refresh_token.\n\nrefresh_token\n: The refresh token value that was previously stored.\n\nResponse\n\nThe server will respond with the following parameters:\n\ntoken_type\n: Defines the type of access token. This will be set to Bearer.\n\nexpires_in\n: Integer representing the TTL of the access token in seconds.\n\naccess_token\n: Used to access merchant resources on Razorpay. access_token is a private token and should only be used for server-to-server calls.\n\npublic_token\n: A token used only for public routes such as Checkout or Payments. A sample public token will have the following format: rzptestoauth_32hsbEKriO6ai4.\n\nrefresh_token\n: New refresh token. The old refresh token will be expired automatically from this\npoint.\n\ncurl -H \"Content-type: application/json\" -XPOST https://auth.razorpay.com/token\n-d '{\n  \"client_id\": \"\",\n  \"client_secret\": \"\",\n  \"granttype\": \"refreshtoken\",\n  \"refresh_token\": \"def5020096e1c470c901d34cd60fa53abdaf3662sa0\"\n}\n{\n    \"publictoken\": \"rzptestoauth9xu1rkZqoXlClS\",\n    \"token_type\": \"Bearer\",\n    \"expires_in\": 7862400,\n    \"access_token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6Ijl4dTF\",\n    \"refresh_token\": \"def5020096e1c470c901d34cd60fa53abdaf36620e823ffa53\"\n}\n","id":33},{"title":"Applications and Clients","desc":"Learn how to create an application for building an OAuth integration.","url":"oauth/appclients","body":"\nApplications are the external entities that are visible to the user. Internally\nhowever, Razorpay OAuth works with clients that are identified by their client_id.\n\nWhen an application is created on Razorpay, automatically two clients\nthat are linked to the application are created - a development and a production client. Each\nclient gets it's own clientid and clientsecret. The development client can\nbe used in your sandbox environment, or in the integration phase. The production\nclient can be used once you go live.\n\nThe differences in usage of these two clients are\nexplained below:\n\nClients\n\nThe attributes of a client are described below:\n\nClient ID\n: Publicly exposed identifier of the client, generated\nuniquely. It helps identify your application on Razorpay.\n\nClient Secret\n: Privately shared string between the application and Razorpay.\nThe client secret should never be exposed publicly. It helps to authenticate the\nidentity of the application on server-to-server API calls.\n\nRedirect URIs\n: This is a whitelisted set of URIs, defined during creation. In order to prevent\nman-in-the-middle attacks, production clients can only use secure HTTPS URIs.\n\nDevelopment and Production Usage\n\nThe usage restrictions on development and production clients are as follows:\n\nRedirect URI: Development clients can have any Redirect URI's whitelisted -\nincluding non-HTTP and localhost. Production clients cannot use non-HTTPS Redirect URIs.\n\nMode Access: Razorpay provides two modes/environments where the merchant\ncan operate - test and live. While development clients can access both modes,\nproduction clients may only access live mode data.\n\nCreating an Application\n\nThe first step towards building an OAuth integration is creating an application.\n\nNote: Only an Admin user can create applications on Razorpay dashboard.\n\nTo create an application,\n\nOn the left menu of the dashboard, go to Settings and click Applications.\nClick Create Application under the Created Applications\nsection.\nEnter the Application Name. The name provided here is displayed on Razorpay's\nauthorization interface.\nEnter the URL of the application's website under Website.\nUpload a Logo for the application. It should be a square image. If no logo is provided,\na default logo will be used.\nClick Create to create the application on Razorpay. On success, the following fields are displayed:\nClient ID and Secret (read only) for development and production clients.\nRedirect URIs which are whitelisted URIs for development and production clients. You can define multiple\nredirect URIs.\nYou can edit the Redirect URIs for your clients and click Save\n","id":34},{"title":"Authorization","desc":"Razorpay OAuth lets you authorize your access to a merchant's Razorpay account.","url":"oauth/authorize","body":"\nAuthorization is enabled via a webpage hosted by Razorpay. When the application\nneeds to connect to a merchant's Razorpay account, it redirects the user to this\nwebpage where the user can approve or deny the authorization request.\n\nNote: Razorpay OAuth supports the standard\nauthorization code grant.\nYou have to implement the flow described below to obtain an authorization code\nand then exchange it for an access token. The\nimplicit grant is not\ncurrently supported.\n\nBelow is a sample authorization interface:\n\n@image oauth_authorize.png\n\nAuthorization URL\n\nTo initiate authorization, users must be redirected to Razorpay's authorization\nservice on the URL given below:\n\nhttps://auth.razorpay.com/authorize\n\nYou must define the following query parameters in the URL. All parameters are\nmandatory unless specified as optional:\n\nclient_id\n: Unique client identifer.\n\nresponse_type\n: The only supported value is code. This specifies that the application is\nrequesting an authorization code grant.\n\nredirect_uri\n: Callback URL used by Razorpay to redirect after the user approves or denies the\nauthorization request. The redirect_uri must be whitelisted by the client first.\n\nscope\n: Defines what access your application is requesting from the user. Multiple\nscopes can be requested by separating each scope with a space. Refer the section\non Scopes for further details.\n\nstate\n: A random string generated by your service. This parameter is forwarded to\nthe redirect URL. This helps prevent CSRF attacks, and is explained\nhere.\n\nAn example of a complete authorization URL is shown below:\n\nhttps://auth.razorpay.com/authorize\n    ?client_id=8DXCMTshWSWECc\n    &response_type=code\n    &redirecturi=https://example.com/razorpaycallback\n    &scope=read_only\n    &state=NOBYtv8r6c75ex6WZ\n\nAuthorization Response\n\nOnce complete, the browser is redirected back to URI specified in the redirect_uri\nparameter.\n\nSuccess Response\nIf the user approved the request, the following query parameters are sent:\n\ncode\n: URL-encoded authorization code. You can exchange this code for an access token\nin the next step.\n\nstate\n: The value of the state parameter that was sent in the authorization request.\nRefer Validating States for details on how to successfully\nvalidate this parameter.\n\nError Response\n\nerror_code\n: The error code.\n\nerror_description\n: Description of the error.\n\nAccess Token\nOnce an authorization code has been received, it can be exchanged for an access\ntoken, as shown below:\n\n Note: The authorization code is url-encoded and needs to be decoded before\nsending in this request.\n\nhttps://auth.razorpay.com/token\n\nThis request must be made from the application's backend server.\n\nRequest\n\nThe following parameters should be sent in the request:\n\nclient_id\n: Unique client identifer.\n\nclient_secret\n: Client secret string.\n\ngrant_type\n: Defines the grant type for the request. This should be set to authorization_code.\n\nredirect_uri\n: Specifies the same redirect_uri used in the authorization request.\n\ncode\n: Decoded authorization code received in the last step.\n\nmode\n: Optional. It can have these values: test or live. Defaults to live.\n\nNote: For clients on production can only make requests for live mode.\n\nResponse\n\nThe server responds with the following parameters:\n\ntoken_type\n: Defines the type of access token. This is set to Bearer.\n\nexpires_in\n: Integer representing the TTL of the access token in seconds.\n\naccess_token\n: A private key used to access merchant resources on Razorpay. This token is used for server-to-server calls only.\n\npublic_token\n: A public key is used only for public routes such as Checkout or Payments.\n\nrefresh_token\n: Refresh token that can be used to refresh the access token when it expires.\n\ncurl -H \"Content-type: application/json\" -XPOST https://auth.razorpay.com/token\n-d '{\n  \"client_id\": \"\",\n  \"client_secret\": \"\",\n  \"granttype\": \"authorizationcode\",\n  \"redirecturi\": \"http://example.com/razorpaycallback\",\n  \"code\": \"def50200d844dc80cc44dce2c665d07a374d76802\",\n  \"mode\": \"test\"\n}\n{\n    \"publictoken\": \"rzptestoauth9xu1rkZqoXlClS\",\n    \"token_type\": \"Bearer\",\n    \"expires_in\": 7862400,\n    \"access_token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6\",\n    \"refresh_token\": \"def5020096e1c470c901d34cd60fa53abdaf3662sa0\"\n}\n\nThe access_token received above can be stored on your server. Using this token,\nyou can access the merchant's data on Razorpay APIs based on the level of\naccess granted. Refer Accessing Resources section for more details.\n\nPublic Token\n\nUsing the publictoken for authorization can secure a public facing implementation such as Razorpay Checkout or Payments. In such cases, the publictoken can replace the key_id field as shown below:\n\nPay\n\nvar options = {\n    \"key”: \"rzptestoauth_32hsbEKriO6ai4\",  //Public token\n    \"amount\": \"29900\", //Amount in Paise\n    \"name\": \"Acme Corp\",\n    \"description\": \"A Wild Sheep Chase is the third novel by Japanese author Haruki Murakami\",\n    \"image\": \"https://example.com/your_logo\",\n    \"handler\": function (response){\n        alert(response.razorpaypaymentid);\n    },\n    \"prefill\": {\n        \"name\": \"Gaurav Kumar\",\n        \"email\": \"gaurav.kumar@razorpay.com\"\n    },\n    \"notes\": {\n        \"address\": \"note value\"\n    },\n    \"theme\": {\n        \"color\": \"#F37254\"\n    }\n};\nvar rzp1 = new Razorpay(options);\ndocument.getElementById('rzp-button1').onclick = function(e){\n    rzp1.open();\n    e.preventDefault();\n}\n\nUsing Scopes\nScopes define the level of access required on the Razorpay merchant's\nAPIs. The following scopes currently available:\n\nscope_name\ndescription\n\nread_only\nProvides read access to all resources. All GET API requests.\n\nread_write\nProvides read and write access to all resources on the API.\n\nValidating State\nThe state parameter helps in preventing cross site request forgery (CSRF) attacks.\nState validation has to be implemented by your application, and should work as\ndescribed below:\n\nYour application should generate a random unique string and save it in the database.\nThe random string should be sent to Razorpay in the Authorization request in the\nstate parameter.\nRazorpay will send back the same state value as query params on your redirect\nURI.\nIn your backend, validate that the state value stored in your database matches\nthe one you received for the client_id and user that initiated the authorization.\n","id":35},{"title":"OAuth Flow","desc":"With Razorpay OAuth you can let your applications integrate and securely access client resources via token-based authentication.","url":"oauth/flow","body":"\nRazorpay OAuth Flow\n\nThe following is the flow in which Razorpay OAuth is provided for your\napplication on Razorpay platform.\n\nWhile trying to use a service of the application, the merchant is asked to\nconnect with Razorpay on that application.\nApplication redirects to Razorpay authorization URL that requests for the\nmerchant's approval to grant access to the requested resource on Razorpay.\nUser is shown the approval page where he can accept or reject the grant of this\naccess.\nAfter the user approves or rejects the request, Razorpay will redirect to\nthe redirect_url specified.\n ● If Approved, an authorization_code is included as a query param.\n ● If Denied, the error reason is sent in the query params.\n\nOn approval, the application requests for an access_token in exchange for\nthe authorization_code.\nThe application can use the access_token in order to access Razorpay APIs on\nbehalf of the merchant.\n\n@image oauth_flow.png\n","id":36},{"title":"Razorpay OAuth","desc":"With Razorpay OAuth you can let your applications integrate and securely access client resources via token-based authentication.","url":"oauth","body":"\nIntroduction\n\nOAuth 2.0 provides a more simplified client-developer flows from its predecessor and lets you securely grant access to third-party applications or aggregators to integrate and access Razorpay merchant resources, via token-based authentication.\n\nFor example, an online accounting software company, Acme Corp. that wants to\nprovide accounting and bookkeeping services to a Razorpay merchant (or the user).\n\nAcme Corp. has to be registered as a third party application with Razorpay first,\nto create credentials (client_id and secret) that authenticates the application\non Razorpay. Now, when the user wants to use Acme Corp. application, he or she\nis asked to sign in to Razorpay on the application, approve permissions allowing\nthe application to access protected resources and only then proceed with using\nthe application. This is provided via a number of requests and responses that\nare generated as a part of the OAuth model.\n\nBefore you Begin\n\nWhile the OAuth flow is fairly straightforward, you will need to have the\nfollowing ready:\n\nSignup with Razorpay. This is required for registering your application on\nRazorpay Dashboard.\nFront-end interface to connect with Razorpay. This could be a button on your\nUI that points to Razorpay's OAuth page.\nA Redirect URL pointing to your application - Razorpay will redirect users to\nthis URL.\n\nGetting Started\n\nAt a high level, the following steps are required to get started with integrating your\nthird-party application via Razorpay OAuth:\n\nCreating an Application: Register your application on Razorpay to receive\nclient credentials (clientid and clientsecret).\nAuthorization: This is the process of requesting a Razorpay merchant to\ngrant your client access.\n\nDetails on each of the steps mentioned above are provided in the following sections.\nprocess of requesting a Razorpay merchant to\ngrant your client access.\n\nDetails on each of the steps mentioned above are provided in the following sections.\n","id":37},{"title":"Testing OAuth Flow","url":"oauth/testing","body":"\nCreating a sample application allows you to test the entire Razorpay OAuth flow in order to securely obtain access to merchant's data. In this document, we demonstrate the integration steps by granting access to your application for your own account.\n\nCreating a Test Application\n\nTo create a test application you need to have an OAuth access on your Razorpay account. To request the OAuth feature, You can get in touch with us at https://razorpay.com/support.\n\nOnce you have obtained access, follow the instructions given below to create a test application:\n\nOn your Razorpay Dashboard, navigate to Settings > Applications.\n\nClick Create Application under the Created Applications section.\n\nEnter the Name of your application for example, \"Acme Corp\". This would appear on Razorpay's authorization page.\n\nEnter the Website URL of the application.\n\nClick Upload App Icon to upload the company's logo. This icon will also be displayed on the authorization page and on the list of connected applications on the merchant's dashboard.\n\n\tNote: The dashboard only allows square images to be uploaded as App Icon.\n\nClick Save. This will create an application on your Razorpay account and will appear in the list of created applications. An Edit Application page will show the application settings for both Development and Production clients.\n\n\tClient ID and Client Secret are predefined for both Development and Production clients. Use them to make request calls to Razorpay servers.\n\n\t@image oauthtest3.png\n\nEnter the Redirect URIs in comma-separated format.\n\tFor Production client, only URLs with https are supported, for example, https://acmecorp.com\n\nClick Save.\n\nClick Preview OAuth Page. This will redirect you to the authorization page where you can authorize or decline access to your test application for your own account. Post setup, you can request access to the merchant account/data for you application in the same manner.\n\n\t Note: For development clients, we support https://localhost as a redirect_uri on Preview. You can however replace it with any of the valid URLs as specified in the Developement client settings and reload the page.\n\nClick Authorize. This will redirect you to the redirect_uri sent in the request URL along with the auth code.\n\nCopy the auth code from the URL and use it to obtain the new access token.\n\n\t Note: While making the API request, pass mode=test. This will fetch you an access token for the test mode. Although the default is Live mode, testing with live token would not help much unless your account is activated.\n\n\tFor both production and development clients, you can control the accessibilty of the application using the scope parameter. A readwrite (scope=readwrite) access would grant edit access to the application while readonly (scope=readonly) would allow only view access.\n\nYour test application will appear in the list of Connected Applications on the merchant's Dashboard.\n\n@image oauthtest5.png\n\nRevoking Access\n\n@// Need a use case here.\n\nRevoking access to a particular application would restrict all permissions to access merchant data and thereby remove it from the list of Connected Applications.\n\nTo revoke access to a connected application, click Revoke beside the application.\n\nTesting Webhooks\n\nYou can test webhooks for specific event on your test application.\n\nTo test webhooks for your created sample application, follow the below steps:\n\nOn your Razorpay Dashboard, navigate to Settings > Applications.\n\nClick Applications.\n\nOn the Edit Application page, click Manage Webhook.\n\nGenerate a unique test endpoint for webhooks.\n\nEnter the generated URL in the Webhook URL field. The webhook payload will be POSTed to the same URL.\n\t@image oauthtest8.png\n\nNote: Ensure that you monitor the webhook URL to see the Razorpay webhooks in action.\n","id":38},{"title":"Webhook Management","desc":"Learn how to setup and manage webhooks for your client application from your Razorpay Dashboard.","url":"oauth/webhooks","body":"\nWebhooks allow you to build or set up integrations that subscribe to\ncertain Razorpay events on merchant resources. When one of those events is triggered,\nwe send an HTTP POST payload in JSON to a specific URL.\n\nWebhooks can be configured and managed independently for each application you create on your Razorpay Dashboard, thereby giving you greater control over your notifications.\n\nRefer the webhook documentation to learn more about Razorpay Webhooks.\n\nSetting Up a Webhook\n\nManaging webhooks for individual applications follows the same procedure as managing account webhooks.\n\nNote: If you are just starting off and have not created an application yet, refer the create application section to create an app.\n\nThe instructions for setting up a webhook for an application are given below:\n\nGo to Razorpay Dashboard> Settings > Applications.\n\nOn a created application, Click Manage Webhook.\n\nEnter the Webhook URL where you will receive the webhook payload when the event is triggered.\n\nCreate a new Secret. This field is optional.\n\n\tNote:\n\tThe Secret can be used to validate that the\n\twebhook is from Razorpay, thus it should not be exposed publicly. On the UI, the Secret will not be shown after creation. You can leave the Secret blank to leave it unedited.\n\nSelect the event(s) you want to activate the webhook for from the list of available events.\n\nClick Save to enable the webhook.\n\nManaging your Webhook: Once created, you can activate/de-activate the webhook for the selected events from the Manage Webhook option.\n\nTo validate your webhook signature, refer the Webhook Validation section\n","id":39},{"title":"Supported Banks","url":"orders-account-validation/bank-list","body":"List of Banks\nUPI Third Party Validation is applicable for 101 Banks and Netbanking Third Party Validation is applicable for 14 Banks mentioned below:\n\nNote:\nAs support for more banks are added, this list will be updated.\n\nBank Codes | Bank Names | UPI Enabled | Netbanking Enabled\n\nANDB | Andhra Bank | Yes | Yes\n\nUTIB | Axis Bank | Yes | Yes\n\nFDRL | Federal Bank | Yes | Yes\n\nHDFC | HDFC Bank | Yes | Yes\n\nICIC | ICICI Bank | Yes | Yes\n\nIBKL | IDBI Bank | Yes | Yes\n\nCIUB | City Union Bank | Yes | Yes\n\nINDB | IndusInd Bank | Yes | Yes\n\nSBIN | State Bank Of India | Yes | Yes\n\nKVBL | Karur Vysaya Bank | Yes | Yes\n\nKKBK | Kotak Mahindra Bank | Yes | Yes\n\nRATN | The Ratnakar Bank Limited | Yes | Yes\n\nCORP | Corporation Bank | Yes | Yes\n\nLAVB | The Lakshmi Vilas Bank Limited | Yes |  Yes\n\nIDIB | Indian Bank | Yes |\n\nIDFB | IDFC Bank | Yes |\n\nBKID | Bank Of India | Yes |\n\nMAHB | Bank of Maharashtra | Yes |\n\nCNRB | Canara Bank | Yes |\n\nCSBK | Catholic Syrian Bank | Yes |\n\nCBIN | Centralﾠ Bank of india | Yes |\n\nDCBL | DCB Bank | Yes |\n\nBKDN | Dena Bank | Yes |\n\nIOBA | Indian Overseas Bank | Yes |\n\nJAKA | Jammu & Kashmir Bank | Yes |\n\nPSIB | Punjab and Sind | Yes |\n\nSIBL | South Indian Bank | Yes |\n\nSCBL | Standard Chartered | Yes |\n\nKARB | Karnataka Bank | Yes |\n\nORBC | Oriental Bank of Commerce | Yes |\n\nPMCB | Punjab and Maharastra Co. Bank | Yes |\n\nTMBL | Tamilnadu Mercantile Bank | Yes |\n\nSRCB | The Saraswat Co-Operative Bank | Yes |\n\nUCBA | UCO Bank | Yes |\n\nUBIN | Union Bank of India | Yes |\n\nUTBI | United Bank of India | Yes |\n\nVIJB | Vijaya Bank | Yes |\n\nYESB | Yes Bank | Yes |\n\nCOSB | Theﾠ Cosmos Co-Operative Bank LTD | Yes |\n\nSYNB | Syndicate Bank | Yes |\n\nTJSB | The Thane Janta Sahakari Bank Ltd(TJSB) | Yes |\n\nBARB | Bank Of Baroda | Yes |\n\nABPB | Aditya Birla Payments Bank | Yes |\n\nAIRP | Airtel Payments Bank | Yes |\n\nALLA | Allahabad Bank | Yes |\n\nDBSS | DBS Digi Bank | Yes |\n\nESFB | Equitas Small Finance Bank | Yes |\n\nFINO | FINO Payments Bank | Yes |\n\nHSBC | HSBC Bank | Yes |\n\nJSBP | Janta Sahakari Bank Pune | Yes |\n\nPYTM | Paytm Payments Bank | Yes |\n\nPUNB | Punjab National Bank | Yes |\n\nAGVX | Assam Gramin Vika | Yes |\n\nCGGX | Chaitanya Godavari Grameen | Yes |\n\nDNSB | Dombivali Nagrik Sahakari Bank | Yes |\n\nJJSB | Jalgaona Janata Sahkari Bank | Yes |\n\nKGSX | Kashi Gomti Samyut Gramin Bank | Yes |\n\nMGRB | Malwa Gramin Bank | Yes |\n\nMZRX | Mizoram Rural Bank | Yes |\n\nVSBL | The Vishweshwar Sahakari Bank | Yes |\n\nDEGX | ﾠ Dena Gujarat Gramin Bank | Yes |\n\nMRBX | ﾠ Manipur Rural Bank | Yes |\n\nAUGX | Allahabad UP Gramin Bank | Yes |\n\nAPGB | Andhra Pragathi Grameena Bank | Yes |\n\nAPGX | Andhra Pradesh Grameena Vikas Bank | Yes |\n\nASBL | Apna Sahakari Bank | Yes |\n\nBDBL | Bandhan Bank | Yes |\n\nBGGX | Baroda Gujarat Gramin Bank | Yes |\n\nBACB | Bassein Catholic Coop Bank | Yes |\n\nBGBX | Bihar Gramin Bank | Yes |\n\nCGBX | Chhattisgarh Rajya Gramin Bank | Yes |\n\nCITI | Citibank Retail | Yes |\n\nPJSB | G P Parsik Bank | Yes |\n\nJIOP | Jio Payment Bank | Yes |\n\nKAIJ | Kallappanna Awade Ichalkaranji Janata Sahakari Bank Ltd. | Yes |\n\nKVGB | Karnataka vikas Gramin Bank | Yes |\n\nKGBX | Kaveri Grameen Bank | Yes |\n\nKLGB | Kerala Gramin Bank | Yes |\n\nLDRX | Langpi Dehangi Rural Bank | Yes |\n\nMAHG | Maharashtra Grameen Bank | Yes |\n\nMERX | Meghalaya Rural Bank | Yes |\n\nPGBX | Pragathi Krishna Gramin Bank | Yes |\n\nPRTH | Prathama Bank | Yes |\n\nPURX | Purvanchal Bank | Yes |\n\nMDGX | Rajasthan Marudhara Gramin Bank | Yes |\n\nRNSB | Rajkot Nagari Sahakari Bank Ltd. | Yes |\n\nSAGX | Saurashtra Gramin Bankﾠ | Yes |\n\nDGBX | Telangana Gramin Bank | Yes |\n\nTBSB | Thane Bharat Sahakari Bank | Yes |\n\nGSCB | The Gujarat State Co-operative Bank Limited | Yes |\n\nHCBX | The Hasti Co-operative Bank Ltd. | Yes |\n\nKJSB | The Kalyan Janta Sahkari Bank | Yes |\n\nMCBL | The Mahanagar Co-Op. Bank Ltd. | Yes |\n\nMSNU | The Mehsana Urban Co-Operative Bank | Yes |\n\nSVCB | The SVC Co-Operative Bank Ltd. | Yes |\n\nTGBX | Tripura Gramin Bank | Yes |\n\nUTGX | Uttarakhand Gramin Bank | Yes |\n\nVGBX | Vananchal Gramin Bank | Yes |\n\nVVSB | Vasai Vikas Co-op Bank Ltd. | Yes |\n\nBRGX | Baroda Rajasthan Kshetriya Gramin Bank | Yes |\n\nDLXB | Dhanlaxmi Bank | Yes |\n","id":40},{"title":"Orders — Bank Account Validation","url":"orders-account-validation","body":"\nThis documentation explains the process of verifying a netbanking or UPI payment from a particular bank account. This is mandatory to process online payments in sectors like securities, mutual funds, and so on.\n\nFeature Enablement: This feature is enabled only on a per-case basis. To enable this feature for your account, raise a request on our Support page.\n\nGetting Started\n\nMerchants that are mandated to have a third-party validations, typically in sectors such as securities, broking and others, are required to use Razorpay Orders API to record details of an expected transaction before it occurs.\n\nRecommended Read:\nIt is essential that you learn about orders API in order to understand the validation process.\n\nThe following endpoint creates a Razorpay Order at your end:\n\n/orders\n\ncurl -u : \\\n   -X POST https://api.razorpay.com/v1/orders \\\n   -H \"Content-Type: application/json\" \\\n   -d '{\n    \"amount\": 500,\n    \"method\": \"netbanking\",\n    \"payment_capture\": 1,\n    \"receipt\": \"BILL13375649\",\n    \"currency\": \"INR\",\n    \"bank_account\": {\n        \"account_number\": \"765432123456789\",\n        \"name\": \"Gaurav Kumar\",\n        \"ifsc\": \"HDFC0000053\"\n    }\n}\n{\n    \"id\": \"order_4xbQrmEoA5WJ0G\",\n    \"entity\": \"order\",\n    \"amount\": 500,\n    \"currency\": \"INR\",\n    \"receipt\": \"BILL13375649\",\n    \"status\": \"created\",\n    \"attempts\": 0,\n    \"created_at: 1455696638\n}\n\nmethod string\n: The expected payment method netbanking or upi.Mandatory\n\naccountnumber string_ bank_account\n: The number of the bank account from which payment is expected to be made. For example, 765432123456789. Payments will not be processed for an incorrect account number.Mandatory\n\nname string bank_account\n: The name linked to the bank account. For example, Gaurav Kumar.Mandatory\n\nifsc string bank_account\n: The IFSC of the bank. For example, HDFC0000053.Mandatory\n\nThe Orders API specific input parameters are explained in the Razorpay Orders API document.\n\nNext Step:\nOnce an order has been created, your next step is to create a payment using the Razorpay Checkout which provides a simple interactive UI for customers to securely submit their payment details and initiate a payment. So when a payment is requested, it can map to the order_id created at your end. Learn more about Razorpay Checkout.\n","id":41},{"title":"Razorpay Partners","desc":null,"url":"partners","body":"\nRazorpay's Partner Program aims to enable businesses to build payments into their platform products, as well as introduce  ancillary capabilities to their suite of services.\n\nBefore we learn about the different partner models, it is important to get familiar with the terminology and find the right integration for your business.\n\nWho is a Partner?\n\nA partner is a Razorpay merchant that onboards her/his clients on Razorpay platform as its sub-merchant to perform payment related operations on their behalf. For example, a company \"Acme\" wants to provide an order management solution for its client company \"Gekko\". To do so, \"Acme\" registers as a Razorpay partner and onboards \"Gekko\" as a submerchant. This allows Acme create and manage payments for its sub merchant.\n\nA partner may also manage the sub-merchant's Razorpay accounts.\n\nLearn about the different partner types.\n\nSub merchants\n\nSub-merchants are the clients who gets onboarded on Razorpay platform by a Partner themselves. In the above scenario, \"Gekko\" is \"Acme's sub merchant.\n\nA sub-merchant can access and manage their own Razorpay Dashboard. Once onboarded, a sub merchant accounts need to be activated for them to start collecting payments.","id":42},{"title":"Partner Types","url":"partners/types","body":"\nUnder the Partner Program umbrella, there are different types of integration models designed to serve your business needs.\n\nDepending on the business model, Razorpay Partners can be classified into three main types:\n\nPlatforms\nAggregators\nResellers\n\nPlatforms\n\nPlatform partners are businesses that build software or technology for a specific solution for its clients. For example, a company “Acme” provides an accounting tool that manages finances for its clients.\n\nBy participating in the Razorpay partners program, they can enable their clients to collect payments directly through the tool.\n\nLearn more about Razorpay OAuth 2.0 for a simplified client-developer integration.\n\nAggregators\n\nAggregator partners are businesses that provide managed services to their clients, through their digital offerings.\n\nFor example, \"BigCommerce\" is an ecommerce platform that lets clients build an entire ecommerce website from ground up.\n\nBy becoming partners with Razorpay, they can manage payments on behalf of their clients.\n\nLearn more about aggregators.\n\nResellers\n\nA reseller is any third-party that refer and/or onboard merchants on Razorpay. A reseller may or may not get a commission from Razorpay for the referral.\n\nSee the resellers dashboard tutorial.","id":43},{"title":"API Reference for Payment Links","desc":"Payment Links API lets you create, get, send notifications & cancel payment links. You can find here sample request-response, payment links entity structure.","url":"payment-links/api","body":"\nYou should refer to our Getting Started documentation to understand the basic concepts of our API usage.\n\nFollowing is the API response format in case of errors such as form validation error, bad request errors, etc.:\n\n{\n  \"error\": {\n    \"code\": \"BADREQUESTERROR\",\n    \"description\": \"amount should always be integer\"\n  }\n}\n\nEntity Structure\n\nFollowing JSON represents a sample Payment Link entity.\n\n Note: Payment Link is a solution on our existing Invoices system\nso a few attributes in the entity response will not be of any use in the case of Payment Links.\n\n{\n    \"id\": \"inv_8fZLnkhkbr74PA\",\n    \"entity\": \"invoice\",\n    \"receipt\": null,\n    \"customerid\": \"cust8fX1NZkgHRziE0\",\n    \"customer_details\": {\n        \"name\": null,\n        \"email\": \"test@test.test\",\n        \"contact\": \"9888888888\",\n        \"billing_address\": null,\n    },\n    \"orderid\": \"order8fZLnnY8WCti5v\",\n    \"line_items\": [],\n    \"payment_id\": null,\n    \"status\": \"issued\",\n    \"expire_by\": null,\n    \"issued_at\": 1505907531,\n    \"paid_at\": null,\n    \"cancelled_at\": null,\n    \"expired_at\": null,\n    \"sms_status\": \"pending\",\n    \"email_status\": \"pending\",\n    \"date\": 1505907531,\n    \"partial_payment\": false,\n    \"terms\":\"Terms and condition of the service\",\n    \"gross_amount\": 1000,\n    \"tax_amount\": 0,\n    \"amount\": 1000,\n    \"amount_paid\": 0,\n    \"amount_due\": 1000,\n    \"currency\": \"INR\",\n    \"description\": \"Payment for your purchange at XYZ store\",\n    \"notes\": [],\n    \"comment\": null,\n    \"short_url\": \"http://dwarf.dev/9n238ti\",\n    \"view_less\": true,\n    \"type\": \"link\",\n    \"user_id\": null,\n    \"created_at\": 1505907531\n}\nCreating Payment Links\n/invoices\nUse this endpoint to create payment links.\n\nRequest Body Attributes\n\nFollowing table lists attributes and their explanations, which are sent in request body:\n\nAttribute\nDatatype\nRequirement/ Description\n\ntype\nstring in: link/ecod/invoice\nMandatory, Must send type=link\n\ndescription\nstring\nMandatory\n\namount\ninteger\nMandatory, Amount must be in paisa\n\ncurrency\nstring\nMandatory, Only INR is supported currently\n\nview_less\nstring in: 0/1\nOptional, Defautls to 1.\n\ncustomer_id\nString\nOptional, May reuse existing customers by passing their id\n\ncustomer[name]\nstring\nMandatory, without customer_id\n\ncustomer[email]\nstring\nOptional\n\ncustomer[contact]\nstring\nOptional\n\nexpire_by\nepoch/integer\nOptional, If specified, Payment Link will get expired past specified time\n\nsms_notify\nString in: 0/1\nOptional, Defaults to 1\n\nemail_notify\nString in: 0/1\nOptional, Defaults to 1\n\ndate\nEpoch/integer\nOptional, Defaults to current timestamp\n\nterms\nString\nOptional\n\nnotes\nObject\nOptional\n\nSample Request and Response\n\n{\n  \"customer\": {\n    \"name\": \"Test\",\n    \"email\": \"test@test.com\",\n    \"contact\": \"9999999999\"\n  },\n  \"type\": \"link\",\n  \"view_less\": 1,\n  \"amount\": 2000,\n  \"currency\": \"INR\",\n  \"description\": \"Payment link for this purpose - xyz.\",\n  \"expire_by\": 1493630556\n}\n{\n    \"id\": \"inv_8fZcMz3hW9Iqy2\",\n    \"entity\": \"invoice\",\n    \"receipt\": null,\n    \"customerid\": \"cust8fZcN0jhKp6Syj\",\n    \"customer_details\": {\n        \"name\": 'Test',\n        \"email\": \"test@test.com\",\n        \"contact\": \"9999999999\",\n        \"billing_address\": null,\n    },\n    \"orderid\": \"order8fZcN2GrrTxazk\",\n    \"line_items\": [],\n    \"payment_id\": null,\n    \"status\": \"issued\",\n    \"expire_by\": null,\n    \"issued_at\": 1505908472,\n    \"paid_at\": null,\n    \"cancelled_at\": null,\n    \"expired_at\": null,\n    \"sms_status\": \"pending\",\n    \"email_status\": \"pending\",\n    \"date\": 1505908472,\n    \"terms\": null,\n    \"partial_payment\": false,\n    \"gross_amount\": 2000,\n    \"tax_amount\": 0,\n    \"amount\": 2000,\n    \"amount_paid\": 0,\n    \"amount_due\": 2000,\n    \"currency\": \"INR\",\n    \"description\": \"Payment link for this purpose - xyz.\",\n    \"notes\": [],\n    \"comment\": null,\n    \"short_url\": \"http://rzp.io/sdzt51e\",\n    \"view_less\": true,\n    \"billing_start\": null,\n    \"billing_end\": null,\n    \"type\": \"link\",\n    \"grouptaxesdiscounts\": false,\n    \"user_id\": null,\n    \"created_at\": 1505908472\n}\n\n Note: Once you have created the payment link, the response from Razorpay's API includes a field called short_url. This url can be shared with the customer by any other means as well, for making the payment.\n\nGetting Payment Link\n\nYou can gets payment link with given ID using the following endpoint.\n\n/invoices/:id\n\nFetching (GET) Multiple Payment Links\n\nYou can fetch multiple payment links using the following end point:\n\nThe following table lists the available query params to filter fetch results:\n\npayment_id\nreceipt\ncustomer_id\n\n/invoices\n\n{\n    \"entity\": \"collection\",\n    \"count\": 2,\n    \"items\": [\n        {\n            \"id\": \"inv_8fZcMz3hW9Iqy2\",\n            \"entity\": \"invoice\",\n            \"receipt\": null,\n            \"customerid\": \"cust8fZcN0jhKp6Syj\",\n            \"customer_details\": {\n                \"name\": 'Test',\n                \"email\": \"test@test.com\",\n                \"contact\": \"9999999999\",\n                \"billing_address\": null,\n            },\n            \"orderid\": \"order8fZcN2GrrTxazk\",\n            \"line_items\": [],\n            \"payment_id\": null,\n            \"status\": \"issued\",\n            \"expire_by\": null,\n            \"issued_at\": 1505908472,\n            \"paid_at\": null,\n            \"cancelled_at\": null,\n            \"expired_at\": null,\n            \"sms_status\": \"sent\",\n            \"email_status\": \"sent\",\n            \"date\": 1505908472,\n            \"terms\": null,\n            \"partial_payment\": false,\n            \"gross_amount\": 2000,\n            \"tax_amount\": 0,\n            \"amount\": 2000,\n            \"amount_paid\": 0,\n            \"amount_due\": 2000,\n            \"currency\": \"INR\",\n            \"description\": \"Payment link for this purpose - xyz.\",\n            \"notes\": [],\n            \"comment\": null,\n            \"short_url\": \"http://rzp.io/sdzt51e\",\n            \"view_less\": true,\n            \"billing_start\": null,\n            \"billing_end\": null,\n            \"type\": \"link\",\n            \"grouptaxesdiscounts\": false,\n            \"user_id\": null,\n            \"created_at\": 1505908472\n        },\n        {\n            \"id\": \"inv_8fZLnkhkbr74PA\",\n            \"entity\": \"invoice\",\n            \"receipt\": null,\n            \"customerid\": \"cust8fX1NZkgHRziE0\",\n            \"customer_details\": {\n                \"name\": 'Test',\n                \"email\": \"test@test.test\",\n                \"contact\": \"9888888888\",\n                \"billing_address\": null,\n            },\n            \"orderid\": \"order8fZLnnY8WCti5v\",\n            \"line_items\": [],\n            \"payment_id\": null,\n            \"status\": \"issued\",\n            \"expire_by\": null,\n            \"issued_at\": 1505907531,\n            \"paid_at\": null,\n            \"cancelled_at\": null,\n            \"expired_at\": null,\n            \"sms_status\": \"sent\",\n            \"email_status\": \"sent\",\n            \"date\": 1505907531,\n            \"terms\": null,\n            \"partial_payment\": true,\n            \"gross_amount\": 1000,\n            \"tax_amount\": 0,\n            \"amount\": 1000,\n            \"amount_paid\": 0,\n            \"amount_due\": 1000,\n            \"currency\": \"INR\",\n            \"description\": \"Haha, this will not work\",\n            \"notes\": [],\n            \"comment\": null,\n            \"short_url\": \"http://rzp.io/9n238ti\",\n            \"view_less\": true,\n            \"billing_start\": null,\n            \"billing_end\": null,\n            \"type\": \"link\",\n            \"grouptaxesdiscounts\": false,\n            \"user_id\": null,\n            \"created_at\": 1505907531\n        }\n    ]\n}\n\nSend/resend notifications\n\nYou can send/resend notifications with the short url to customer via email/sms, using following endpoint:\n\n/invoices/:id/notify_by/:medium\n\nAllowed values for medium url param is sms and email.\n\n{\n    \"success\": true\n}\n\nCancelling Payment Links\n\nYou can cancel Payment Link with given ID using the following endpoint:\n\n/invoices/:id/cancel\n\nIt's response is the invoice entity, similar to create/update API response with status attribute's value as cancelled.\n\nNote: The method can only be called on a payment link that is in issued state.\n\nSupport\nIn case of any issue with integrating Payment Links, please write to us at integrations@razorpay.com\n","id":44},{"title":"eCOD","desc":"With Razorpay eCOD collect payment digitally using delivery executives. You can integrate eCOD with all payment methods including UPI and link based payments.","url":"payment-links/ecod","body":"\nWhat is eCOD?\neCOD is a solution that allows your delivery executives to accept digital payments instead of cash.\n\nHow to integrate eCOD\nThe prerequisites for integrating eCOD are given below:\n\nMerchant must have an app for delivery executives.\nDelivery executives should have internet access on their device.\neCOD is available as an Android SDK that can be embedded in the delivery app of the merchant. The SDK handles the entire user interface for collecting payments through the various payment modes.\n\nSupported Payment Methods\neCOD allows all payment modes: card, netbanking, wallets and UPI. These modes can be divided into two categories:\n\nOn Delivery App Methods\nThe customer need not open any link.\n\nLink Based Methods\nThe customer can use these payments modes on their own device only, through a special link.\n\nOn Delivery App Methods\nThese include:\n\nWallets\nUPI\nWallet Payments\nFor wallet payments, if a customer has enough balance in the wallet, the payment can be made through just an OTP.\n\nThe flow is explained below:\n\nDelivery executive shows the wallet list to the customer on their own phone.\nCustomer selects a wallet and enters their phone number.\nCustomer receives an SMS from the wallet provider.\nCustomer inputs the OTP on the delivery executive’s phone.\nPayment is complete!\n\n No Internet Connectivity Required: This payment method does not require internet\non the customer’s side.\n\nUPI Payments\nUPI payments work through Collect request. Here’s the flow for it:\n\nDelivery executive selects UPI on their phone.\nCustomer provides their VPA (Virtual payment address).\nCustomer receives a collect request on their own phone that has been configured for UPI.\nCustomer approves the collect request using MPIN.\nPayment is complete!\n\n UPI requires Internet Connectivity: This payment method requires the customer to have VPA configured and working internet as UPI doesn’t work without internet.\n\nLink Based Methods\nLink based methods include:\n\nDebit/Credit Cards\nNetbanking\nWallets\nUPI\n\nWhile Wallets and UPI based payments can also be made through the delivery executive’s device, card and netbanking methods are only available via a special link.\n\nThe flow for link based payment is as follows:\n\nCustomer notifies the delivery executive that they want to make a payment on their own device.\nDelivery executive selects Link Payments on their device.\nCustomer receives an SMS with a link. This link is a short link and is also visible on the delivery executive’s device in text as well as QR format.\nCustomer opens the link on a computer or mobile.\nThe standard Razorpay Checkout form opens up through which customer can pay using Card, Netbanking etc.\nOnce the payment is complete, the delivery executive’s phone automatically receives notification on this.\n\n Razorpay SDK Includes the UI: In all of the above payment methods, link based as well as delivery device, the delivery executive is interacting with a UI developed by Razorpay. This will drastically reduce the integration time.\n\nIntegration Process\neCOD runs on top of Razorpay’s Invoices system. An eCOD payment is basically made against an invoice. This requires only two steps of integration:\n\nCreate an Invoice on your server\nPass the invoice_id to Razorpay’s Android SDK\n\nThat’s it! Razorpay’s Android SDK handles everything else. The overall flow is explained below:\n\nDelivery executive selects an order in the merchant’s app.\nDelivery executive clicks on Initiate Payment.\nThe merchant app makes a request to merchant server.\nMerchant server calls the create invoice request on Razorpay’s API.\nRazorpay’s API returns an invoice_id. This is passed on to the merchant app by the merchant server.\nMerchant app invokes Razorpay’s Android SDK and passes the invoice_id.\nRazorpay’s SDK displays a UI for selecting payment mode.\nCustomer selects a payment mode.\nOnce the payment is completed, Razorpay’s Android SDK passes back the control to merchant app with the result, success or failure.\n\nCreating an Invoice (server side)\n\nStep 4 described above involves creating an Invoice through Razorpay’s API. All you need for creating an invoice is the amount and the contact number of the customer.\n\nThe API details are covered in depth in the document on invoices available here.\n\nMandatory Fields for eCOD\n\nFor eCOD, you need to pass the following fields mandatorily in the create invoice API:\n\ntype: ecod\nview_less: 1\nWithout these fields, there's no guarantee of the functionality working as described.\n\nOnce this step is completed, you will have an invoice_id. This needs to be passed to merchant's mobile application.\n\nInvoking Razorpay's Android SDK\nStep 6 involves invoking Razorpay's Android SDK. The standard documentation for integration the android SDK apply here too and is available here. You can use the latest SDK available.\n\nIn the JSONO bject options that you will pass to the SDK, you need to necessarily pass the following fields:\n\ninvoice_id:\necod: true\n\nWithout these parameters, the eCOD checkout form will not be shown.\n\nCompleting the Payment\nThe delivery executive and the customer need to interact with the special eCOD checkout form displayed by the SDK. The customer has various options for completing the payment. In all the cases, once the payment is completed, the android SDK will call merchant's onPaymentSuccess method and pass over the payment_id.\n\nHandling Link Based Payment\nIf the customer chooses link based payment, an SMS is automatically sent to the customer's phone. The customer can open this link on their phone or computer. Once the payment is completed on their device, the SDK will automatically detect that the payment has been completed and call merchant's onPaymentSuccess method.\n\nSupport\n\nIf you face any issue while integrating eCOD, please write to us at integrations@razorpay.com.\n","id":45},{"title":"ePOS","desc":"Razorpay ePOS allows you to collect payment on the app by entering details on the app itself. You can also use ePOS with SDK integration or intent flow.","url":"payment-links/epos","body":"\nWhat is ePOS?\n\nRazorpay provides an ePOS app which is available on the\nGoogle Play Store.\nThrough this app, you can collect payments by entering\nthe details on the app itself. However, for advanced use cases\nwe offer two options:\n\nSDK integration\nIntent Flow\n\nSDK Integration\nIf you want to build complex use cases on top of eCOD/ePOS offering of Razorpay,\nyou can use our SDK. The SDK handles the UI aspects of the payment while\nyou can control the flow around creation of payments. The documentation for eCOD\nis available here.\n\nIn the SDK integration, you will need to handle the invoice generation at your end.\nIf you are looking for a simpler approach, you can use the intent flow discussed in\nbelow section.\n\nIntent Flow\nIn the intent flow, you can have your own app that has the details for the\npayment/order. The executive from your team can then select an order in your\napp and invoke the payment process.\n\nYour app can pass all the necessary details for creating an invoice through an\nintent to Razorpay ePOS app which then automatically handles the invoice creation\nas well as the payment process. Once the payment is complete, your app will get\nthe result as well.\n\nPrerequisites\nFollowing are the prerequisites for integrating the intent flow:\n\nYour executive will need to have two apps installed, one is your app which will\nfire the intent and the second is Razorpay ePOS\nThe executive should be logged in to the Razorpay ePOS app with a specific [team\nrole](../epos/#role-for-razorpay-epos).\nAt the time of the payment, the executive's phone should have internet access.\n\nRole for Razorpay ePOS\nThe executives from your team who will be collecting payments will need to have an\naccount with Razorpay and mapped to your Dashboard account. However, you may not want\nto provide them with full dashboard access. Hence, we have created a specific role for\nthis.\n\nIn your dashboard, go to Team in the left navigation. Now add the executive's email ID\nwith the role set to Delivery Executive or ePOS, whichever is available. This user\nwill now receive an email for activating the account and setting a password. This\nemail ID and password can be used in the Razorpay ePOS app.\n\nStarting the intent flow\n\nTo launch Razorpay ePOS using the intent flow you need to launch an intent with the\nfollwing URI data:\n\nrzp://epos/pay?productname=tshirt&amount=100&contact=9876543210&description=tshirt&merchantorderid=txn123qwe\n\nA helper class called RazorpayInvoice is added below which helps in creating\nthis URI. Using this class, you can generate URI as follows:\n\n/**\n Amount, product name and contact are mandatory fields\n Amount should be pass in paise as a long\n */\n RazorpayInvoice invoice = new RazorpayInvoice.Builder()\n                .setMerchantOrderId(merchantOrderId.getText().toString())\n                .setAmount(Long.parseLong(amountEt.getText().toString()))\n                .setContact(contactEt.getText().toString())\n                .setDescription(descriptionEt.getText().toString())\n                .setProductName(productNameEt.getText().toString())\n                .create();\n\ninvoice.launch(activityContext);\n\nProcessing the result\n\nTo proccess the result of a transaction you need to override the onActivityResult method and call RazorpayInvoice.handleActivityResult.\n\n@Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n        super.onActivityResult(requestCode, resultCode, data);\n        /**\n         You need to call this function in the onActivityResult method\n         */\n        RazorpayInvoice.handleOnActivityResult(requestCode, resultCode, data, new RazorpayInvoice.InvoiceResultCallback() {\n            @Override\n            public void onInvoiceSuccess(String invoiceId) {\n                /**\n                 The invoice has been paid for successfully\n                 */\n            }\n\n            @Override\n            public void onInvoicePending(String invoiceId, String errorDescription) {\n                /**\n                 The invoice has been created but the payment is pending\n                 You can retry the payment from the razorpay epos app\n                 */\n            }\n\n            @Override\n            public void onInvoiceFailure(String errorDescription) {\n                /**\n                 There was an error while creating an invoice\n                 */\n            }\n        });\n    }\n\nHelper class for building Intent Flow\n\nimport android.app.Activity;\nimport android.app.Fragment;\nimport android.content.Intent;\nimport android.net.Uri;\nimport android.text.TextUtils;\nimport android.util.Log;\n\npublic class RazorpayInvoice {\n    String contact;\n    long amount;\n    String productName;\n    String description;\n    String merchantOrderId;\n    public static final int RZPEPOSREQ_CODE = 1290;\n    public static final int RZPINVOICESUCCESS = 1;\n    public static final int RZPINVOICEPENDING = -2;\n    public static final int RZPINVOICEFAILURE = -1;\n\n    public RazorpayInvoice(Builder builder) {\n        contact = builder.contact;\n        amount = builder.amount;\n        productName = builder.productName;\n        description = builder.description;\n        merchantOrderId = builder.merchantOrderId;\n    }\n    public String getMerchantOrderId() {\n        return merchantOrderId;\n    }\n\n    public String getContact() {\n        return contact;\n    }\n\n    public long getAmount() {\n        return amount;\n    }\n\n    public String getProductName() {\n        return productName;\n    }\n\n    public String getDescription() {\n        return description;\n    }\n\n    public void launch(Fragment fragment){\n        Uri uri = buildUri();\n        Intent intent = new Intent(Intent.ACTION_VIEW);\n        intent.setData(uri);\n        fragment.startActivityForResult(intent, RZPEPOSREQ_CODE);\n    }\n\n    public void launch(Activity activity) {\n        Uri uri = buildUri();\n        Intent intent = new Intent(Intent.ACTION_VIEW);\n        intent.setData(uri);\n        activity.startActivityForResult(intent, RZPEPOSREQ_CODE);\n    }\n\n    private Uri buildUri() {\n        Uri.Builder builder = new Uri.Builder();\n        builder.scheme(\"rzp\").\n                authority(\"epos\")\n                .appendPath(\"pay\");\n        if (TextUtils.isEmpty(productName) == false) {\n            builder.appendQueryParameter(\"product_name\", productName);\n        }\n        if (amount > 0) {\n            builder.appendQueryParameter(\"amount\", String.valueOf(amount));\n        }\n        if (TextUtils.isEmpty(contact) == false) {\n            builder.appendQueryParameter(\"contact\", contact);\n        }\n        if (TextUtils.isEmpty(description) == false) {\n            builder.appendQueryParameter(\"description\", description);\n        }\n        if (TextUtils.isEmpty(merchantOrderId) == false) {\n            builder.appendQueryParameter(\"merchantorderid\", merchantOrderId);\n        }\n        return builder.build();\n    }\n\n    public static void handleOnActivityResult(int requestCode, int resultCode, Intent data, InvoiceResultCallback invoiceResultListener) {\n        if (requestCode != RZPEPOSREQ_CODE)\n            return;\n        if (data == null) {\n            return;\n        }\n        String invoiceId;\n        String errorDescription;\n        switch (resultCode) {\n            case RZPINVOICESUCCESS:\n                invoiceId = data.getStringExtra(\"razorpayinvoiceid\");\n                if (invoiceResultListener != null) {\n                    invoiceResultListener.onInvoiceSuccess(invoiceId);\n                }\n                break;\n            case RZPINVOICEPENDING:\n                invoiceId = data.getStringExtra(\"razorpayinvoiceid\");\n                errorDescription = data.getStringExtra(\"error_description\");\n                if (invoiceResultListener != null) {\n                    invoiceResultListener.onInvoicePending(invoiceId, errorDescription);\n                }\n                break;\n            case RZPINVOICEFAILURE:\n                errorDescription = data.getStringExtra(\"error_description\");\n                if (invoiceResultListener != null) {\n                    invoiceResultListener.onInvoiceFailure(errorDescription);\n                }\n        }\n    }\n\n    public static class Builder {\n        String contact;\n        long amount;\n        String productName;\n        String description;\n        String merchantOrderId;\n\n        public Builder setAmount(long amount) {\n            this.amount = amount;\n            return this;\n        }\n\n        public Builder setProductName(String productName) {\n            this.productName = productName;\n            return this;\n        }\n\n        public Builder setDescription(String description) {\n            this.description = description;\n            return this;\n        }\n\n        public Builder setMerchantOrderId(String merchantOrderId) {\n            this.merchantOrderId = merchantOrderId;\n            return this;\n        }\n\n        public Builder setContact(String contact) {\n            this.contact = contact;\n            return this;\n        }\n\n        public RazorpayInvoice create(){\n            return new RazorpayInvoice(this);\n        }\n    }\n\n    public interface InvoiceResultCallback {\n        void onInvoiceSuccess(String invoiceId);\n\n        void onInvoicePending(String invoiceId, String errorDescription);\n\n        void onInvoiceFailure(String errorDescription);\n    }\n}\n`","id":46},{"title":"Payment Links","desc":"With Razorpay Payment Links, accept payment from customers using a link sent via SMS or email. Track payment in payment links lifecycle via status on dashboard.","url":"payment-links","body":"Introduction\nPayment Links are securely generated web addresses that allow\nyour customers to make payments using the supported payment methods.\nPayment Links can be sent via SMS or email.\n\nHow it works\n\nPayment Links can be created from the Dashboard\nor via API. You can preset details such as amount,\nlink expiry time, etc., and send it across to the customer via email\nor SMS. The customer can choose from the payment modes and complete\npayment accordingly. On payment completion, you will receive the amount in your bank\naccount based on your settlement cycle.\nYou can also enable webhooks to receive notifications about the payment as\nthey get completed.\n\nPayment Links Lifecycle\nA Payment Link has the following statuses:\n\nStatus | Description\n\nissued | Payment link is created and sent to customer.\n\npaid | Payment for the link is completed by the customer.\n\ncancelled | Payment link has been cancelled.\n\nexpired | Payment link has expired. You can set a expiry timestamp at the time of creation. You can refer the API reference for more details.\n\nThe following diagram illustrates the different statuses of payment links:\n@image pl-lifecycle-final.png\n\n Note: Deleted is not a status of a Payment Link. A deleted Payment Link will not appear in the list of Payment Links on your Dashboard.\n","id":47},{"title":"Payment Links Operations","desc":"You can create, cancel & resend payment links on Razorpay dashboard or via API. You can use webhooks for payment links when invoice is paid or invoice expires.","url":"payment-links/operations","body":"The following operations are possible with Payment Links:\n\nCreate a Payment Link\n\nYou can create a payment link, to collect funds from your customers, via the Dashboard or API. When you create a payment link, it moves to issued state by default.\n\nTo create a payment link via the API, refer the API reference page.\n\nTo create a payment link from the Dashboard:\n\nLog into your Razorpay PG Dashboard.\nGo to Payment Links.\nClick Create Payment Link. The Create Payment Link screen displays.\n\nEnter the following payment link details:\n   Amount\n   Payment For\n   Customer Details\n   Receipt No.\n   Expire On\nSelect Enable Partial Payment if you want to allow your customer to make partial payments. Click here for more details about partial payments.\nSelect SMS, Email or both from the Notify option to define the mode by which the the payment link is sent.\nClick Add Internal Notes to add any other information about the payment.\nClick Create Payment Link to create a payment link.\n\nOnce the payment link is created, it appears on the list of previously created links. You can search for a payment link by one or a combination of the following fields:\n\nPayment Link Status\nPayment Link ID\nReceipt No.\nCustomer Contact\nCustomer Email\n\nNote:\nYou can enable or disable Partial Payment and edit the non-mandatory fields such as Receipt No., Expire By and Internal Note from the Dashboard. You can also add a new note, if required.However, you cannot edit any other details once the payment link has been issued.\n\nCancel a Payment Link\n\nIf you do not want your customers to use the payment link you created, you can cancel the issued payment link. You can only cancel links that are in the issued state.\n\nTo cancel a payment link via the API, refer the API reference page.\n\nTo cancel a payment link from the Dashboard:\n\nLog in to Razorpay Dashboard.\nGo to Payment Links.\nClick on the Payment Link ID you want to cancel.\nClick Cancel Link and confirm the same by clicking Yes, Cancel.\n\nResend Notification\n\nYou can resend a payment link to your customer, if required.\n\nTo resend the payment link:\n\nLog in to Razorpay Dashboard.\nGo to Payment Links.\nSelect the Payment link ID you wish to resend.\nClick Resend Link at the top of the page.\nSelect the modes in which you want to resend the link and click Send Link.\n\nUsing Webhooks with Payment Links\n\nYou can enable webhooks to get notified:\nWhen a payment is made against a payment link you have sent to your customer\nWhen a payment link expires\n\nYou can use the following webhooks to get notification about Payment Links:\n\ninvoice.paid\n: Triggered when a payment is successfully made against a payment link.\n\ninvoice.expired\n: Triggered when a payment link expires.\n\nThese webhooks let you receive notification about the payment link's status changes.\nWebhooks can be enabled from your Dashboard under the Webhooks section.\nRefer our documentation on webhooks here for more details.\n","id":48},{"title":"Partial Payments","desc":null,"url":"payment-links/partial-payments","body":"\nPartial payment provides better control over how you collect payments by allowing your customers to make payments in parts against a particular order_id instead of making the entire payment at once.\n\nJust like any other payment, each partial payment would have a unique paymentid but will be tied to the same orderid thereby allowing customers to easily make multiple payments against the same order using the same Payment Link. This makes it easier to track the status of a particular order.\n\n@image ptlpmnt1_1.png\n\nBusiness Use-case\n\nThis feature comes handy when dealing with transactions for a large amount where the customer finds paying the total amount in parts more convenient than paying the entire amount upfront.\n\nFor example, a tourism company, Acme Corp. has expensive travel packages. Now as per the company policy, a booking booking amount must be collected by the customer before starting to book the tour for client. Using partial payments, merchants issues a link to the customer, using which the customer pays the booking amount against the same order amount.\n\nHow it Works\n\nMerchant creates a payment link of @data.Rs 20000\n\nCustomer chooses to pay an amount of @data.Rs 10000 out of due amount mentioned in the payment link.\n\nSince the customer pays an amount less than the due amount, the payment link would show partially_paid status till the entire amount due is zero and does not get expired or cancelled.\n\nOnce all amount has been paid, status of the payment link changes to paid. Learn about the Payment Link lifecycle.\n\nNote:\nA customer can make multiple partial payments against an order through the same payment link.\n\nNotifications\n\nBoth customer and merchants are notified about all the payments made against an order via mail, SMS, and Razorpay webhooks. Notifications includes whether partial payment was enabled for the payment link, amount paid, and amount due on the payment link at the time, etc.\n\nEnabling Partial Payment\n\nPartial payments can be enabled through your Razorpay Dashboard or via APIs.\n\nAPI\n\nThe endpoint for creating payment links is given below:\n\n/invoices\n\nRequest Body Parameter\n\nIn order to enable partial payments via API you need to send the following attribute along with other request body attribute.\n\npartialpayment string in: 0/1_\n: Used to enable partial payments. Defaults to 0.\n\nThe sample request and response for creating a payment link with partial payment enabled is given below:\n\ncurl -X POST \\\nhttps://api.razorpay.com/v1/invoices/ \\\n-H 'Content-type: application/json' \\\n-d '{\n\"line_items\": [\n    {\n        \"name\": \"Book / English August\",\n        \"description\": \"Funny story of an IAS officer wanting to be aything other than an IAS.\",\n        \"amount\": 10000,\n        \"currency\": \"INR\",\n        \"quantity\": 1\n    }\n],\n\"customer\": {\n    \"email\": \"gaurav.kumar@razorpay.com\",\n    \"contact\": \"9123456780\",\n    \"billing_address\": {\n        \"line1\": \"#11, Navi Camp\",\n        \"city\": \"Pandora\",\n        \"state\": \"Karnataka\",\n        \"zipcode\": \"560076\",\n        \"country\": \"India\"\n    }\n},\n{\n    \"id\": \"inv_AHi6pX3JEiBLqD\",\n    \"entity\": \"invoice\",\n    \"receipt\": null,\n    \"invoice_number\": null,\n    \"customerid\": \"cust80Qb2y3aakiwcx\",\n    \"customer_details\": {\n        \"id\": \"cust_80Qb2y3aakiwcx\",\n        \"name\": null,\n        \"email\": \"gaurav.kumar@razorpay.com\",\n        \"contact\": \"9123456780\",\n        \"gstin\": null,\n        \"billing_address\": {\n            \"id\": \"addr_80Qb2yt7ndvjgO\",\n            \"type\": \"billing_address\",\n            \"primary\": true,\n            \"line1\": \"#11, Navi Camp\",\n            \"line2\": null,\n            \"zipcode\": \"560076\",\n            \"city\": \"Pandora\",\n            \"state\": \"Karnataka\",\n            \"country\": \"in\"\n        },\n        \"shipping_address\": null,\n        \"customer_name\": null,\n        \"customer_email\": \"gaurav.kumar@razorpay.com\",\n        \"customer_contact\": \"9123456780\"\n    },\n    \"orderid\": \"orderAHi6pZEwURdA6f\",\n    \"line_items\": [\n        {\n            \"id\": \"li_AHi6pY47GikcyO\",\n            \"item_id\": null,\n            \"name\": \"Book / English August\",\n            \"description\": \"Funny story of an IAS officer wanting to be aything other than an IAS.\",\n            \"amount\": 10000,\n            \"unit_amount\": 10000,\n            \"gross_amount\": 10000,\n            \"tax_amount\": 0,\n            \"net_amount\": 10000,\n            \"currency\": \"INR\",\n            \"type\": \"invoice\",\n            \"tax_inclusive\": false,\n            \"hsn_code\": null,\n            \"sac_code\": null,\n            \"tax_rate\": null,\n            \"unit\": null,\n            \"quantity\": 1,\n            \"taxes\": []\n        }\n    ],\n    \"payment_id\": null,\n    \"status\": \"issued\",\n    \"expire_by\": null,\n    \"issued_at\": 1527772386,\n    \"paid_at\": null,\n    \"cancelled_at\": null,\n    \"expired_at\": null,\n    \"sms_status\": \"pending\",\n    \"email_status\": \"pending\",\n    \"date\": 1527772386,\n    \"terms\": null,\n    \"partial_payment\": true,\n    \"gross_amount\": 10000,\n    \"tax_amount\": 0,\n    \"amount\": 10000,\n    \"amount_paid\": 0,\n    \"amount_due\": 10000,\n    \"currency\": \"INR\",\n    \"description\": null,\n    \"notes\": [],\n    \"comment\": null,\n    \"short_url\": \"https://rzp.io/i/ZLmwNtM\",\n    \"view_less\": true,\n    \"billing_start\": null,\n    \"billing_end\": null,\n    \"type\": \"link\",\n    \"grouptaxesdiscounts\": false,\n    \"user_id\": null,\n    \"created_at\": 1527772386\n}\n\nDashboard\n\nTo create a payment link via the Dashboard:\n\nLog on to Razorpay Dashboard.\nGo to Payment Links.\nClick Create Payment Link.\nSelect the checkbox Enable partial payments.\n\nThe created payment link will appear in the list of created payment links.\n\nClicking on the specific payment link ID (for example inv_8fZcMz3hW9Iqy2) will open a details page of the particular payment link.\n\nWebhook Status\n\nIn addition to invoice.paid and invoice.expired, you need to subscribe to invoice.partially_paid webhook event in order to get notified when a partial payment is made against any payment link.\n\nHowever, the final payment that marks the complete payment against an order would trigger a invoice.paid event.\n\nFor example, if a payment link of amount @data.Rs 20000 was paid in three parts, @data.Rs 4000, @data.Rs 1000, @data.Rs 15000. The first two payments would trigger invoice.partially_paid event as payment link status continues to be that. The 3rd (last) payment would trigger invoice.paid event.\n\nCustomer-side Interaction\n\nWhen the customer opens the payment link page, if partial payment is enabled, customer will have the option to modify the payment amount to anything between 1 and the amount due at the time.\n\nYou can also view the payment history as shown below:\n","id":49},{"title":"Modify Page Settings","url":"payment-pages/modify-settings","body":"\nYou can edit the settings for a Payment Page even after you publish it. To modify the settings, navigate to Payment Page on the Dashboard and click on the page ID, this opens the page details side panel where you can perform the following actions:\n\nEdit the page. Editing re-opens the editor with saved details.\nDeactivate the page. Deactivating a payment page makes it inaccessible to its customers.\nThe Expires on option lets you set an expiry date and time for the payment page using the date and time picker. You can also select the No Expiry checkbox to run the page for an indefinite time.\nAdd New notes on the payment page. You can add up to 5 custom notes on the payment page.\n\nBest Practice:\n- To avoid confusion, ensure that no two pages have the same Titles.\n- You can edit an expired or inactive payment page and republish it with new changes. This helps avoid page duplication and query systems efficiently.\n","id":50},{"url":"private/partial-payments","body":"Page UpdatedThis page has been updated and moved to a new location. View the updated documentation.\n","id":51},{"url":"private/payment-links-batch-uploads","body":"Page UpdatedThis page has been updated and moved to a new location. View the updated Batch Upload documentation.\n","id":52},{"title":"Payment Settlement Control API","url":"private/payment-settlement-control-api","body":"\nThe following section describes the API to control the payment settlement.\n\n{\n    \"on_hold\": true,\n    \"onholduntil\": 1537872668\n}\n\n{\n    \"id\": \"pay_AsvVMXmaAwwMVl\",\n    \"entity\": \"payment\",\n    \"amount\": 5000,\n    \"currency\": \"INR\",\n    \"status\": \"authorized\",\n    \"order_id\": null,\n    \"invoice_id\": null,\n    \"international\": false,\n    \"method\": \"card\",\n    \"amount_refunded\": 0,\n    \"amount_transferred\": 0,\n    \"refund_status\": null,\n    \"captured\": false,\n    \"description\": null,\n    \"cardid\": \"cardAsvVMaZI125Eu2\",\n    \"bank\": null,\n    \"wallet\": null,\n    \"vpa\": null,\n    \"email\": \"gaurav.kumar@example.com\",\n    \"contact\": \"+919123456780\",\n    \"on_hold\": true,\n    \"onholduntil\": 1537872668,\n    \"notes\": [],\n    \"fee\": null,\n    \"tax\": null,\n    \"error_code\": null,\n    \"error_description\": null,\n    \"created_at\": 1535898144\n}\n\nRequest Parameters\n\nonhold boolean_\n: Indicates whether settlement for the payment is on hold or not.\n\nonholduntil integer\n: Timestamp indicating until which the settlement for the payment is to be kept on hold. The settlement will be initiated on the next business day after the timestamp. If this field is set, the on_hold field has to be set to true.\n","id":53},{"title":"API Reference — Validate VPA","url":"private/vpa-validation","body":"\nIntroduction\n\nIn case of card payments, the customer makes a first payment that serves as authorization for merchants to store the card details for future payments. In case of Virtual Private Addresses (VPAs)validation, Razorpay directly communicates with the NPCI servers and relays the response to the merchant via APIs.\n\nIn order to access this feature, ENABLEVPAVALIDATE must be added to the merchant codebase. This allows us in restricting the usage of API.\n\n@// ENABLEVPAVALIDATE must be added to the merchant codebase?\n\n@// NPCI is the central entity,\n\nPrivate Feature\nThis is a private feature and its support can be only enabled privately. We highly recommend to not share this document to anyone. To enable this feature for your account, you can get in touch with us at https://razorpay.com/support for any queries.\n\nAPI Endpoint\n\n/payment/validate/vpa\n\nIntroduction\n\nThe API is currently served by directly using MindGate as Gateway, later will have intelligence to to switch gateways once we implement same action for other gateways. It does not cover switching and extension of API.\n\ncurl -u ':@https://api.razorpay.com/v1/payment/validate/vpa'\n    -XPOST \\\n    -H 'Content-type: application/json'\n    -d {\n        vpa: username@handle\n    }\n{\n    vpa : username@handle,\n    success : true/false\n}\n\n{\n\t\"vpa\" : \"success@razorpay\"\n}\n{\n\t\"vpa\" : \"success@razorpay\",\n\t\"success\" : true\n}\n\n{\n\t\"vpa\" : \"invalidvpa@razorpay\"\n}\n{\n\t\"vpa\" : \"invalidvpa@razorpay\",\n\t\"success\" : false\n}\n\n{\n\t\"vpa\" : \"invalidvpa\"\n}\n{\n    \"error\": {\n        \"code\": \"BADREQUESTERROR\",\n        \"description\": \"Invalid VPA. Please enter a valid Virtual Payment Address\",\n        \"field\": \"vpa\"\n    }\n}\n\nLive Mode\nJust use live key and secret, everything is same as test mode.\n\nImplementation\nThe api will only be exposed to Merchant’s which has feature ENABLEVPAVALIDATE added. This helps us in restricting the usage of API.\n\nGateway\nWe are currently using Mindgate for all live request, Mindgate/Gateway has method validateVpa which throws Gateway Error Exception for invalid vpas. We need to keep same signature for all future gateways.\n\nFor Test Mode we have written same interface in Sharp/Gateway, which throws mentioned exception when vpa is invalidvpa@razorpay\n\nLimitations\n\nAs we only using single gateway, we can guarantee uptime of API.\nWe can not handle heavy amount of load on this API as it may clog gateway in peak time.\n\nFuture Enhancements\nWe can add more gateways like, sbi and hulk. And can implement intelligent switching based on downtime and latency.\n","id":54},{"title":"React Native for Custom UI Mobile SDKs","url":"react-native-customui/link-react-native","body":"\nAndroid Custom UI SDK\n\nThe following steps will link the React Native project to Razorpay Android Custom UI SDK.\n\nPrerequisites\n Install and integrate Android Custom UI SDK in your mobile app.\n\nSteps\n\nDownload React Native Custom UI SDK.\nUnzip and move the react-native-customui folder to the relevant directory.\nOpen android/app/src/main/java/[...]/MainApplication.java and perform the below actions:\n    Add import com.razorpay.rn.RazorpayPackage; to the imports at the top of the file.\n    Add new RazorpayPackage() to the list returned by the getPackages() method.\n\nAppend the below lines to android/settings.gradle:\n\n        include ':react-native-customui'\n    project(':react-native-customui').projectDir = new File(rootProject.projectDir,   '../node_modules/react-native-customui/android')\n    Insert the below line inside the dependencies block in android/app/build.gradle:\n\n        compile project(':react-native-customui')\n    Add below line to the package.json under the dependencies section.\n\n        \"react-native-customui\": \"./../react-native-customui\"\n        Note:\n    Here ./../react-native-customui is relative path to the react-native-customui directory. It may differ in your case.\n\nCopy the razorpay-android.aar from react-native-customui/android/libs/ folder and paste it to the android/app/libs directory.\n\niOS Custom UI SDK\n\nReact Native creates a static library for each plugin, library, framework, or native module being used. The following steps will link the React Native project to Razorpay iOS Custom UI SDK.\n\nImportant\n The version of the SDK is compiled with the swift 4.2 framework. Ensure that you are on Swift 4.2 or above to utilize this SDK.\n\nDue to limitations on how Xcode links static and dynamic libraries or frameworks to projects, some additional steps are required to link our iOS SDK to the React Native project.\n\nPrerequisites:\n1. Install and integrate [Android Custom UI SDK] (https://razorpay.com/docs/android-customui-sdk/) in your mobile app.\n2. The iOS framework is shipped with simulator architectures that should be removed before you archive. Watch the tutorial on how to remove simulator architectures.\n3. Remember to enable bitcode on both your iOS as well as the RazorpayCheckout project.\n\nSteps\n\nDownload the React Native SDK.\nMove the unzipped react-native-customui folder to the relevant directory.\nDelete the .framework file from /nodemodules/react-native-razorpay/ios_.\nCopy the .framework file from Step 3 to /nodemodules/react-native-razorpay/ios_.\nOpen /ios/.xcworkspace or\n/ios/.xcodeproj.\nLink the .framework file directly to your project in Xcode.\n\n    Tip\n    You can do this by simply doing a drag-and-drop on the .framework file into Xcode under the directory named __.\n\nSelect the Copy items if needed checkbox and select your project target from the list.\nAdd the below line of code in your AppDelegate.m file under the imports section:\n\n        #import\n\nAdd the below line of code to your AppDelegate.m file in the application:didFinishLaunchingWithOptions section.\n\n        dlopen(\"Razorpay.framework/Razorpay\", RTLDLAZY | RTLDGLOBAL);\n","id":55},{"title":"Refunds API","url":"refunds","body":"\nYou can initiate a refund of a payment made by your customer\nThe following endpoint refunds a specific payment. Refund is done only after a payment has been successfully captured.\n\nAfter a refund is initiated, it is completed in 2-5 days.\n\nCreating a Refund\n\nThe following endpoint is used for retrieving list of refunds of a payment based on optional parameters. By default only last 10 are returned. You can use count and skip parameters to change that behavior.\n\n/payments/:id/refund\n\nPath Params\n\nid string required\n: The ID of the payment to refund.\n\nBody Params\n\namount string\n: Amount to be refunded, whole amount is refunded if not specified.\n\nnotes array of strings[]\n: Array of notes fields. This is validated the same way as the payment.notes field\n\nDefinition\nhttps://api.razorpay.com/v1/payments/:id/refund\n\nResult Format\n{\n  \"id\": \"rfnd_5UXHCzSiC02RBz\",\n  \"entity\": \"refund\",\n  \"amount\": 100,\n  \"currency\": \"INR\",\n  \"paymentid\": \"pay5UWttxtCjkrldV\",\n  \"notes\": {},\n  \"created_at\": 1462887226\n}\n{\n   \"error\": {\n      \"code\": \"BADREQUESTERROR\",\n      \"description\": \"The amount is invalid\",\n      \"field\": \"amount\"\n   }\n}\n{\n    \"error\": {\n        \"code\": \"BADREQUESTERROR\",\n        \"description\": \"The api key provided is invalid\"\n    }\n}\n\nExamples\n\ncurl -u rzptest26ccbdbfe0e84b:69b2e24411e384f91213f22a \\\n   -X POST \\\n   https://api.razorpay.com/v1/payments/pay_29QQoUBi66xm2f/refund\npayment->fetch('pay_29QQoUBi66xm2f');\n$refund = $payment->refund();\n\n//$refund = $payment->refund(array('amount' => 100)); for partial refund\n\n?>\ndo easy_install razorpay or\npip install razorpay\n\nimport razorpay\n\nrazorpay.Client(auth=(\"\", \"\"))\n\npayment_id = \"\"\n\npayment_amount =\n\nresp = client.payment.refund(paymentid, paymentamount)\n\n#Refund with Extra Parameters\n\nnotes = {'key': 'value'}\n\nresp = client.payment.refund(paymentid, paymentamount, notes=notes)\nrequire 'razorpay'\n\nRazorpay.setup(\"rzptest26ccbdbfe0e84b\", \"69b2e24411e384f91213f22a\")\n\nRazorpay::Payment.fetch(\"pay_29QQoUBi66xm2f\").refund()\nvar request = require('request');\n\nrequest({\n  method: 'POST',\n  url: 'https://rzptest26ccbdbfe0e84b:69b2e24411e384f91213f22a@api.razorpay.com/v1/payments/pay_29QQoUBi66xm2f/refund',\n}, function (error, response, body) {\n  console.log('Status:', response.statusCode);\n  console.log('Headers:', JSON.stringify(response.headers));\n  console.log('Response:', body);\n});\n//intialze the sdk client\nRazorpayClient client = new RazorpayClient(\"\", \"\");\n\n// payment to be refunded, payment must be a captured payment\nPayment payment = client.Payment.Fetch(paymentId);\n\n//Full Refund\nRefund refund = payment.Refund();\n\n//Partial Refund\nDictionary data = new Dictionary();\ndata.Add(\"amount\", \"100\");\nRefund refund = payment.Refund(data);\nimport org.json.JSONObject;\nimport com.razorpay.Payment;\nimport com.razorpay.Refund;\nimport com.razorpay.RazorpayClient;\nimport com.razorpay.RazorpayException;\n\nRazorpayClient razorpay = new RazorpayClient(\"\", \"\");\ntry {\n  // Full Refund\n  Refund refund = razorpay.Payments.refund(\"\");\n\n  // Partial Refund\n  JSONObject refundRequest = new JSONObject();\n  refundRequest.put(\"amount\", amount); // Amount should be in paise\n  Refund refund = razorpay.Payments.refund(\"\", refundRequest);\n} catch (RazorpayException e) {\n  // Handle Exception\n  System.out.println(e.getMessage());\n}\nNote: Check that the refund object returned after the request has the correct amount and no error is returned.\n\nRetrieving Multiple Refunds\n\nThe following endpoint is used for retrieving list of refunds of a payment based on optional parameters. By default only last 10 are returned. You can use count and skip parameters to change that behavior.\n\nget/payments/:id/refunds\n\nPath Params\n\nid string required\n: The payment id whose refunds are to be fetched.\n\nQuery Params\n\nfrom timestamp\n: The timestamp in seconds after which the refunds were created.\n\nto timestamp\n: The timestamp in seconds before which the refunds were created.\n\ncount integer10\n: The number of refunds to fetch.\n\nskip integer0\n: The number of refunds to be skipped.\n\nDefinition\n\nhttps://api.razorpay.com/v1/payments/:id/refunds\n\nResult Format\n\n{\n  \"count\": 2,\n  \"entity\": \"collection\",\n  \"items\": [\n    {\n      \"id\": \"rfnd_AABBdHIieexn5c\",\n      \"entity\": \"refund\",\n      \"amount\": 100,\n      \"currency\": \"INR\",\n      \"paymentid\": \"pay29QQoUBi66xm2f\",\n      \"notes\": {},\n      \"created_at\": 1500826750\n    },\n    {\n      \"id\": \"rfnd_19btGlBig6xZ2f\",\n      \"entity\": \"refund\",\n      \"amount\": 100,\n      \"currency\": \"INR\",\n      \"paymentid\": \"pay29QQoUBi66xm2f\",\n      \"notes\": {},\n      \"created_at\": 1500826750\n    }\n  ]\n}\n{\n   \"error\": {\n      \"code\": \"BADREQUESTERROR\",\n      \"description\": \"The paymentid was not found\"\n   }\n}\n{\n    \"error\": {\n        \"code\": \"BADREQUESTERROR\",\n        \"description\": \"The api key provided is invalid\"\n    }\n}\nExamples\n\ncurl -u rzptest26ccbdbfe0e84b:69b2e24411e384f91213f22a \\\nhttps://api.razorpay.com/v1/payments/pay_29QQoUBi66xm2f/refunds?created=1500826750\n 1500826740,\n    'to'    => 1500826760,\n    'count' => 2,\n    'skip'  => 1\n);\n\n$payments = $api->payment->fetch('pay_29QQoUBi66xm2f')->refunds()->all($params);\n\n?>\ndo easy_install razorpay or\npip install razorpay\n\nimport razorpay\n\nrazorpay.Client(auth=(\"\", \"\"))\n\npayment_id = \"\"\n\nresp = client.refund.fetchall(paymentid)\nrequire 'razorpay'\n\nRazorpay.setup(\"rzptest26ccbdbfe0e84b\", \"69b2e24411e384f91213f22a\")\n\nRazorpay::Payment.fetch(\"pay_29QQoUBi66xm2f\").refunds.all({from:1500826740,to:1500826760,count:2,skip:1})\nRazorpayClient client = new RazorpayClient(\"\", \"\");\nPayment payment = client.Payment.Fetch(paymentId);\n\nList refunds = payment.Refunds.All();\nimport java.util.List;\nimport com.razorpay.Refund;\nimport com.razorpay.RazorpayClient;\nimport com.razorpay.RazorpayException;\n\nRazorpayClient razorpay = new RazorpayClient(\"\", \"\");\ntry {\n  List refunds = razorpay.Payments.fetchAllRefunds(\"\");\n} catch (RazorpayException e) {\n  // Handle Exception\n  System.out.println(e.getMessage());\n}\n\nRetrieving a Refund by ID\n\nThe following endpoint is used for retrieving a specific refund of a specific payment entity by its ID:\n\nget/payments/:paymentid/refunds/:refundid\n\nPath Params\n\npaymentid string required_\n: The ID of the payment whose refund is to be retrieved.\n\nrefundid string required_\n: The ID of the refund to be retrieved.\n\nDefinition\n\nhttps://api.razorpay.com/v1/payments/:paymentid/refunds/:refundid\n\nResult Format\n\n{\n  \"id\": \"rfnd_AABBdHIieexn5c\",\n  \"entity\": \"refund\",\n  \"amount\": 100,\n  \"currency\": \"INR\",\n  \"paymentid\": \"pay29QQoUBi66xm2f\",\n  \"notes\": {},\n  \"created_at\": 1500826750\n}\n{\n   \"error\": {\n      \"code\": \"BADREQUESTERROR\",\n      \"description\": \"The payment id was not found\"\n   }\n}\n{\n    \"error\": {\n        \"code\": \"BADREQUESTERROR\",\n        \"description\": \"The api key provided is invalid\"\n    }\n}\nExamples\n\ncurl -u rzptest26ccbdbfe0e84b:69b2e24411e384f91213f22a \\\nhttps://api.razorpay.com/v1/payments/pay29QQoUBi66xm2f/refunds/rfndAABBdHIieexn5c\n\npayment->fetch('pay29QQoUBi66xm2f')->refunds()->fetch('rfndAABBdHIieexn5c');\n\n?>\ndo easy_install razorpay or\npip install razorpay\n\nimport razorpay\n\nrazorpay.Client(auth=(\"\", \"\"))\n\npayment_id = \"\"\n\nrefund_id = \"\"\n\nresp = client.refund.fetch(paymentid, refundid)\nrrequire 'razorpay'\n\nRazorpay.setup(\"rzptest26ccbdbfe0e84b\", \"69b2e24411e384f91213f22a\")\n\nRazorpay::Payment.fetch(\"pay29QQoUBi66xm2f\").refunds.fetch(\"rfndAABBdHIieexn5c\")\nvar request = require('request');\n\nrequest('rzptest26ccbdbfe0e84b:69b2e24411e384f91213f22a@api.razorpay.com/v1/payments/pay_29QQoUBi66xm2f/refunds?from=1500826740&to=1500826760&count=2&skip=1', function (error, response, body) {\n\nconsole.log('Response:', body);\n});\nRazorpayClient client = new RazorpayClient(\"\", \"\");\nPayment payment = client.Payment.Fetch(paymentId);\n\nRefund refund = payment.Refunds.Fetch(refundId);\nimport com.razorpay.Refund;\nimport com.razorpay.RazorpayClient;\nimport com.razorpay.RazorpayException;\n\nRazorpayClient razorpay = new RazorpayClient(\"\", \"\");\ntry {\n  Refund refund = razorpay.Payments.fetchRefund(\"\", \"\");\n} catch (RazorpayException e) {\n  // Handle Exception\n  System.out.println(e.getMessage());\n}\nRetrieving Refunds by ID\n\nThe following endpoint is used for retrieving list of refunds based on optional parameters. By default only last 10 are returned. You can use count and skip parameters to change that behavior.\n\n /refunds\n\nQuery Params\nfrom timestamp\n: The timestamp in seconds after which the refunds were created\n\nto timestamp\n: The timestamp in seconds after which the refunds were created\n\ncount integer10\n: The number of refunds to fetch. Maximum: 100\n\nskip integer0\n: The number of refunds to be skipped\n\nDefinition\n\nhttps://api.razorpay.com/v1/refunds/\n\nResult Format\n{\n  \"count\": 2,\n  \"entity\": \"collection\",\n  \"items\": [\n    {\n      \"id\": \"rfnd_AABBdHIieexn5c\",\n      \"entity\": \"refund\",\n      \"amount\": 100,\n      \"currency\": \"INR\",\n      \"paymentid\": \"pay29QQoUBi66xm2f\",\n      \"notes\": {},\n      \"created_at\": 1500826750\n    },\n    {\n      \"id\": \"rfnd_19btGlBig6xZ2f\",\n      \"entity\": \"refund\",\n      \"amount\": 100,\n      \"currency\": \"INR\",\n      \"paymentid\": \"pay29QQoUBi66xm2f\",\n      \"notes\": {},\n      \"created_at\": 1500826750\n    }\n  ]\n}\n{}\nExamples\n\ncurl -u rzptest26ccbdbfe0e84b:69b2e24411e384f91213f22a \\\nhttps://api.razorpay.com/v1/refunds\nimport java.util.List;\nimport org.json.JSONObject;\nimport com.razorpay.Refund;\nimport com.razorpay.RazorpayClient;\nimport com.razorpay.RazorpayException;\n\nRazorpayClient razorpay = new RazorpayClient(\"\", \"\");\ntry {\n  JSONObject refundRequest = new JSONObject();\n\n  // supported option filters (from, to, count, skip)\n  refundRequest.put(\"count\", 2);\n  refundRequest.put(\"skip\", 1);\n\n  List refunds = razorpay.Refunds.fetchAll(refundRequest);\n} catch (RazorpayException e) {\n  // Handle Exception\n  System.out.println(e.getMessage());\n}\ndo easy_install razorpay or\npip install razorpay\n\nimport razorpay\n\nrazorpay.Client(auth=(\"\", \"\"))\n\npayment_id = \"\"\n\nresp = client.refund.fetchall(paymentid)\n get/refunds/:id\n\nPath Params\n\nid string required\n: The ID of the refund to be retrieved.\n\nDefinition\n\nhttps://api.razorpay.com/v1/refunds/:id\n\nResult Format\n{\n  \"id\": \"rfnd_AABBdHIieexn5c\",\n  \"entity\": \"refund\",\n  \"amount\": 100,\n  \"currency\": \"INR\",\n  \"paymentid\": \"pay29QQoUBi66xm2f\",\n  \"notes\": {},\n  \"created_at\": 1500826750\n}\n{}\nExamples\n\ncurl -u rzptest26ccbdbfe0e84b:69b2e24411e384f91213f22a \\\nhttps://api.razorpay.com/v1/refunds/rfnd_AABBdHIieexn5c\nimport com.razorpay.Refund;\nimport com.razorpay.RazorpayClient;\nimport com.razorpay.RazorpayException;\n\nRazorpayClient razorpay = new RazorpayClient(\"\", \"\");\ntry {\n  Refund refund = razorpay.Refunds.fetch(\"\");\n} catch (RazorpayException e) {\n  // Handle Exception\n  System.out.println(e.getMessage());\n}\ndo easy_install razorpay or\npip install razorpay\n\nimport razorpay\n\nrazorpay.Client(auth=(\"\", \"\"))\n\npayment_id = \"\"\n\nrefund_id = \"\"\n\nresp = client.refund.fetch(paymentid, refundid)\n","id":56},{"title":"Supported Banks","desc":null,"url":"recurring-payments/bank-options","body":"\nThe supported options for enabling recurring payments are given below:\n\nCards\nEmandate\n\nCards\n\nThe following table shows the list of supported networks/banks for Credit and Debit cards:\n\nDebit Cards (Visa and Mastercard) | Credit Cards (Visa and Mastercard)\n\nCitibank | All Visa Credit Cards\n\nCanara | All Mastercard Credit Cards\n\nKotak Mahindra Bank |\n\nICICI Bank |\n\nEmandate\n\nThe following table lists the supported banks for Emandate payments with Netbanking.\n\n@// Generated using code. Run php artisan docs:emandate-banks-list inside api codebase to generate the table\n\nNetbanking Authentication\n\nS.No | Bank\n\n1 | ICICI Bank\n\n2 | Axis Bank\n\n3 | HDFC Bank\n\n4 | YES Bank\n\n5 | IDFC Bank\n\n6 | Central Bank of India\n\n7 | Bank of Baroda\n\nFetch Bank Codes\n\nTo fetch the bank codes use the following API:\n\n/banks\n\ncurl -X GET https://api.razorpay.com/v1/banks?key_id=\n\nkeyid string_ Mandatory\n: API key used to authenticate your API requests to Razorpay servers. You can access the API keys from the Razorpay Dashboard. You can generate a set of API keys one for each, Test and Live (Production) Mode.","id":57},{"title":"Create a Recurring Payment","desc":null,"url":"recurring-payments/create-recurring-payment","body":"\nOnce the Token status is confirmed, you can start creating recurring payments for the customer as per your billing cycle. Every time you create a recurring payment, you need to do the following:\n\nCreate a new Order\nCreate a Payment\n\nThe following illustration shows the create recurring payment step.\n\n@image rec-pmnts-4_1.png\n\nNote:\nIf you are using the Dashboard to create a recurring payment, you can skip Step 1 (Create a new Order) as Razorpay creates an Order at its backend on your behalf. Learn how to create a Recurring Payment using your Dashboard.\n\n1. Create a new Order\n\nLike any other payment, each recurring payment is also tied to a unique order. Associating a payment with an order makes it easier to query Razorpay systems, allows automatic capturing of payments, handles multiple payment attempts and has few more advantages.\n\nLearn how to create a new Order.\n\n2. Create a Payment\n\nAfter you have created a new Order, you can create a payment against the Order. There are two ways in which you can create a payment:\n\nUsing the Dashboard\nUsing APIs\n\nOnce our system validates the payment along with tokenid, a razorpaypayment_id is returned. In some cases, the payment entity returned is in created state and may take 1 working day for confirmation.","id":58},{"title":"Dashboard Operations","desc":"Learn how to create Recurring Payments using the Dashboard.","url":"recurring-payments/dashboard-operations","body":"\nDashboard Workflow\n\nTo create a Subscription using the Dashboard, you need to do the following:\n\nCreate an Authorization Link\nView the payment status\nSearch for the Token\nCharge the Token\n\nNote:\nIn the Dashboard workflow, Razorpay takes care of the customer and order creation process. So, you need not create these at your end.\n\n1. Create First Payment using Authorization Link\n\nTo create an Authorization Link:\n\nLog in to Razorpay Dashboard.\nNavigate to Subscription --> Authorization Links.\nClick +Create New Link.\nThis displays the Create Authorization Link window.\nEnter the following details:\n\n    Field | Description | Method\n    ---\n    Description | A brief description of the Authorization Link. | All methods\n    ---\n    Customer Name | Name of the customer. If you have already created a customer via APIs, you must enter the same Customer Name here. | All methods\n    ---\n    Customer Contact | Phone number and Email address of the customer. If you have already created a customer via APIs, you must enter the same Email address and Phone number here. | All methods\n    ---\n    Notify | There two ways in which you can send notifications:- SMS- Email | All methods\n    ---\n    Receipt No. | The order reference number created at your end. | All methods\n    ---\n    Expiry | The expiry date of the link. | All methods\n    ---\n    Payment Method | The mode of payment for the authentication payment: - Card - Emandate | All methods\n    ---\n    Amount | The payment amount (in Paise). | All methods\n    ---\n    Bank Details | This includes - Bank Name- IFSC | Emandate only\n    ---\n    Account Details | This includes- Beneficiary Name- Account Number | Emandate only\n    ---\n    Authentication | Currently we only support Netbanking authentication. | Emandate only\n    ---\n    Token Expiry | Expiry date of the Token. | Emandate only\n    ---\n    Token Max Amount | Maximum Token amount (in Rupees). | Emandate only\n    ---\n    Internal Notes | Notes for internal use. | All methods\n\nAfter you have finish filling in all the details, click Create Authorization Link.\nThis redirects you to the checkout page where the customer creates the First Payment.\n\nNote:\nYou can also create a First Payment via the API workflow, refer to API Reference.\n\nTip:\n The Razorpay Dashboard also allows you to create and issue Authorization Links in Batches. Learn how to create Authorization Links in Batch.\n\nOnce the First Payment is successfully created, you need to wait for the payment to reach the captured state.\n\n2. View the Payment Status\n\nWhenever a First Payment is created, the corresponding paymentid appears on the list of created payments along with its orderid.\n\nNote:If you have used an Authorization Link to create the First Payment, Razorpay automatically creates an Order for the payment.\n\nLearn about the different payment statuses.\n\n3. Search for the Token\n\nOnce the status of the First Payment is authorized, a Token is generated against the payment_id. This appears on the list of generated Tokens.\n\nNote: Tokens are not returned as a part of the checkout response. However, you can view them on the Dashboard. You can also view the details of the Token using APIs or Webhooks.\n\nLog in to Razorpay Dashboard.\nNavigate to Subscription --> Tokens.\nSearch for the Token using the token_id.\n\nOnce the Token is confirmed, you can charge the Token.\n\n4. Charge the Token\n\nOn the Dashboard, a recurring payments is created by charging the Token. Charging a token after it gets confirmed creates a recurring payment.\n\nTo charge a Token:\nLog in to Razorpay Dashboard.\nNavigate to Subscription --> Tokens.\nSearch for the Token using the token_id.\nClick on the token_id to open the details page.\nClick Charge Now to create a Subscription.\n\nLearn how to charge Tokens in a batch\n\nBatch Operations\n\nThe Razorpay Dashboard also allows you to create Subscriptions in Batches.\n\nFor larger businesses with the capability to process a large number of Emandate registration, Razorpay allows merchants to issue Authorization Links and create Subscriptions using associated Tokens in a batch. All you need to do is upload a single file (often called the batch file) that contains required details for a collection of orders. Razorpay generates and processes the Authorization Links in a batch instead of creating individual links.\n\nBatch Statuses\n\nStatus\nDescription\n\nCreated\nThis is the initial state of a batch. This indicates that the uploaded batch is created in Razorpay's database and is ready to be processed. No payments have been processed at this point.\n\nProcessed\nThis is the final state of a batch where payment details are processed and the corresponding Authorization Links are ready to be issued.\n\nBatch File Format\n\nA batch file is a simple .xlsx or .csv file that contains all the necessary details to create Authorization Links or Subscriptions for a list of receipts IDs or token_ids respectively.\n\nImportant\n - A batch file have a size upto 1 MB.\n -  You can add up to 5000 rows in a particular file.\n - The links are processed in the same sequence as listed in the file.\n - Field names/headers in a batch should not be modified in order avoid an upload failure.\n\nNote:\nEnsure that the column headers of the file are not edited as Razorpay uses the headers to identify the input data.\n\nCreate Authorization Links in a Batch\n\nTo create Authorization Links in a batch, download the CSV sample batch file, edit the file and add the required fields. The fields required to create an authorization link batch file are:\n\nHeader\nDescription\nMethod\n\nname\nName of the Customer. For example, Gaurav Kumar | All methods\n\nemail\nEmail address of the Customer. For example, gaurav.kumar@example.com | All methods\n\nphone\nContact number of the Customer like 9123456780 | All methods\n\namount\nThe order amount in Paise. 29935 for @data.Rs 299.35 | All methods\n\ncurrency\nThe currency of payment. Accepted currency is INR | All methods\n\nmethod\nPayment method. \"Card\" or \"Netbanking\" | All methods\n\ntokenexpiryby\nThe date and time of expiry for a mandate.Minimum value is 1 day. Defaults to 10 years for Emandate (Netbanking Auth).Maximum value is 12-31-2099.Supported formats:- DD-MM-YYYY HH:mm:ss (For example, 31-12-2019 00:59:59)- DD-MM-YYYY HH:mm- DD-MM-YYYY | emandate only\n\ntokenmaxamount\nMaximum amount for the Token (in Paise). Minimum value is 500. Defaults to 9999900 (maximum value) | emandate only\n\nauth_type\nThe payment authentication type. Currently we only support \"netbanking\" | All methods\n\nbank\nBank code to preselect a bank. For example, HDFC is the bank code for HDFC Bank. You could fetch bank codes using a GET request as shown below: https://@api.razorpay.com/v1/methods | emandate only\n\naccountholdername\nName of the account holder. For example, \"Gaurav Kumar\" | emandate only\n\nifsc\nIFSC of the bank. For example, HDFC0001234 | emandate only\n\naccount_number\nBank account number of the customer. For example, 0811238760 | emandate only\n\naccount_type\nType of bank account. This can have the following values: \"Savings\" or \"Current\" | emandate only\n\nreceipt\nOrder reference number. For example, receipt_1234 | All methods\n\ndescription\nPayment Description. For example, \"Funny story of an IAS officer wanting to be anything other than an IAS.\" | All methods\n\nlinkexpiryby\nDate and time of expiry for the Authorization links. Following is the supported format: DD-MM-YYYY (For example, 14-12-2019) | All methods\n\nnotes[custom 1]\nCustom notes. You can add up to 5 custom notes in the following format:notes[portfolio id] notes[transaction id] | All methods\n\nKeeping the\nOnce you have your CSV file ready, follow the below steps:\n\nLog in to Razorpay Dashboard.\nNavigate to Subscription --> Batch Upload.\nClick +Create New Batch.\nSelect the Authorization Links Batch Upload and select the file from your system.\n\nSample Batch File:\nDownload a sample Authorization Link CSV file.\n\nCreate Recurring Payments in a Batch\n\nTo charge tokens in a batch download the CSV file of the list of Tokens for Subscriptions have to be created and keep handy.\n\nTo process the Token/Emandate registration in bulk:\n\nLog in to Razorpay Dashboard.\nNavigate to Subscription --> Batch Upload.\nClick +Create New Batch.\nSelect the Upload Batch for Tokens and select the file from you system.\n\nThe file headers required to charge Tokens are explained below:\n\nHeader | Description | Method\n\ntoken\nUnique identifier of the generated Token. For example, token_4zwefDSCC829ma\nemandate only\n\ncustomer_id\nUnique identifier of the customer. For example, cust_6tyefDCIM834rr\nAll methods\n\namount\nThe recurring order amount (in Paise). For example, 29935 for @data.Rs 299.35\nAll methods\n\ncurrency\nThe currency of payment. Accepted currency is INR.\nAll methods\n\nreceipt\nOrder reference number. For example, receipt_1234\nAll methods\n\ndescription\nA Wild Sheep Chase is the third novel by Japanese author Haruki Murakami.\nAll methods\n\nnotes[custom 1]\nCustom notes. You can add up to 5 custom notes in the following format:notes[portfolio ID] notes[transaction id].\nAll methods\n\nSample Batch File:\nDownload the sample CSV batch file for creating recurring payments..csv)\n","id":59},{"title":"Frequently Asked Questions","url":"recurring-payments/faqs","body":"\n1. Which banks have enabled Subscriptions through Emandate?\nCurrently Subscriptions through Emandate is available on few banks. Additionally, there are 3 banks (ICICI, HDFC and Axis Bank) that also allow customers to setup standing instructions via Netbanking login as well.\n\n2. While creating the first payment, what additional data does the customer see on the bank’s platform?\nUpon creation of the first payment, customer would be shown the following with respect to the enablement:\npayment type (\"One-Time\" or \"Standing Instructions\")\nFrequency of recurring payments\nMaximum amount to be deducted\nExpiry date of standing instructions.\n\n3. How long does it take for the recurring_status to move from Initiated to Confirmed?\nIn case of credit cards, the status is updated in real-time. However, in case of Emandate, the process varies from bank to bank. ICICI Bank provides real-time update whereas updates from Axis and HDFC Bank can take upto 2 working days.\n\nBank\nTAT Guidelines\n\nCards (All Banks)\nReal-time\n\nAxis Bank\nReal-time\n\nICICI Bank\nReal-time\n\nHDFC Bank\nT+2 Working Days\n\nAll Banks (NPCI Emandate)\nT+2 Working Days\n\n4. How long does it take for a debit request to move from the Created state to the Authorized state?\nIn case of credit cards, the status is updated in real-time. However, in case of Emandate the process varies from bank to bank. If the Emandate is setup using Netbanking login, it can take upto 2 working days for payment authorization.\n\nBank\nTAT Guidelines\n\nCards (All Banks)\nReal-time\n\nICICI Bank\nReal-Time\n\nAxis (Netbanking Auth)\nSame Day\n\nHDFC Bank (Netbanking Auth)\nSame Day\n\nAll Banks (NPCI Emandate)\nSame Day\n\nAll Banks (Aadhaar Auth)\nSame Day\n\nNote:\nDebit schedule for Aadhaar Auth is applicable to all mandates registered on or before December 7, 2018. To ensure same day debit authorization, Razorpay must receive the request by 8:59 AM on a bank working day.\n\n5. Who controls the debit schedule frequency and amount?\nSubscriptions allows merchant to charge customers automatically at regular intervals that are defined and controlled by the merchant. Essentially, Razorpay processes recurring payments as-and-when-presented by the merchant.\n\n6. What is the settlement timeline for subsequent payments?\nThe complete settlement process takes T+3 working days, T being the date of payment capture. In certain cases, this could take longer if the settlement date falls on a bank holiday. In case the settlement is scheduled on a bank holiday; the settlement occurs on the next working day.\n\n7. How to track the status of subsequent payments?\nYou can track real-time status of payments as Created, Processed, Failed via Razorpay Dashboard or APIs.\n\n8. How do I track fund settlements?\nYou can track settlements using UTR (Unique Transaction Reference). The settlement report is available via the Razorpay Dashboard or via Settlement API.\n\n9. How can a customer cancel standing instructions on a credit card or Emandate?\nYou can call the API to Delete a Token to cancel the standing instruction or delete the recurring payment.\n\n10. I have a valid Token, but the recurring payment failed. What would be the reason?\nThere could be various reasons why a recurring payment could fail. The potential reason could be expired credit card, insufficient funds, credit card reported lost or stolen or recurring payment canceled directly from the bank.\n\n11. What is the maximum amount per debit request for Emandate?\nIn case of Emandate (Netbanking Auth), the maximum amount is @data.Rs 99,999.\n\n12. Can Subscriptions be used for current accounts as well?\nYes, merchants can use the Subscriptions on current accounts via debit cards and Emandate.\n","id":60},{"title":"First Payment","desc":"Create a customer, an order, pass authentication transaction, store recurring tokens to create recurring payments and use webhooks with Razorpay APIs.","url":"recurring-payments/first-payment","body":"\nWhat is a First Payment?\n\nThe first payment serves as an authorization to enable subscriptions on the customer's card or bank account. The customer authenticates the First Payment using either the 3D Secure (in case of Cards) or via Netbanking login. Subsequent payments are charged without their intervention.\n\nThe flow of the first payment after the merchant receives the service request from the customer is illustrated below:\n\n@image rec-pmnt-222.png\n\nHow to Create a First Payment?\n\nAs per the Razorpay payment flow, every payment must be associated with an order. For the first payment, the order amount for cards is a minimum of @data.Rs 1 and for Emandate is @data.Rs 0.\n\nThe First Payment can be created in the following ways:\nAuthorization Payment\nAuthorization Link\n\nA successful First Payment results in the creation of a Token.\n\nNote:A Token is not returned as a part of the Checkout response. However, you can retrieve a Token manually using APIs and Webhooks.\n\nAuthorization Payment\n\nAn authorization payment can be created by implementing the Razorpay Standard Checkout in your application with  additional checkout parameters.\n\nLearn more about the Razorpay Standard Checkout.\n\nAuthorization Payment Statuses\n\nOnce the customer has made the Authorization Payment, it moves through the following states as per the payment flow:\n\nStatus | Description | Notify via Webhook\n\nCreated | Payment is created when a customer enters and submits the payment information. | NA\n\nAuthorized | Payment is authorized when the customer’s payment details are successfully authenticated by the bank. | payment.authorized\n\nCaptured | Indicates that the payment is verified by the merchant.Once a payment is captured you can retrieve the Token. | payment.captured\n\nFailed | Indicates that the payment has failed.If the payment has failed, you need to create a First Payment again. | payment.failed\n\nAuthorization Link\nAuthorization Links are securely generated web addresses that allow your customers to create a First Payment. Authorization Links can be sent via SMS or email and can be created from the Dashboard or API.\n\nAuthorization Link Statuses\n\nAn Authorization Link moves through the following statuses:\n\nStatus | Description | Notify via Webhook\n\nIssued | Authorization Link is created and sent to the customer.  | NA\n\nPaid | Payment is made for the issued Authorization Link.Once the Authorization Link is paid, search for Token corresponding to the payment. | invoice.paid\n\nCancelled | Authorization Link has been canceled. In such cases, you need to create an Authorization Link again.| NA\n\nExpired | Authorization Link has expired. You can set an expiry timestamp at the time of creation. | invoice.expired\n","id":61},{"title":"Razorpay Subscriptions","desc":"Using Emandate for recurring payments, merchants can charge customers at-will on a periodic basis.","url":"recurring-payments","body":"\nRazorpay Subscriptions lets you create recurring payments for your customers at intervals that can be completely controlled and defined by you. Our powerful REST APIs lets you quickly set up Subscriptions for your customers.\n\nOverview\n\nIn India, recurring payments were restrictive in the past because of the RBI's requirement for a two-step verification process where the customer enters a One-Time Password (OTP), received via email or SMS, to complete a payment. Currently, due to the relaxation of this requirement, customers can now be charged automatically at periodic intervals that can be completely defined by the merchant.\n\nNote\nAs per RBI guidelines, recurring payments can be enabled only through cards (debit/credit) and Emandate (select banks only).\n\nRead more about Emandate.\n\nTerminology\n\nThe terminology used throughout this document helps understand the payment flow and integrate quickly.\n\nCustomer | The customer for whom Razorpay Subscriptions is to be enabled must be added as a Customer on the Razorpay platform.Customers can be created via API or Dashboard.\n\nOrder | Every payment should have an order associated with it. An order must be created for the First Payment and for every Recurring Payment.\n\nFirst Payment | The payment made by the customer to authorize the mandate registration.\n\nAuthorization Payment | One of the ways of creating a First Payment using the Razorpay Checkout script.\n\nAuthorization Link | One of the ways of creating a First Payment using a payment link. Authorization links can be created using API or Dashboard.\n\nToken | Token represents mandate registration.\n\nHow Subscriptions Work\n\nThe following scenario explains the creation flow for Subscriptions after the merchant receives the service request from the customer:\n\nMerchant creates a customer. Each customer has a unique customer_id which helps Razorpay identify the customer and create recurring payments for the same.\nMerchant creates an order. The Order created is for a minimum amount (₹1 for cards and ₹0 for Emandate).\nMerchant creates a First Payment against the Order.Customer makes the First Payment after accepting the standing instructions for processing future payments through the same card or bank account.\nMerchant retrieves the Token generated after the payment is successfully authorized and checks the status of the Token.\nWhen the Token status is confirmed, the merchant creates a new Order and creates a recurring payment.\n\n@image rec-pmnt00.png\n\nIntegration Flow\n\nA typical integration flow for Razorpay Subscriptions can be broken down to sequential steps:\n\nCreate a First Payment\n    Create First Payment using Authorization Payment\n        Create a Customer\n        Create an Order\n    OR\n    Create First Payment using an Authorization Link\nRetrieve the Token\nCreate a Recurring Payment\n    Create a new Order\n    Create a payment\n\nNote\nIf you use an Authorization Link to create the First Payment, Razorpay automatically creates a Customer and the Order on your behalf.\n\nIntegration Workflows\n\nRazorpay provides the following workflows to create a Subscription:\n\nAPI Workflow\nDashboard Workflow","id":62},{"title":"Notifications Using Webhooks","desc":"Webhooks are the best ways to receive alerts about the status of tokens and recurring payments as they happen.","url":"recurring-payments/using-webhooks","body":"\nYou can be notified of all the events pertaining to the payment states and the generated token in the recurring payments workflow using Razorpay Webhooks.\n\n[Learn more about Webhooks.](https://razorpay.com/docs/webhooks/integrations/\n)\n\nCheck Payment Status using Webhooks\n\nBefore we learn about the different webhook payloads, it is essential that you get familiar with the payment and tokens statuses. Sample payloads for the commonly used webhooks are described in the following sections.\n\nPayment Authorized\n\nPayment is Authorized when the customer’s payment details are successfully authenticated by the bank. The sample payload posted for the payment.authorized event is shown below:\n\n{\n  \"event\": \"payment.authorized\",\n  \"entity\": \"event\",\n  \"contains\": [\n    \"payment\"\n  ],\n  \"payload\": {\n    \"payment\": {\n      \"entity\": {\n        \"id\": \"pay_6X6jcHoHdRdy79\",\n        \"entity\": \"payment\",\n        \"amount\": 50000,\n        \"currency\": \"INR\",\n        \"status\": \"authorized\",\n        \"amount_refunded\": 0,\n        \"refund_status\": null,\n        \"method\": \"card\",\n        \"orderid\": \"order6X4mcHoSXRdy79\",\n        \"cardid\": \"card6GfX4mcIAdsfDQ\",\n        \"bank\": null,\n        \"captured\": true,\n        \"email\": \"gaurav.kumar@example.com\",\n        \"contact\": \"9123456780\",\n        \"description\": \"Payment Description\",\n        \"error_code\": null,\n        \"error_description\": null,\n        \"fee\": 200,\n        \"tax\": 10,\n        \"international\": false,\n        \"tokenid\": \"tokenr4hsbMHri87Yi1\", //token\n        \"notes\": {\n          \"reference_no\": \"848493\"\n        },\n        \"vpa\": null,\n        \"wallet\": null\n      }\n    },\n    \"created_at\": 1400826760\n  }\n}\n\nPayment Captured\n\nIndicates that the payment is verified by the merchant. Once a payment is captured you can create a Recurring Payment.\n\nThe sample payload posted for the payment.captured event is shown below:\n\n {\n  \"entity\": \"event\",\n  \"accountid\": \"accB54LDqLkIw2aEF\",\n  \"event\": \"payment.captured\",\n  \"contains\": [\n    \"payment\"\n  ],\n  \"payload\": {\n    \"payment\": {\n      \"entity\": {\n        \"id\": \"pay_BXHm4zbNltR4Q8\",\n        \"entity\": \"payment\",\n        \"amount\": 1000,\n        \"currency\": \"INR\",\n        \"status\": \"captured\",\n        \"orderid\": \"orderBXHkBuurztcKlv\",\n        \"invoice_id\": null,\n        \"international\": false,\n        \"method\": \"card\",\n        \"amount_refunded\": 0,\n        \"refund_status\": null,\n        \"captured\": true,\n        \"description\": null,\n        \"cardid\": \"cardBXHm62rsTZS5ZL\",\n        \"card\": {\n          \"id\": \"card_BXHm62rsTZS5ZL\",\n          \"entity\": \"card\",\n          \"name\": \"hdfc\",\n          \"last4\": \"1111\",\n          \"network\": \"Visa\",\n          \"type\": \"debit\",\n          \"issuer\": null,\n          \"international\": false,\n          \"emi\": false\n        },\n        \"bank\": null,\n        \"wallet\": null,\n        \"vpa\": null,\n        \"email\": \"gaurav.kumar@example.com\",\n        \"contact\": \"9123456780\",\n        \"notes\": {\n          \"key1\": \"value1\",\n          \"key2\": \"value2\"\n        },\n        \"fee\": 0,\n        \"tax\": 0,\n        \"error_code\": null,\n        \"error_description\": null,\n        \"created_at\": 1544710174\n      }\n    }\n  },\n  \"created_at\": 1544710176\n}\nPayment Failed\n\nIndicates that the payment has failed. If the payment fails, you need to create a First Payment again.\n\nThe sample payload posted for the payment.failed event is shown below:\n\n{\n  \"entity\": \"event\",\n  \"accountid\": \"accB54LDqLkIw2aEF\",\n  \"event\": \"payment.failed\",\n  \"contains\": [\n    \"payment\"\n  ],\n  \"payload\": {\n    \"payment\": {\n      \"entity\": {\n        \"id\": \"pay_BXHpCCmsR4ZyJG\",\n        \"entity\": \"payment\",\n        \"amount\": 1000,\n        \"currency\": \"INR\",\n        \"status\": \"failed\", //Indicates that the payment has failed\n        \"orderid\": \"orderBXHounyNAJKkOA\",\n        \"invoice_id\": null,\n        \"international\": false,\n        \"method\": \"card\",\n        \"amount_refunded\": 0,\n        \"refund_status\": null,\n        \"captured\": false,\n        \"description\": null,\n        \"cardid\": \"cardBXHpDEA487ujIp\",\n        \"card\": {\n          \"id\": \"card_BXHpDEA487ujIp\",\n          \"entity\": \"card\",\n          \"name\": \"hdfc\",\n          \"last4\": \"1111\",\n          \"network\": \"Visa\",\n          \"type\": \"debit\",\n          \"issuer\": null,\n          \"international\": false,\n          \"emi\": false\n        },\n        \"bank\": null,\n        \"wallet\": null,\n        \"vpa\": null,\n        \"email\": \"gaurav.kumar@example.com\",\n        \"contact\": \"9123456780\",\n        \"notes\": {\n          \"key1\": \"value1\",\n          \"key2\": \"value2\"\n        },\n        \"fee\": null,\n        \"tax\": null,\n        \"errorcode\": \"BADREQUEST_ERROR\",\n        \"error_description\": \"Payment failed\",\n        \"created_at\": 1544710351\n      }\n    }\n  },\n  \"created_at\": 1544710356\n}\nCheck Token Status using Webhooks\n\nToken Confirmed\n\nIndicates that the bank is processing the mandate registration. Once confirmed, your next step is to create recurring payment.\n\nSample payload for token.confirmed webhook is given below:\n\n{\n    \"entity\": \"event\",\n    \"accountid\": \"acc9uMVLUIRC372we\",\n    \"event\": \"token.confirmed\",\n    \"contains\": [\"token\"],\n    \"payload\": {\n        \"token\": {\n            \"entity\": {\n                \"id\": \"token_AJDwLBb57OxCPZ\",\n                \"entity\": \"token\",\n                \"token\": \"1I5HLSIqOUJj8M\",\n                \"bank\": \"ICICI\",\n                \"wallet\": null,\n                \"method\": \"emandate\",\n                \"recurring\": true,\n                \"auth_type\": \"netbanking\",\n                \"recurring_details\": {\n                    \"status\": \"confirmed\",\n                    \"failure_reason\": null\n                },\n                \"used_at\": 1528102822,\n                \"created_at\": 1528102822\n            }\n        }\n    },\n    \"created_at\": 1528102948\n}\n\nToken Rejected\n\nIndicates that the bank has completed the mandate registration. Once the token is rejected, you need to create the first payment again.\n\nSample payload when for a token.rejected is given below:\n\n{\n    \"entity\": \"event\",\n    \"accountid\": \"acc9uMVLUIRC372we\",\n    \"event\": \"token.rejected\",\n    \"contains\": [\"token\"],\n    \"payload\": {\n        \"token\": {\n            \"entity\": {\n                \"id\": \"token_AJDwLBb57O12ER\",\n                \"entity\": \"token\",\n                \"token\": \"1I5HLSIqOUJ7YT\",\n                \"bank\": \"ICICI\",\n                \"wallet\": null,\n                \"method\": \"emandate\",\n                \"recurring\": false,\n                \"auth_type\": \"netbanking\",\n                \"recurring_details\": {\n                    \"status\": \"rejected\",\n                    \"failure_reason\": \"Payment failed because of invalid account\"\n                },\n                \"used_at\": 1528102822,\n                \"created_at\": 1528102822\n            }\n        }\n    },\n    \"created_at\": 1528102948\n}\nCheck Authorization Link Status using Webhooks\n\nInvoice Paid\n\nThe invoice.paid is triggered when an invoice for the Authorization Link is successfully paid.A payment_id is created when an invoice is paid.\n\nSample payload of an invoice.paid webhook is given below:\n\n{\n  \"entity\": \"event\",\n  \"event\": \"invoice.paid\",\n  \"contains\": [\"payment\", \"order\", \"invoice\"],\n  \"payload\": {\n    \"payment\": {\n      \"entity\": {\n        \"id\": \"pay_5k7WN7vvxujrxn\",\n        \"entity\": \"payment\",\n        \"amount\": 10000,\n        \"currency\": \"INR\",\n        \"status\": \"captured\",\n        \"orderid\": \"order6koWN7bvxujzxM\",\n        \"invoiceid\": \"inv6GfX4mcIAdsfDQ\",\n        \"international\": false,\n        \"method\": \"card\",\n        \"amount_refunded\": 0,\n        \"refund_status\": null,\n        \"captured\": true,\n        \"description\": \"A Wild Sheep Chase is the third novel by Japanese author Haruki Murakami\",\n        \"cardid\": \"card6koWNAT6LASUqy\",\n        \"bank\": null,\n        \"wallet\": null,\n        \"vpa\": null,\n        \"email\": \"gaurav.kumar@example.com\",\n        \"contact\": \"9123456780\",\n        \"notes\": {\n          \"merchantorderid\": \"merchantreceiptid\"\n        },\n        \"fee\": 23000,\n        \"tax\": 3000,\n        \"error_code\": null,\n        \"error_description\": null,\n        \"created_at\": 1479978483\n      }\n    },\n    \"order\": {\n      \"entity\": {\n        \"id\": \"order_6koWN7bvxujzxM\",\n        \"entity\": \"order\",\n        \"amount\": 10000,\n        \"currency\": \"INR\",\n        \"receipt\": \"random\",\n        \"status\": \"paid\",\n        \"attempts\": 1,\n        \"notes\": [],\n        \"created_at\": 1479978483\n      }\n    },\n    \"invoice\": {\n      \"entity\": {\n        \"id\": \"inv_6GfX4mcIAdsfDQ\",\n        \"receipt\": null,\n        \"entity\": \"invoice\",\n        \"customerid\": \"cust6koWNAT6LASUqt\",\n        \"customer_details\": {\n          \"name\": \"test\",\n          \"email\": \"gaurav.kumar@example.com\",\n          \"contact\": \"9123456780\",\n          \"address\": null\n        },\n        \"orderid\": \"merchantreciept_id\",\n        \"line_items\": [],\n        \"paymentid\": \"pay5k7WN7vvxujrxn\",\n        \"status\": \"paid\",\n        \"issued_at\": null,\n        \"paid_at\": 1479978484,\n        \"sms_status\": \"sent\",\n        \"email_status\": \"sent\",\n        \"date\": null,\n        \"terms\": null,\n        \"amount\": 10000,\n        \"notes\": [],\n        \"currency\": \"INR\",\n        \"short_url\": \"http://bit.ly/3he311a\",\n        \"view_less\": true,\n        \"type\": \"link\",\n        \"created_at\": 1479978483\n      }\n    }\n  },\n  \"created_at\": 1479978484\n}\n\nInvoice Expired\n\nThe invoice.expired is triggered when an invoice for the authorization link has expired.\n\nThe sample payload given below is posted for the invoice.expired event:\n\n{\n  \"entity\": \"event\",\n  \"event\": \"invoice.expired\",\n  \"contains\": [\"invoice\"],\n  \"payload\": {\n    \"invoice\":{\n      \"entity\":{\n        \"id\":\"inv_6koWN7bvxujzxM\",\n        \"entity\":\"invoice\",\n        \"receipt\":null,\n        \"invoice_number\":null,\n        \"customerid\":\"cust6koWN7bvxujzxM\",\n        \"customer_details\":{\n          \"name\":\"test\",\n          \"email\":\"gaurav.kumar@example.com\",\n          \"contact\":\"9123456780\",\n          \"billing_address\":null,\n        },\n        \"orderid\":\"order6koWN7bvxujzxM\",\n        \"payment_id\":null,\n        \"status\":\"expired\",\n        \"expire_by\":1505201091,\n        \"issued_at\":1505088000,\n        \"paid_at\":null,\n        \"cancelled_at\":null,\n        \"sms_status\":\"sent\",\n        \"email_status\":\"sent\",\n        \"date\":null,\n        \"terms\":null,\n        \"partial_payment\":false,\n        \"gross_amount\":null,\n        \"tax_amount\":null,\n        \"amount\":10000,\n        \"amount_paid\":0,\n        \"amount_due\":10000,\n        \"currency\":\"INR\",\n        \"description\":null,\n        \"notes\":[],\n        \"comment\":null,\n        \"short_url\":\"https://rzp.io/xyzxyzx\",\n        \"view_less\":true,\n        \"billing_start\":null,\n        \"billing_end\":null,\n        \"type\":\"invoice\",\n        \"grouptaxesdiscounts\":false,\n        \"user_id\":null,\n        \"created_at\":1505201092\n      }\n    }\n  },\n  \"created_at\":1505201092\n}\n`","id":63},{"title":"API Reference","desc":"With Razorpay Route you can create payments, reverse payments, create direct transfers, transfer reversals, refund payments with Refunds API, settle/hold settlements.","url":"route/api-reference","body":"\nAll APIs described below use Basic Auth for authentication.\n\nAPI Endpoint: https://api.razorpay.com/v1\n\nAccount Management\n\nYou can onboard a vendor and manage his linked account on your Razorpay Dashboard.\n\nThe following details are required in order to create a linked account:\n\nPrimary details - linked account name, type, contact number\nBank details - account number, account type, IFSC, Beneficiary name.\nOnce an linked account is created, it will be assigned an account_id which can be used in the following APIs.\n\nFunds Movement in Linked Accounts\n\nCreating Payments\n\nYou can create and capture payments in the regular payments flow, using\nRazorpay Checkout and Payment APIs.\n\nFor disbursing payments on Razorpay Route, there is an additional step\nin the payment flow called transfers which is described below:\n\nCustomer pays the amount to your account using normal payment flow.\nOnce the payment is successful and marked as captured, you can now\ninitiate a payment transfer to linked accounts with a transfer API call.\nYou have to specify the details of the account_id and amount in the\nformat shown below:\n\n/payments/:id/transfers\n\n This API transfers a captured payment to one or more linked accounts using\n account_id. On successful transfer, the API will respond with a collection\n of transfer entities created for the payment.\n\nNote:\nAll our APIs take amount in Paisa, and not Rupees.\n\nTransfer Requirements\n\nThe transfer method requires your account to have sufficient funds to process\nthe transfer to linked account, and will fail incase of insufficient funds.\nOnly those payments that are in captured state are transferred.\nPayment transfer can be requested multiple times. This holds good as long as the total\ntransfer amount requested does not exceed the captured payment amount.\nPayments cannot be transferred after a refund is initiated on the payment_id.\n\nTransfer Entity\n\nThe attributes of the transfer entity are listed below:\n\nid string\n: Transfer ID\n\nsource string\n: Entity ID of the transfer source\n\nreceipt string\n: Entity ID of the transfer destination\n\namount integer\n: Transfer amount\n\ncurrency string\n: 3 character ISO currency code\n\namountreversed integer_\n: Amount reversed from this transfer for refunds\n\nnotes object\n: Optional. Notes is a key-value store you can use this for storing additional data relating to the entity in structured format.\n\nlinkedaccountnotes list\n: Optional. List of the keys from the notes object which needs to be shown to linked account on their dashboard.\n\nonhold boolean_\n: Boolean representing whether the account settlement for transfer is on hold\n\nonholduntil integer\n: TImestamp. Until when should the settlement of the transfer be put on hold.\n\ncreatedat timestamp_\n: UNIX timestamp of record creation.\n\nIn the sample request given, transfers to multiple linked accounts are\nspecified, each with a different amount. The payment transferred to these accounts\nwill be settled to their bank accounts as per the settlement_period defined for\neach linked account by you.\n\ncurl https://api.razorpay.com/v1/payments/pay_AlSXPEsTyXyxYx/transfers \\\n   -u : \\\n   -d 'transfers0=acc_BYYYYJRfs1234S' \\\n   -d 'transfers0=1000' \\\n   -d 'transfers0=INR' \\\n   -d 'transfers0[roll_no]=IEC2011025' \\\n   -d 'transfers0[name]=Gaurav Kumar' \\\n   -d 'transfers0[0]=roll_no' \\\n   -d 'transfers1=acc_BYYYYJRfs1234S' \\\n   -d 'transfers1=1000' \\\n   -d 'transfers1=INR' \\\n   -d 'transfers1[roll_no]=IEC2011026' \\\n   -d 'transfers1[name]=Saurav Kumar'\n{\n  \"entity\": \"collection\",\n  \"count\": 2,\n  \"items\": [\n    {\n      \"id\": \"trf_9A33XWu170gXBC\",\n      \"entity\": \"transfer\",\n      \"source\": \"pay_AlSXPEsTyXyxYx\",\n      \"recipient\": \"acc_BYYYYJRfs1234S\",\n      \"amount\": 10000,\n      \"currency\": \"INR\",\n      \"amount_reversed\": 0,\n      \"on_hold\": false,\n      \"notes\": {\n          \"roll_no\": \"IEC2011025\",\n          \"name\": \"Gaurav Kumar\"\n      },\n      \"linkedaccountnotes\" : [\"roll_no\"],\n      \"tax\": 16,\n      \"fees\": 4,\n      \"created_at\": 1482996461\n    },\n    {\n      \"id\": \"trf_9A33XWu170gYYY\",\n      \"entity\": \"transfer\",\n      \"source\": \"pay_AlSXPEsTyXyxYx\",\n      \"recipient\": \"acc_BYYYYJRfs1234S\",\n      \"amount\": 10000,\n      \"currency\": \"INR\",\n      \"amount_reversed\": 0,\n      \"on_hold\": false,\n      \"notes\": {\n          \"roll_no\": \"IEC2011026\",\n          \"name\": \"Saurav Kumar\"\n      },\n      \"tax\": 16,\n      \"fees\": 4,\n      \"created_at\": 1482996461\n    }\n  ]\n}\n\nPayment Transfer Illustration Test\n\nThe examples given below illustrates payment transferred to linked accounts and how the\ngateway fees apply to the transactions:\n\nTransfer Type\nOn Capture\nOn Transfer\n\nTransfer to single linked account  Payment Pricing plan - 2%, Transfer fees - 0.25%,  Payment amount = 1000, Merchant retained cut/commission = 100.  Transfers required: Linked Account 1 transfer = 900.\n\nGateway Fee  = Transaction Amount * Pricing Plan * ( 1 + GST Rate (18%) / 100 )  = 1000 * 2 / 100 * (1.18)  = 23.6.  Merchant account is credited with = (1000 - gateway fee) = 976.4.\n\nTransfer Fee  = Transfer Amount * Transfer fees (0.25%) * ( 1 + GST Rate (18%) / 100 )  = 900 * (0.25/100) * (1.18)  = 2.66 (rounded).  Merchant account will be debited with (900 + fees) = 902.66.  Linked Account 1 will be credited with 900.\n\nTransfer to 2 linked accounts  Payment Pricing plan - 2%,  Transfer fees - 0.25%, Payment amount = 1000, Merchant retained cut/commission = 0.  Transfers required: Linked Account 1 transfer = 300, Linked Account 2 transfer = 700.\n\nGateway Fee  = Transaction amount * pricing plan * ( 1 + GST Rate (18%) / 100 )  = 1000 * 2 / 100 * (1.18) = 23.6.  Merchant account credited with = (1000 - gateway fee) = 976.4.\n\nTransfer 1 Fee  = Transfer Amount * Transfer fees (0.25%) * ( 1 + GST Rate (18%) / 100 )  = 300 * (0.25/100) * (1.18)  = 0.89 (rounded).  Merchant account will be debited by (300 + fees) = 300.89.  Linked Account 1 will be credited with 300.  Transfer 2 Fee = Transfer Amount * Transfer fees (0.25%) * ( 1 + GST Rate (18%) / 100 = 700 * (0.25/100) * (1.18) = 2.07 (rounded).  Merchant account will be debited by (700 + fees) = 702.07.  Linked Account 2 will be credited with 700.\n\n/payments/:id/transfers\n\nThis API retrieves the collection of all transfers created on the payment_id.\n\ncurl /payments/pay_6ydSup2U7aFMsA/transfers \\\n   -u {KEY}:{SECRET}\n{\n  \"entity\": \"collection\",\n  \"count\": 2,\n  \"items\": [\n    {\n      \"id\": \"trf_6ydVYyzaICeIw5\",\n      \"entity\": \"transfer\",\n      \"source\": \"pay_6ydSup2U7aFMsA\",\n      \"recipient\": \"acc_a1b2c3d4e5f6g7\",\n      \"amount\": 10000,\n      \"currency\": \"INR\",\n      \"amount_reversed\": 0,\n      \"on_hold\": false,\n      \"created_at\": 1482996461,\n      \"recipientsettlementid\": null\n    },\n    {\n      \"id\": \"trf_6ydVZ7a3z4q50q\",\n      \"entity\": \"transfer\",\n      \"source\": \"pay_6ydSup2U7aFMsA\",\n      \"recipient\": \"acc_21t2c3gafu4sa2\",\n      \"amount\": 5000,\n      \"currency\": \"INR\",\n      \"amount_reversed\": 0,\n      \"on_hold\": false,\n      \"created_at\": 1482996461,\n      \"recipientsettlementid\": \"setl_8yROtr55jA8r5hf\"\n    }\n  ]\n}\n\nOnce the settlement against the transfer is processed, a webhook settlement.processed is sent which contains a recipientsettlementid. Refer the sample webhook payload.\n\nFetch Transfers for a Settlement ID\n\nThe following endpoint retrieves the collection of all transfers made for a particular recipientsettlementid.\n\n/transfers\n\nrecipientsettlementid string\n: The unique identifier of a settlement obtained from the settlement.processed webhook payload. A sample recipient settlement Id will look like this: setl_8yROtr55jA8r5hf\n\ncurl https://api.razorpay.com/v1/transfers?recipientsettlementid=setl_yROtr55jA8ire4 \\\n   -u {KEY}:{SECRET}\n{\n  \"entity\": \"collection\",\n  \"count\": 2,\n  \"items\": [\n    {\n      \"id\": \"trf_6ydVYyzaICeIw5\",\n      \"entity\": \"transfer\",\n      \"source\": \"pay_6ydSup2U7aFMsA\",\n      \"recipient\": \"acc_a1b2c3d4e5f6g7\",\n      \"amount\": 10000,\n      \"currency\": \"INR\",\n      \"amount_reversed\": 0,\n      \"on_hold\": false,\n      \"created_at\": 1482996461,\n      \"recipientsettlementid\": \"setl_yROtr55jA8ire4\"\n    },\n    {\n      \"id\": \"trf_6ydVZ7a3z4q50q\",\n      \"entity\": \"transfer\",\n      \"source\": \"pay_6ydSup2U7aFMsA\",\n      \"recipient\": \"acc_21t2c3gafu4sa2\",\n      \"amount\": 5000,\n      \"currency\": \"INR\",\n      \"amount_reversed\": 0,\n      \"on_hold\": false,\n      \"created_at\": 1482996461\n      \"recipientsettlementid\": \"setl_yROtr55jA8ire4\"\n    }\n  ]\n}\n\nFetch Settlement Details\n\nThe details of a settlement can be obtained by appending ?expand[]=recipient_settlement as query parameter to the fetch transfer request which would return a settlement entity along with the transfer entity.\n\ncurl https://api.razorpay.com/v1/transfers?expand[]=recipient_settlement \\\n   -u {KEY}:{SECRET}\n{\n  \"entity\": \"collection\",\n  \"count\": 2,\n  \"items\": [\n    {\n      \"id\": \"trf_6ydVYyzaICeIw5\",\n      \"entity\": \"transfer\",\n      \"source\": \"pay_6ydSup2U7aFMsA\",\n      \"recipient\": \"acc_a1b2c3d4e5f6g7\",\n      \"amount\": 10000,\n      \"currency\": \"INR\",\n      \"amount_reversed\": 0,\n      \"on_hold\": false,\n      \"created_at\": 1482996461,\n      \"recipientsettlementid\": \"setl_9RO6as5jA8iAFt\",\n      \"recipient_settlement\": {\n        \"id\": \"setl_9RO6as5jA8iAFt\",\n        \"entity\": \"settlement\",\n        \"amount\": 5000,\n        \"status\": \"created\",\n        \"fees\": 0,\n        \"tax\": 0,\n        \"utr\": \"KKBKH15401228484\",\n        \"created_at\": 1516348255\n      },\n    {\n      \"id\": \"trf_6ydVZ7a3z4q50q\",\n      \"entity\": \"transfer\",\n      \"source\": \"pay_6ydSup2U7aFMsA\",\n      \"recipient\": \"acc_21t2c3gafu4sa2\",\n      \"amount\": 5000,\n      \"currency\": \"INR\",\n      \"amount_reversed\": 0,\n      \"on_hold\": false,\n      \"created_at\": 1482996461,\n      \"recipientsettlementid\": \"setl_yROtr55jA8ire4\",\n      \"recipient_settlement\": {\n        \"id\":\"setl_yROtr55jA8ire4\",\n        \"entity\":\"settlement\",\n        \"amount\": 10000,\n        \"status\":\"created\",\n        \"fees\": 0,\n        \"tax\": 0,\n        \"utr\": \"KKBKH15401228481\",\n        \"created_at\": 1516348255\n      }\n    }\n  ]\n}\n\nRefunding Payments\n\nA payment can be refunded to a customer using Refunds API.\n\nWhen refunding a payment that has transfers, the amount for the refund is deducted\nfrom your main account balance. In order to recover the amount from linked accounts,\nthe reverse_all parameter can be set to 1 in the refund POST request. This will\nrecover the amount from linked accounts for every transfer made on the payment,\nbefore processing the refund to the customer.\n\nNote: The reverse_all attribute is optional. You may also choose to manually\nreverse transfers created on a payment by using the /transfers/:id/reversals which\nis described later in this document.\n\nAutomated Reversals\n\nReversals can be automated with the reverse_all attribute in the following refund\nscenarios:\n\nFull refund\nPartial refund for a payment transferred to a single account.\n\nFor partial refunds on a payment transferred to multiple accounts - the reverse_all\nparameter cannot be applied, since Razorpay cannot determine which transfer to\npartially reverse. You will have to use the transfer reversal API to achieve reversals\non this payment.\n\nIn the example given on the side, the amount specified in the amount parameter\n(that is, 15000) is the amount that will be refunded to the customer. The amount\nthat will be recovered from the linked accounts is the sum of all transfers made\nto each of those accounts, for the payment_id.\n\ncurl https://api.razorpay.com/v1/payments/pay_6ydSup2U7aFMsA/refund \\\n   -u {KEY}:{SECRET} \\\n   -d 'amount=15000' \\\n   -d 'reverse_all=1'\n\n{\n  \"id\": \"rfnd_6ye1vPrRFo6TdA\",\n  \"entity\": \"refund\",\n  \"amount\": 15000,\n  \"currency\": \"INR\",\n  \"paymentid\": \"pay6ydSup2U7aFMsA\",\n  \"notes\": {},\n  \"created_at\": 1482998305\n}\n\nA new reversal entity is created internally and linked for every reversals defined\nby the transfer_id.\n\nThe attributes of the reversal entity are defined below:\n\nid string\n: Reversal ID\n\ntransfer_id string\n: Transfer ID that was reversed.\n\namount integer\n: Amount reversed\n\ncurrency string\n: 3 character ISO currency code.\n\ncreated_at timestamp\n: Timestamp when the reversal was created.\n\nDirect Transfers\nYou can transfer funds to your linked accounts directly without linking any payments to\nit. With direct transfer, you can transfer an amount from your balance to the linked accounts'\nbalance.\n\n/transfers\nThis API creates a direct transfer of funds from your account to linked account.\nOn successful creation, the API responds with the created transfer entity.\n\ncurl https://api.razorpay.com/v1/transfers \\\n   -u {KEY}:{SECRET} \\\n   -d 'account=acc_7HGyrafdeQDGfX' \\\n   -d 'amount=10000' \\\n   -d 'currency=INR'\n\n{\n  \"id\": \"trf_714iNLGsd7k36a\",\n  \"entity\": \"transfer\",\n  \"source\": \"acc_7HGmqbWEdYI3cP\", // Marketplace's merchant ID\n  \"recipient\": \"acc_7HGyrafdeQDGfX\",\n  \"amount\": 10000,\n  \"currency\": \"INR\",\n  \"amount_reversed\": 0,\n  \"on_hold\": false,\n  \"tax\": 16,\n  \"fees\": 4,\n  \"created_at\": 1483528953\n}\n\nTransfer Reversals\n\nWhile a transfer moves funds from your account to linked accounts, a reversal\ncan move funds back into your account.\n\nReversal can be created on any transfer_id.\n\n/transfers/:id/reversals\n\nCreates a reversal entity and reverses the funds transferred from your account to\nthe linked account. Here, the amount specified is debited from the linked account\nbalance and credited to your balance.\n\nPartial reversals are also supported, and multiple reversals can be created on a\ntransfer_id. If the amount parameter is not provided in the request, the entire\namount of the transfer is reversed.\n\ncurl https://api.razorpay.com/v1/transfers/trf_9A33XWu170gXBC/reversals \\\n   -u : \\\n   -d 'amount=100'\n   -d 'transfers0[roll_no]=IEC2011025' \\\n   -d 'transfers0[name]=Gaurav Kumar' \\\n   -d 'transfers0[]=roll_no'\n{\n  \"id\": \"rvrsl_739ewoTuCmN8Y1\",\n  \"entity\": \"reversal\",\n  \"transferid\": \"trf9A33XWu170gXBC\",\n  \"amount\": 100,\n  \"currency\": \"INR\",\n  \"tax\": 16,\n  \"fees\": 4,\n  \"created_at\": 1483983046,\n  \"notes\": {\n          \"roll_no\": \"IEC2011025\",\n          \"name\": \"Gaurav Kumar\"\n      },\n  \"linkedaccountnotes\" : [\"roll_no\"]\n}\n\n/transfers/:id\n\nThis API retrieves a transfer entity by its transfer_id, as shown below:\n\ncurl https://api.razorpay.com/v1/transfers/trf_714iNLGsd7k36a \\\n   -u {KEY}:{SECRET}\n{\n  \"id\": \"trf_714iNLGsd7k36a\",\n  \"entity\": \"transfer\",\n  \"source\": \"acc_7HGmqbWEdYI3cP\", // Marketplace's merchant ID\n  \"recipient\": \"acc_7HGyrafdeQDGfX\",\n  \"amount\": 10000,\n  \"currency\": \"INR\",\n  \"amount_reversed\": 0,\n  \"on_hold\": false,\n  \"created_at\": 1483528953\n}\n\nLinked Account Payment Settlements\nThe merchant has complete control over settlements to linked accounts. Transfers\nare settled to linked accounts as per the settlement_period defined for the account.\nYou can also choose to hold account settlements per transfer or per linked account.\n\nHolding Settlements For Transfers\nWhen transferring a payment to an account, you can choose to put the transfer on hold\nindefinitely or until a defined time. These settings can be toggled or modified anytime\nvia the API provided, until the settlement is made. When a transfer is put on hold, the\nsettlement for the linked account is deferred until the hold is released.\n\nThe following parameters can be sent for each transfer in the payment transfer API defined\nabove:\n\non_hold Boolean (0 / 1)\n: If set to 1, the transfer is put on hold and settlement to the linked account is deferred\nuntil the hold is removed.\n(Default: 0)\n\nonholduntil Integer\n: Epoch timestamp. If set, Razorpay will hold the settlement of the transfer to the linked\naccount until the timestamp provided elapses.\n\nExamples\n\non_hold parameter\nSuppose the settlement scheduled for a linked account - acc_a1b2c3d4e5f6g7\nwas defined as T+10 days, the transfer created with the request defined below\nwill not be settled after 10\ndays - as long as the hold is maintained. If the hold is disabled on T+15, the\namount will be settled to the linked account by the next working day.\n\nonholduntil parameter\nIf a transfer is created with onholduntil timestamp defined, we will hold the\nsettlement of this transfer to the linked account until the timestamp defined has\nelapsed. Once elapsed, the transfer amount will be settled to the linked account by\nthe next working day.\n\nWhen using this parameter, on_hold must be sent and set to 1. Additionally,\nthe timestamp value provided must be greater than the current timestamp.\n\nSettlement Schedule Override\n\nThe settlement schedule defined for the linked account takes higher preference over\nthe onhold and onhold_until functionality. This simply means that defined\nsettlement schedule is the the minimum time required for the transfer to be settled.\n\nExamples:\nFor a T+10 settlement schedule -\n\nIf a transfer was created with on_hold=1 and then released on day T+7, the settlement\nwill only go out on day T+10.\nIf a transfer was created with onhold=1 and onhold_until=1491567400 (assume the\ntimestamp 1491567400 corresponds to 7 days after transfer) - then transfer's on_hold\nwill change to false on day T+7, but the settlement will only go out on day T+10.\n\nIn the example request given below, a transfer of INR 10000 to accountid acca1b2c3d4e5f6g7\nis created and put on hold.\n\ncurl https://api.razorpay.com/v1/payments/pay_6ydSup2U7aFMsA/transfer \\\n   -u {KEY}:{SECRET} \\\n   -d 'transfers0=acc_a1b2c3d4e5f6g7' \\\n   -d 'transfers0=10000' \\\n   -d 'transfers0=INR' \\\n   -d 'transfers0=1'\n\n{\n  \"entity\": \"collection\",\n  \"count\": 1,\n  \"items\": [\n    {\n      \"id\": \"trf_6ydVYyzaICeIw5\",\n      \"entity\": \"transfer\",\n      \"source\": \"pay_6ydSup2U7aFMsA\",\n      \"recipient\": \"acc_a1b2c3d4e5f6g7\",\n      \"amount\": 10000,\n      \"amount_reversed\": 0,\n      \"on_hold\": true,\n      \"tax\": 16,\n      \"fees\": 4,\n      \"created_at\": 1482996461\n    }\n  ]\n}\n\n/transfers/:id\n\nThe transfer hold settings can be modified anytime by sending a PATCH request on the transfer_id.\nOn successful request, the API responds with the modified transfer entity.\n\nNote: You cannot change this setting after the transfer has been settled to the linked account.\n\ncurl -XPATCH https://api.razorpay.com/v1/transfers/trf_6ydVYyzaICeIw5 \\\n   -u {KEY}:{SECRET} \\\n   -d 'on_hold=1'\n{\n  \"id\": \"trf_6ydVYyzaICeIw5\",\n  \"entity\": \"transfer\",\n  \"source\": \"pay_714hrl4xiFqxpA\",\n  \"recipient\": \"cust_70dOp5b7dFEeQl\",\n  \"amount\": 10000,\n  \"currency\": \"INR\",\n  \"amount_reversed\": 0,\n  \"on_hold\": true,\n  \"tax\": 16,\n  \"fees\": 4,\n  \"created_at\": 1483528953\n}\n\nWebhooks\n\nGetting notified about processed settlements gives you more control over the transfers made towards the linked accounts. When a settlement against a transfer is processed, a webhook event called settlement.processed is triggered which notifies your system about the same by POSTing a JSON sample payload. An example payload for this webhook event is given below:\n\n{\n  'entity':'event',\n  'accountid':'acc6koWN7bvxujzxM',\n  'event':'settlement.processed',\n  'contains':['settlement'],\n  'payload':{\n    'settlement': {\n      'entity':\n        {\n          'id':'setl_9RNjHCsa88ldH4',\n          'entity':'settlement',\n          'amount':29900,\n          'status':'processed',\n          'fees':0,\n          'tax':0,\n          'utr':'KKBKH15401228484',\n          'created_at':1516346930\n        }\n      }\n    },\n    {\n    'created_at':1516346932\n    }\n    'webhook_id': '9RNjGS70SODdmX'\n}\n\n  Note: Since the transaction is processed, the payload will include the UTR number.\n\nYou can integrate this webhook and receive the payload as and when the settlement.processed event occurs. Learn how to integrate webhooks in your application.\n","id":64},{"title":"Razorpay Route","desc":"You can split payments between third parties and manage settlements, refunds, and reconciliations on Razorpay Route by creating linked accounts.","url":"route","body":"\nIntroduction\n\nRazorpay Route allows you to take charge of your payouts to different stakeholders\nin a single platform. It lets you split payments between various third parties,\nsellers or bank accounts and manage settlements, refunds, and reconciliations\nsingularly. This solution is fit for any business that needs to disburse payments\nin one-to-many model.\n\nRazorpay Route eases out payment complexity that inherently arises while working\nwith multiple vendors or accounts.\n\n@image route_introduction.png\n\nUse Cases\nListed below are business models across industries that can benefit from Razorpay\nRoute:\n\nMultiple Bank Accounts\nA business can have multiple bank accounts for various reasons and may want to\nroute payments to these accounts based on some rules, such as:\nRoute payments based on geography\nCentralize and schedule payouts to bank accounts based on business requirement\nControl settlement schedules for each account.\n\nFor example, Acme Corporation is a business operating in various locations in\nIndia such as Chennai, Bangalore, Hyderabad, Lucknow, Delhi, etc. It collects\npayments centrally and disburses payments via bank accounts created for every\nlocation. If Chennai location makes a sale of say @data.Rs 10,000 for the month and\nHyderabad location makes @data.Rs 15,000, Acme Corporation has to process the respective\npayouts and decide the settlement schedules for each.\n\nOnline Marketplace\nA business that is essentially a platform created by a merchant but the products\nand services being sold by this merchant are provided through third party sellers too.\n\nLet’s take an example: an e-commerce site is run by Acme Corporation. When a\ncustomer buys a phone (₹ 10,000, let’s say) and a case (₹ 500, let’s say) for\nit, the phone could be sold by Seller A, while the case by Seller B. Acme\nCorporation collects the payment from the customer and then has to send the\nmoney over to Seller A and Seller B. Acme Corporation will probably also charge\nthese sellers because their platform was used.\n\nOn Demand Services\nBusinesses that offer its customers various services like home repairs, delivery\nand courier, health and wellness, etc. and need to make payouts to service providers\non demand.\n\nTake for example, a company, Acme Corporation that provides various services to\nits customers and routes payments to its service providers based on the services\nrendered. Let’s say, a customer avails plumber’s service worth ₹ 1500, and an\nelectrician’s service worth ₹ 1000, Acme Corporation would have to split payments\nagainst the service provided for each service provider after deducting the commission\ncharges.\n\nBuild Your Custom Use Case\nRazorpay Route can be extended and utilised in all models where you need to\nautomate disbursal of funds to one or more bank accounts. If you'd like to\nexplore how Razorpay Route will best fit your unique business model, you can get in touch with us at razorpay.com/support for any queries.\n\nPrerequisites\n\nThe Razorpay Route platform is based upon Razorpay’s existing payment flow, which\nis described here. If you are new\nto Razorpay, we recommend understanding this before you go ahead with the rest\nof the document.\n\nWhat We Offer\n\nWith Razorpay Route, you can manage, control and get complete visibility\nof fund movements between you, your sellers and customers alike. As a\nmerchant, you take charge of what funds needs to be transferred,\nrefunded, and settled, a la carte.\n\nBy simply onboarding your sellers as Linked Accounts on Razorpay’s platform,\nyou can get started with moving your funds to your seller accounts.\n\nWith Razorpay Route, you will be able to:\nCreate and manage linked accounts\nSplit payments and transfer funds to multiple linked accounts\nCreate reversals of transferred funds and manage customer refunds with\nautomated reversals\nManage linked account settlements\nMove from manual and file based reconciliation to completely API driven, and more\n\nUsing Webhooks\n\nYou can enable the webhook settlement.processed to receive webhook alerts when a transfer made to a linked account is settled. A sample webhook payload for the webhook settlement.processed is available here. To learn more about our Webhooks click here.\n\nTerms Used\n\nLinked Accounts\n: Accounts created for third party sellers by the merchant after\nonboarding them onto the Razorpay platform.\n\nOnboarding\n: The process of adding individual sellers to the Razorpay platform by the merchant.\nThis process requires submission and verification of mandatory documents.\n\nFunds\n: Payments collected from the customer against an order placed on the e-commerce site.\n\nTransfer\n: The process of moving funds from the merchant’s account to the\nlinked account.\n\nReversal\n: The process of moving the transferred funds back to the merchant’s\naccount, which is initiated by the merchant.\n\nSettlement\n: The process of completing a payment transaction, wherein Razorpay\ndoes a transfer of pending funds to the bank account of the merchant and their linked accounts.\n\nRefund\n: The process of returning funds to the customers from linked accounts.\n","id":65},{"title":"Account Onboarding","desc":"Add vendors to transfer payments on Razorpay Route via Dashboard by creating linked accounts. You need to add primary details and bank details.","url":"route/onboarding","body":"To start moving funds to your seller accounts, you need to onboard your sellers\nto Razorpay Route first. You can onboard these sellers on the Razorpay Dashboard.\n\nWhen you onboard a seller, a linked account is created which essentially allows\nyou to view and manage all fund movements such as transfers, reversals, refunds,\netc. thus giving you complete visibility and control.\n\nEvery linked account has a unique account_id which should be stored in\nyour database. This ID should be sent in the various API's described in further\nsections to identify the linked account.\n\n Note: After onboarding an account, the linked account gets activated immediately and funds can be transferred right away. However, it takes 2 working days for the linked account settlements, irrespective of your settlement schedule.\n\nRequired Details\n\nThe following details are collected by us during the account onboarding -\n\nPrimary details\n: 1. Linked Account name\n  Contact number\n\nBank details\n: 1. Account number\n  Account type\n  IFSC\n  Beneficiary name\n\nGrant Dashboard Access to Linked Accounts\n\nYou can grant dashboard access to your linked accounts. Once the access is granted, the linked account can log in with an existing email address or can directly add and edit an email address.\n\nThe recipient linked account would be notified of this action via mail along with a password reset option.\n\nDashboard Access\nOnce logged in, linked accounts can invite other team members to manage their account.\n\nThe whole linked account dashboard is read-only.\n\nNote\n- You can grant dashboard access to linked accounts only if they have provided an email address for those accounts.\n- You cannot access the linked account dashboard unless they add you as a team member from their linked account dashboard. This is not required as you can view all the details and reports of the linked account on your own dashboard.\n","id":66},{"title":"Route Operations","desc":"With Razorpay Route, create payments, transfers, direct transfers, reversals and schedule payment settlements by using settlements on hold and on hold until parameters.","url":"route/operations","body":"Transfers and Reversals are the two core operations that enable you to move\nfunds between you and your linked accounts. This section of the document\ndescribes these operations and its features.\n\nAs a merchant, you can transfer funds to single or multiple linked\naccounts, create refunds, reversals and define settlement cycles for your\nsellers.\n\nAll fund movements are initiated only by you, as a merchant and any\nmovement of funds can be viewed and tracked via the Dashboard and API.\n\nPayments on Razorpay Route\nRoute operations apply on payments that have been captured. The\nPayment Flow explains the\ndifferent states of a payment.\n\nIf you are an existing Razorpay merchant, your current Razorpay integration for\naccepting payments from customers will stay exactly the same with no changes.\nWith Razorpay Route enabled, you will have the option of transferring these\npayments to linked accounts. Any payment amount that is not transferred will\nbe settled to your bank account as it usually does.\n\nTransfers\nBased on the payments you receive, you can initiate funds transfer to your\nlinked accounts. You can also delay transfer settlements, if need be. You can\ntransfer the entire payment amount captured to a linked account, provided you have\nthe required balance in your Razorpay account.\n\nOnce the transferred amount is settled, a settlement.processed webhook is triggered.\n\nNote: Only those payments that have been captured can be transferred. See\nPayment Flow to know about how to\ncapture payments.\n\nThe flow in which the funds move here are:\nCustomer makes a purchase on the merchant site.\nMerchant transfers the funds to their linked accounts. The merchant can choose\nto,\n    Defer the transfer from being settled.\n    Define a time until which the transfer settlement should be delayed\nRazorpay settles funds to the linked account and sends a webhook payload to the merchant.\n\n@image route_transfers.svg\n\nDirect Transfers\nIn general, Razorpay expects all transfer requests to have a source payment.\nHowever, in order to enable specific business use-cases, we provide an option of\ncreating direct transfer of funds from merchant to linked account.\n\nReversals\n\nWhen funds transferred to your linked account needs to be reversed for reasons\nsuch as refund, adjustment, etc. you can initiate a reversal operation. You can\ninitiate a partial reversal or reversal upto the amount originally transferred.\n\nYou can reverse fund transfers even after they have been settled to a linked\naccount, as long as there is a floating balance available in the linked\naccount.\n\nFor all refund requests made by the end customer, the funds transfer takes place\nfrom your primary account. Therefore, as a merchant, you need to initiate a reversal\nof funds from your linked accounts and also initiate the\nrefund to the customer. You have the flexibility to perform refunds and\nreversals independently.\n\nAdditionally, Razorpay provides an automated method of reversing funds before a\nrefund. On enabling the Reverse All option on a payment refund request, we will\nfirst automatically reverse all transfers made on the payment, before refunding\nthe payment to the customer.\n\n@image route_reversals.svg\n\nScheduling Settlements\n\nYou can assign a settlement cycle for your linked accounts and update it\nanytime. By default, every new linked account is created with the same\nsettlement schedule assigned to your main account. For Example - If your\nmain Razorpay account has a T+3 schedule, all linked accounts you create\nwill also have a T+3 schedule by default.\n\nNote: At the moment, linked account settlement schedules can be assigned or\nupdated by reaching out to us at https://razorpay.com/support.\nThe API for this will be made available shortly.\n\nSettlement schedules for linked accounts may only be set to a minimum of the\nschedule assigned to merchant's account.\n\nIn addition to the account-level schedule explained above, you can also define\nwhen each individual transfer should be settled by making use of the two\nfollowing options:\n\nOn hold\nBy default, all transfers will be settled according to the settlement schedule\ndefined for the linked account. You can choose defer settlements for a transfer\nindefinitely. Settlement for the transfer will only be initiated once you allow\nit.\n\nOn hold until\nYou can set a time until which the settlement for the transfer should defer.\nOnce this time has elapsed, Razorpay will settle the funds to the linked account\non the next business day. For example, if you had sent us a onholduntil\ntimestamp corresponding to 7:00 PM on 23/03/2017, we will settle the amount to the\nlinked account on 24/03/2017.\n\nYou can modify the above mentioned transfer settlement options via the API or\nDashboard. On enabling the settlement, the originally defined settlement\nschedule will apply.\n\nFor example, on a T+3 cycle -\nIf a transfer was created with settle = false and set to true after 10 days,\nthe settlement for that transfer will happen immediately (during bank business\nhours).\nIf the transfer settlement was allowed on T+1 though, the settlement will\nhappen only on T+3.\n","id":67},{"title":"Other Features","url":"route/others","body":"\nLinked Account API Access\nYou can access the various Razorpay APIs as a linked account. This allows\nyou to, for example, fetch a list of all the payments received by a linked\naccount using the GET \\payments API. To achieve this, you need to send the\nlinked account ID in the X-Razorpay-Account API request header, as shown in\nthe cURL example given below:\n\ncurl https://api.razorpay.com/v1/payments \\\n   -u {KEY}:{SECRET} \\\n   -H \"X-Razorpay-Account: acc_a1b2c3d4e5f6g7\"\n\nThe request given above will fetch the list of payments for account_id -\nacc_a1b2c3d4e5f6g7\n","id":68},{"title":"Reporting Options","desc":"Generate Razorpay Route reports for transfers, reversals and a combined report for all transactions for linked accounts. Export these reports from Dashboard or API.","url":"route/reporting","body":"\nSettlement Reports\n\nYou can export reports related to all movements of funds between your account and your linked accounts through Razorpay Dashboard and also via APIs.\n\nThe settlement recon API returns a detailed report of all the settlement made towards your account thereby allowing you to easily verify transactions and reconcile payments if necessary. These reports can be exported for each linked account. You can even fetch a consolidated report containing transactions for all linked accounts.\n\nThis report can be fetched for each of your linked accounts as well.\n\nTransfers and Reversals Report:\nYou have the option of fetching reports for all transfer and reversal operations on your account.\n\nLearn how to generate settlement reports via APIs.","id":69},{"title":"API Reference","desc":"Razorpay Smartcollect APIs lets you create, fetch, fetch all, close, fetch payments and payment details of virtual account. Find sample request/ response here.","url":"smart-collect/api","body":"\nBase URL: https://api.razorpay.com/v1/\n\nThe virtual account response contains attributes such as id and customer_id, and also a field receivers. This is an array that defines what receivers are available for the virtual account.\n\nFor example, if the receiver.types array of the original request contained bankaccount, then the response will contain a receivers array with one element, which gives details of that bankaccount receiver such as account number,  IFSC, etc.\n\nCreate\n\n  The request format for virtual account creation recently underwent a change. If you are looking for the request format as it was before 21/11/17, you can find it here.\n\n  For new integrations, we strongly recommend you use the updated request format, as it allows a host of new features, most particularly the support for completely-numeric account numbers by default.\n\nAttribute                | Mandatory/Optional (in request) | Type        | Description\n\nreceivers              | Mandatory                       | JSON Object | Configuration of desired receivers for the virtual account\n\nreceivers.types        | Mandatory                       | array       | List of desired receiver types. Currently bank_account is the only supported type.\n\ndescription            | Optional                        | string      | Description of the virtual account\n\ncustomer_id            | Optional                        | string      | ID of customer for whom virtual account is being created. Refer Customer API\n\nnotes                  | Optional                        | JSON object | Object consisting of key value pairs as notes. Refer here for more details.\n\n/virtual_accounts\n\ncurl -u rzptest26ccbdbfe0e84b:69b2e24411e384f91213f22a \\\n   -X POST \\\n   -H \"Content-Type: application/json\" \\\n   --data '\n    {\n      \"receivers\": {\n        \"types\": [\n          \"bank_account\"\n        ]\n      },\n      \"description\": \"First Virtual Account\",\n      \"customerid\": \"cust805c8oBQdBGPwS\",\n      \"notes\": {\n        \"referencekey\": \"referencevalue\"\n      }\n    }\n   ' \\\n   https://api.razorpay.com/v1/virtual_accounts\n{\n  \"id\": \"va_4xbQrmEoA5WJ0G\",\n  \"entity\": \"virtual_account\",\n  \"description\": \"First Virtual Account\",\n  \"customerid\": \"cust805c8oBQdBGPwS\",\n  \"status\": \"active\",\n  \"amount_paid\": 0,\n  \"notes\": {\n    \"referencekey\": \"referencevalue\"\n  },\n  \"receivers\": [\n    {\n      \"id\": \"ba_4lsdkfldlteskf\",\n      \"entity\": \"bank_account\",\n      \"name\": \"Merchant Billing Label\",\n      \"account_number\": \"11122219877893452\",\n      \"ifsc\": \"RAZR0000001\"\n    }\n  ],\n  \"created_at\": 1455696638\n}\n\nFetch\n/virtual_accounts/:id\n\ncurl -u rzptest26ccbdbfe0e84b:69b2e24411e384f91213f22a \\\n   -X GET \\\n   https://api.razorpay.com/v1/virtualaccounts/va4xbQrmEoA5WJ0G\n{\n  \"id\": \"va_4xbQrmEoA5WJ0G\",\n  \"entity\": \"virtual_account\",\n  \"description\": \"First Virtual Account\",\n  \"customerid\": \"cust805c8oBQdBGPwS\",\n  \"status\": \"active\",\n  \"amount_paid\": 900,\n  \"notes\": {\n    \"referencekey\": \"referencevalue\"\n  },\n  \"receivers\": [\n    {\n      \"id\": \"ba_4lsdkfldlteskf\",\n      \"entity\": \"bank_account\",\n      \"name\": \"Merchant Billing Label\",\n      \"account_number\": \"11122219877893452\",\n      \"ifsc\": \"RAZR0000001\"\n    }\n  ],\n  \"created_at\": 1455696638\n}\n\nFetch All\n\n/virtual_accounts\n\ncurl -u rzptest26ccbdbfe0e84b:69b2e24411e384f91213f22a \\\n   -X GET \\\n   https://api.razorpay.com/v1/virtual_accounts\n{\n  \"entity\": \"collection\",\n  \"count\": 2,\n  \"items\": [\n    {\n      \"id\": \"va_84lyVss1CRZ6eM\",\n      \"entity\": \"virtual_account\",\n      \"name\": \"Merchant Billing Label\",\n      \"description\": \"Second Virtual Account\",\n      \"status\": \"active\",\n      \"amount_paid\": 1200,\n      \"notes\": [],\n      \"customer_id\": null,\n      \"receivers\": [\n        {\n          \"id\": \"ba_87txVas2oSzzvx\",\n          \"entity\": \"bank_account\",\n          \"name\": \"Merchant Billing Label\",\n          \"account_number\": \"11122293452198778\",\n          \"ifsc\": \"RAZR0000001\"\n        }\n      ],\n      \"created_at\": 1497873405\n    },\n    {\n      \"id\": \"va_4xbQrmEoA5WJ0G\",\n      \"entity\": \"virtual_account\",\n      \"name\": \"Merchant Billing Label\",\n      \"description\": \"First Virtual Account\",\n      \"status\": \"active\",\n      \"amount_paid\": 900,\n      \"notes\": {\n        \"referencekey\": \"referencevalue\"\n      },\n      \"receivers\": [\n        {\n          \"id\": \"ba_4lsdkfldlteskf\",\n          \"entity\": \"bank_account\",\n          \"name\": \"Merchant Billing Label\",\n          \"account_number\": \"11122219877893452\",\n          \"ifsc\": \"RAZR0000001\"\n        }\n      ],\n      \"customerid\": \"cust805c8oBQdBGPwS\",\n      \"created_at\": 1497922042\n    }\n  ]\n}\n\nClose\n\n/virtual_accounts/:id\n\ncurl -u rzptest26ccbdbfe0e84b:69b2e24411e384f91213f22a \\\n   -X PATCH \\\n   -H \"Content-Type: application/json\" \\\n   --data '{\"status\": \"closed\"}'\n   https://api.razorpay.com/v1/virtualaccounts/va4xbQrmEoA5WJ0G\n{\n  \"id\": \"va_4xbQrmEoA5WJ0G\",\n  \"entity\": \"virtual_account\",\n  \"description\": \"First Virtual Account\",\n  \"customerid\": \"cust805c8oBQdBGPwS\",\n  \"status\": \"closed\",\n  \"amount_paid\": 900,\n  \"notes\": {\n    \"referencekey\": \"referencevalue\"\n  },\n  \"receivers\": [\n    {\n      \"id\": \"ba_4lsdkfldlteskf\",\n      \"entity\": \"bank_account\",\n      \"name\": \"Merchant Billing Label\",\n      \"account_number\": \"11122219877893452\",\n      \"ifsc\": \"RAZR0000001\"\n    }\n  ],\n  \"created_at\": 1455696638\n}\n\nFetch Payments\n\n/virtual_accounts/:id/payments\n\ncurl -u rzptest26ccbdbfe0e84b:69b2e24411e384f91213f22a \\\n   -X GET \\\n   https://api.razorpay.com/v1/virtualaccounts/va84lyVss1CRZ6eM/payments\n{\n  \"count\": 2,\n  \"entity\": \"collection\",\n  \"items\": [\n    {\n      \"id\": \"pay_29QQoUBi66xm2f\",\n      \"entity\": \"payment\",\n      \"amount\": 200,\n      \"currency\": \"INR\",\n      \"status\": \"captured\",\n      \"amount_refunded\": 0,\n      \"refund_status\": null,\n      \"error_code\": null,\n      \"error_description\": null,\n      \"customer_id\": null,\n      \"notes\": [],\n      \"contact\": null,\n      \"method\": \"bank_transfer\",\n      \"captured\": true,\n      \"email\": null,\n      \"created_at\": 1400826750\n    },\n    {\n      \"id\": \"pay_19btGlBig6xZ2f\",\n      \"entity\": \"payment\",\n      \"amount\": 1000,\n      \"currency\": \"INR\",\n      \"status\": \"captured\",\n      \"amount_refunded\": 0,\n      \"refund_status\": null,\n      \"error_code\": null,\n      \"error_description\": null,\n      \"customer_id\": null,\n      \"notes\": [],\n      \"contact\": null,\n      \"method\": \"bank_transfer\",\n      \"captured\": true,\n      \"email\": null,\n      \"created_at\": 1400826750\n    }\n  ]\n}\n\nFetch Payment Details\n\n/payments/:id/bank_transfer\n\ncurl -u rzptest26ccbdbfe0e84b:69b2e24411e384f91213f22a \\\n   -X GET \\\n   https://api.razorpay.com/v1/payments/pay8JpVEWsoNPKdQh/banktransfer\n{\n  \"paymentid\": \"pay8JpVEWsoNPKdQh\",\n  \"mode\": \"UPI\",\n  \"bank_reference\": \"808917054122\",\n  \"amount\": 900,\n  \"payerbankaccount\": {\n    \"id\": \"ba_8JpVEbAkzgjtuB\",\n    \"entity\": \"bank_account\",\n    \"account_number\": \"765432123456789\",\n    \"ifsc\": \"RAZR0000001\",\n    \"name\": \"Merchant Billing Label\"\n  },\n  \"virtual_account\": {\n    \"id\": \"va_4xbQrmEoA5WJ0G\",\n    \"entity\": \"virtual_account\",\n    \"description\": \"First Virtual Account\",\n    \"customerid\": \"cust805c8oBQdBGPwS\",\n    \"status\": \"active\",\n    \"amount_paid\": 0,\n    \"notes\": {\n      \"referencekey\": \"referencevalue\"\n    },\n    \"receivers\": [\n      {\n        \"id\": \"ba_4lsdkfldlteskf\",\n        \"entity\": \"bank_account\",\n        \"name\": \"Merchant Billing Label\",\n        \"account_number\": \"11122219877893452\",\n        \"ifsc\": \"RAZR0000001\"\n      }\n    ],\n    \"created_at\": 1455696638\n  }\n}\nNote: If Razorpay does not receive the bank account information of the customer from the remitting bank, the payerbankaccount key will be set to null.\n","id":70},{"title":"Creation Via Batch","url":"smart-collect/batch","body":"\nVirtual Accounts can be created via batch. This may be necessary when you have a large number of customers to be onboarded together, and using the API would be unfeasible. Batch creation would allow you to place all the information related to customer and virtual account creation in a single file, ready for upload.\n\nProcess\n\nCreate a CSV/XLS/XLSX file containing rows with the desired customer and virtual account data. The format and sample row data are given in the following sections.\nRaise a request to process the file on the support page as an existing customer. Also share the 14-character Razorpay merchant Id in email body.\nOne we process the file on our side, we will share the same file with you with a few new columns appended per row. For every row, the status column will have tell whether the virtual account is active or not.\n  If success, the row will contain the Razorpay Customer ID, the Virtual Account ID (a newly created virtual account), and associated bank account details.\n  If failure, subsequent columns will have error description.\n\nYou may use this data for various operations on your end. All this information would also be available on your Dashboard as well as via API.\n\nHandling Error-ed Rows\n\nYou are requested to create a new file using error-ed rows from above shared processed file and fix the errors as per description. Please remove the extra error columns and share the same file with us again.\n\nFile Format And Data Constraints\n\nProvided file must be a valid CSV/XLS/XLSX\nEvery row should contain values per the following format:\n\ncustomerid string_\n: ID of an existing Razorpay customer. Can be used if it is not required to create a new customer.\n\ncustomername string_\n: Name of the customer. Can be used if a new customer is required to be created. Max length: 50\n\ncustomercontact string_\n: Contact number of the customer. Can be used if a new customer is required to be created. Must be a valid contact number.\n\ncustomeremail string_\n: Email address of the customer. Can be used if a new customer is required to be created. Must be a valid email address.\n\nvirtualaccountdescriptor string\n: Used for custom account numbers. This is to be left blank as all account numbers are numeric by default.\n\nvirtualaccountdescription string\n: Description for the virtual account. Max length: 2048\n\nvirtualaccountnotes string\n: Notes field to be used for virtual account creation, in keeping with the usage here. The value of this field in the file must be a valid JSON string.\n\nNote that if customer_id field is being used, i.e. an existing customer is being referred to, then fields 2-4 can be left blank.\n\nSo a few sample rows in the file would look similar to the following:\n\ncust_8gRzzeoemUfb5k,,,,,VA for Existing Customer,\"{\"\"key1\"\":\"\"value1\"\"}\"\n,Gaurav Kumar,9999999999,test@test.com,,VA for new customer,\"{\"\"key1\"\":\"\"value1\"\",\"\"key2\"\":\"\"value2\"\"}\"\n\nOutput File Format\n\ncustomerid string_\n: ID of an existing, or a newly created customer.\n\ncustomername string_\n: Name of the customer.\n\ncustomercontact string_\n: Contact number of the customer.\n\ncustomeremail string_\n: Email address of the customer.\n\nvirtualaccountid string\n: ID of the newly created virtual account.\n\nbankaccountid string\n: ID of the newly created bank account.\n\nbankaccountname string\n: Name associated with the newly created bank account.\n\nbankaccountnumber string\n: Account number of the newly created bank account.\n\nbankaccountifsc string\n: IFSC of the newly created bank account.\n\nYou can get in touch with us at razorpay.com/support for any queries.\n","id":71},{"title":"Custom Account Numbers","url":"smart-collect/custom","body":"\n\n  Enabling Custom Account Numbers\n\n  To enable Custom Accounts for your account, get in touch with us at https://razorpay.com/support for any queries.\n\nBy default, any virtual account created by you will have randomly generated numeric bank account number.\n\nHowever, Razorpay Smart Collect also allows you to create custom bank accounts with customizable account numbers. This means you will be able to create virtual bank accounts that have the account number  XXXXXXXXYYYYYYYY, where the X-segment remains static, but the content of the Y-segment is within your control.\n\nThe possible options that can be set for the bank_account receiver are given below.\n\nAttribute                           | Mandatory/Optional (in request) | Type        | Description\n\nreceivers                         | Mandatory                       | JSON Object | Configuration of desired receivers for the virtual account\n\nreceivers.types                   | Mandatory                       | array       | List of desired receiver types. Currently bank_account is the only supported type.\n\nreceivers.bank_account.numeric    | Optional, default: 1            | integer     | Flag to indicate whether a numeric or alphanumeric account is desired.\n\nreceivers.bank_account.descriptor | Optional                        | string      | String that is to be used for account number generation. If not sent, a random 8-digit descriptor will be used.\n\nPrefix\n\nThe first 8 characters in your account number will remain fixed for all your generated account numbers, eg. 22233344. This is ordinarily set to a completely numeric value for your account, but an alphanumeric value can also be set upon request, eg. RAZORPXY.\n\nDescriptor\n\nThe descriptor field can be used to define the last eight characters of the generated bank account number.\n\n{\n  \"receiver\": {\n    \"types\": [\n      \"bank_account\"\n    ],\n    \"bank_account\": {\n      \"descriptor\": \"00000001\"\n    }\n  },\n  \"customerid\": \"cust805c8oBQdBGPwS\",\n  \"description\": \"Custom Virtual Account\"\n}\n{\n  \"id\": \"va_4xbQrmEoA5WJ0G\",\n  \"entity\": \"virtual_account\",\n  \"description\": \"Custom Virtual Account\",\n  \"customerid\": \"cust805c8oBQdBGPwS\",\n  \"status\": \"active\",\n  \"amount_paid\": 0,\n  \"receivers\": [\n    {\n      \"id\": \"ba_4lsdkfldlteskf\",\n      \"entity\": \"bank_account\",\n      \"name\": \"Merchant Billing Label\",\n      \"account_number\": \"2223334400000001\",\n      \"ifsc\": \"RAZR0000001\"\n    }\n  ],\n  \"created_at\": 1455696638\n}\n\nHere in this example, a descriptor 00000001 is being used to generate an account number, while prefix 22233344 is pre-decided.\n\nDescriptor Usage\n\nThe descriptor can have a maximum length of upto 8 characters. This is because some banks do not allow addition of beneficiary accounts that have an account number longer than 16 characters.\n\nThis descriptor field can only be used if custom virtual accounts are enabled for your account. If it is not set, sending any value in the descriptor field will return an error.\n\n{\n  \"error\": {\n    \"description\": \"Descriptor cannot be used with your account.\",\n    \"code\": \"BADREQUESTERROR\"\n  }\n}\n\nThe descriptor is required to be unique amongst your active virtual accounts. If a descriptor is sent, which is already in use by another active virtual account, the following error is returned.\n\n{\n  \"error\": {\n    \"description\": \"An active virtual account with the same descriptor already exists for your account.\",\n    \"code\": \"BADREQUESTERROR\"\n  }\n}\n\nAvoiding Ambiguous Account Numbers\n\nWhen displaying a bank account number to a customer, the font used may cause the customer to misread the alphanumeric characters (if any) in the number. This means customers are very liable to committing typos when required to enter the beneficiary account while initiating a payment. Misreading the letter 'O' in an account number as the numeral '0', for example, is extremely common.\n\nPayments made to such mistyped accounts are considered invalid, and are refunded back to the customer's account within 1 working day. However, this is still a huge inconvenience for the customer, who now has to wait 24 hours to receive a refund for what is often a rather large payment.\n\nFor this reason, we strongly advice against using the following characters in your descriptor for alphanumeric accounts, as they may appear ambiguous in certain fonts.\n\n0 or O\n1 or I\n5 or S\n8 or B\n2 or Z\n","id":72},{"title":"Razorpay Smart Collect","desc":"With Razorpay Smartcollect you can create virtual accounts for customers to pay via NEFT, RTGS, IMPS. Find use cases, advantages, lifecycle & FAQ here.","url":"smart-collect","body":"\nIntroduction\nRazorpay Smart Collect allows you to accept payments made via a variety of online and offline methods.\n\nUsing Razorpay Smart Collect, you can create any number of virtual accounts for your customers for transferring funds (via NEFT, RTGS, IMPS, etc.) to an account linked directly to your bank account.\nA new account can be created for each customer, allowing you to easily track payments made by them, as Razorpay will notify you of each payment made to any of your accounts.\nRazorpay automatically handles the complexity of reconciling these payments on\nyour behalf.\n\nNote: Payments made using Smart Collect largely follow Razorpay’s existing payment flow. If you are new to Razorpay, we recommend understanding this before you go ahead with the rest of the document.\n\nUse Cases\n\nHere are some examples of how Smart Collect can be leveraged.\n\nOne Time Payment\nIf you need to accept a single, large payment from a customer, preferably via NEFT/RTGS/IMPS, you can create a virtual account using Smart Collect for them and share the generated account number and IFSC code. When the customer makes the payment to this account, you will be notified by Razorpay, and can then close the account.\n\nRegular Payments\nIf you need to send a customer regular invoices for payments of large volume, you can create a virtual account using Smart Collect for them and share the details. The customer can add this account as a beneficiary on his preferred banking portal, and make regular payments to it whenever required. Razorpay will notify you for every payment made towards the account, thus simplifying the reconciliation process.\n\nEvent-Based Payments\nIf you need to accept several payments from multiple sources, for a range of possible campaigns/events, you can use Smart Collect to create a virtual account for each campaign, and share details accordingly. For every payment made towards any of these accounts, Razorpay will notify you of the account that was used, thus eliminating the need to identify which campaign the payment was made for.\n\nAdvantages\nSharing your actual account number for purposes of receiving a NEFT/RTGS/IMPS transaction has several disadvantages, most notably that of reconciliation. This is an arduous task, involving matching the bank reference IDs shared by the customers with those present in your bank statement.\n\nHowever, with Smart Collect you can create a unique bank account number for each customer, and automatically tag the payments made to each account with the customer it was created for. This greatly simplifies the reconciliation process.\n\nUsing Smart Collect thus entails a reduction in administration cost, as it can be used to identify remitters automatically and not depend on the bank reference details provided in the payment reference field.\n\nLifecycle\nA virtual account made in this fashion will remain open, i.e. they will have status active, until explicitly closed. See Statuses and API Endpoints for more details.\n\nFAQs\n\nHow can a customer make a payment to a Smart Collect Virtual Account?\nThe customer can make a transaction to the account via a simple NEFT/RTGS/IMPS transaction from his preferred Netbanking portal.\n\nWhat does a Smart Collect Virtual Account look like?\nExactly like a normal account! Here's an example:\n\nAccount Number: 11122219877893452\nIFSC: RAZR0000001\nName: Merchant Billing Label\n\nWhat name will be associated with a Smart Collect Virtual Account?\nYour merchant billing label will be used as the name on your Virtual Account.\n","id":73},{"title":"Notification","desc":"Recieve notifications for your Razorpay virtual account for payment captured event using webhooks and receive email notifications for payment successful event.","url":"smart-collect/notification","body":"\nAll payments made using Smart Collect will show up on your merchant dashboard as well as in the usual payment response APIs, as payments made with method bank_transfer.\n\nWebhooks\nPayments made using this method will also trigger webhooks much like regular payments. To use webhooks, refer our Webhooks documentation.\n\nVirtual Account Credited Event\n\nPayments made using Smart Collect are notified via the virtual_account.credited webhook event. The payload for this event contains details of the payment itself, as well as the virtual account that the payment was made towards.\n\nThe below will be posted as a json structure for the virtual_account.credited event.\n\n{\n  \"event\": \"virtual_account.credited\",\n  \"entity\": \"event\",\n  \"contains\": [\n    \"payment\",\n    \"virtual_account\"\n  ],\n  \"payload\": {\n    \"payment\": {\n      \"entity\": {\n        \"id\": \"pay_6X6jcHoHdRdy79\",\n        \"entity\": \"payment\",\n        \"amount\": 50000,\n        \"currency\": \"INR\",\n        \"status\": \"captured\",\n        \"amount_refunded\": 0,\n        \"refund_status\": null,\n        \"method\": \"bank_transfer\",\n        \"orderid\": \"order6X4mcHoSXRdy79\",\n        \"card_id\": null,\n        \"bank\": null,\n        \"captured\": true,\n        \"email\": \"gaurav.kumar@example.com\",\n        \"contact\": \"9123456780\",\n        \"description\": \"Payment Description\",\n        \"error_code\": null,\n        \"error_description\": null,\n        \"fee\": 200,\n        \"tax\": 10,\n        \"international\": false,\n        \"notes\": [],\n        \"vpa\": null,\n        \"wallet\": null\n      }\n    },\n    \"virtual_account\": {\n      \"entity\": {\n        \"id\": \"va_4xbQrmEoA5WJ0G\",\n        \"entity\": \"virtual_account\",\n        \"description\": \"First Virtual Account\",\n        \"customerid\": \"cust805c8oBQdBGPwS\",\n        \"status\": \"active\",\n        \"amount_paid\": 50000,\n        \"notes\": {\n          \"referencekey\": \"referencevalue\"\n        },\n        \"receivers\": [\n          {\n            \"id\": \"ba_4lsdkfldlteskf\",\n            \"entity\": \"bank_account\",\n            \"name\": \"Merchant Billing Label\",\n            \"account_number\": \"11122219877893452\",\n            \"ifsc\": \"RAZR0000001\"\n          }\n        ],\n        \"created_at\": 1455696638\n      }\n    },\n    \"created_at\": 1400826760\n  }\n}\n\nEmails\nYou will also receive a 'payment successful' notification email, as you do for regular payments.\n","id":74},{"title":"API Endpoints","url":"smart-collect/receiver-types","body":"\nBase URL: https://api.razorpay.com/v1/\n\nThe virtual account response contains attributes such as id and customer_id, and also a field receivers. This is an array that defines what receivers are available for the virtual account.\n\nFor example, if the receivertypes field of the original request contained bankaccount, then the response will contain a receivers array with one element, which gives details of that bank_account receiver such as account number,  IFSC, etc.\n\nCreate\n\n  The request format for virtual account creation recently underwent a change, and the updated format can be found here. The request format given below will eventually be deprecated.\n\n  For new integrations, we strongly recommend you use the updated request format, as it allows a host of new features, most particularly the support for completely-numeric account numbers by default.\n\n/virtual_accounts\n\ncurl -u rzptest26ccbdbfe0e84b:69b2e24411e384f91213f22a \\\n   -X POST \\\n   --data \"receivertypes[]=bankaccount\" \\\n   --data \"description=First Virtual Account\" \\\n   --data \"notes[referencekey]=referencevalue\" \\\n   https://api.razorpay.com/v1/virtual_accounts\n{\n  \"id\": \"va_4xbQrmEoA5WJ0G\",\n  \"entity\": \"virtual_account\",\n  \"description\": \"First Virtual Account\",\n  \"customerid\": \"cust805c8oBQdBGPwS\",\n  \"status\": \"active\",\n  \"amount_paid\": 0,\n  \"notes\": {\n    \"referencekey\": \"referencevalue\"\n  },\n  \"receivers\": [\n    {\n      \"id\": \"ba_4lsdkfldlteskf\",\n      \"entity\": \"bank_account\",\n      \"name\": \"Merchant Billing Label\",\n      \"account_number\": \"11122219877893452\",\n      \"ifsc\": \"RAZR0000001\"\n    }\n  ],\n  \"created_at\": 1455696638\n}\n\nWith the exception of the Create API, the request format for all other API endpoints remains the same, and can be checked here.\n\nMigration\n\nTo migrate to the new request format, simply replace the receiver_types parameter in the request body with the equivalent receivers.types parameters.\n\n{\n  \"receiver_types\": [\n    \"bank_account\"\n  ],\n  \"description\": \"First Virtual Account\",\n  \"customerid\": \"cust805c8oBQdBGPwS\",\n  \"notes\": {\n    \"referencekey\": \"referencevalue\"\n  }\n}\n{\n  \"receivers\": {\n    \"types\": [\n      \"bank_account\"\n    ]\n  },\n  \"description\": \"First Virtual Account\",\n  \"customerid\": \"cust805c8oBQdBGPwS\",\n  \"notes\": {\n    \"referencekey\": \"referencevalue\"\n  }\n}\n\nNote that receiver.types is a mandatory parameter.\n\n  By default, the account number generated using the new request format is wholly numeric, thus allowing it to be used on a wider range of platforms. This is a change from the older request format, which produced only alphanumeric account numbers.\n","id":75},{"title":"Getting Started","desc":"With Razorpay Smart Collect, associate receivers with your virtual account, share details, create refunds, and send notifications via email and webhooks.","url":"smart-collect/start","body":"\nCreation\n\nIn order to start accepting payments using BharatQR, your virtual account must have one or more receivers associated with it. For example, a QR Code is one type of receiver, that allows you to accept payments made via UPI & Cards.\n\n@//Mention Fields and Supported Receiver Types.\n@//Show JSON Input & Output\n\nNote: Currently, bank_account is the only supported type of receiver. However, more will be added in the near future.\n\nFields\n\nWhile creating a virtual account, you may submit the following details:\nReceiver Type: This is a mandatory field, which defines what type of receivers you wish to associate with your virtual account. Currently, only bank_account is supported.\nCustomer ID: This is to be used if the virtual account is being created for a specific customer. Refer Customer API documentation for complete information about Customer API.\n\nRefer to APIs for complete documentation on the fields that you may send.\n\n{\n  \"receivers\": {\n    \"types\": [\n      \"bank_account\"\n    ],\n    \"customerid\": \"cust805c8oBQdBGPwS\",\n    \"description\": \"First Virtual Account\"\n  }\n}\n{\n  \"id\": \"va_4xbQrmEoA5WJ0G\",\n  \"entity\": \"virtual_account\",\n  \"description\": \"First Virtual Account\",\n  \"customerid\": \"cust805c8oBQdBGPwS\",\n  \"status\": \"active\",\n  \"amount_paid\": 0,\n  \"receivers\": [\n    {\n      \"id\": \"ba_4lsdkfldlteskf\",\n      \"entity\": \"bank_account\",\n      \"name\": \"Merchant Billing Label\",\n      \"account_number\": \"11122219877893452\",\n      \"ifsc\": \"RAZR0000001\"\n    }\n  ],\n  \"created_at\": 1455696638\n}\n\nThe virtual account in this example has a bank account receiver with account number 123321987789. This account is mapped directly to your merchant account.\n\nSharing\n\nEmbed image from URL onto an invoice.\nEmbed image from URL onto a standee.\nEmbed image from URL onto an ID card.\n\nRefunds\n\nYou can create refunds for the payments received on your QR Code. When a payment received via\nUPI or Cards, it will appear as refund on the payment on the customer’s bank statement, crediting the refunded amount back to his/her account. Refunds are generally processed within 3-5 business days. The transaction fee and GST charged on successful transactions will not be reversed in case of refunds.\n\n  IMPS Refunds\n\n  Refunds are handled internally by Razorpay by triggering a new transfer towards the customer's bank account. These appear in the customer's account statement as an independent transaction (rather than an explicit reversal of the original payment).\n  A small number of banks do not share the payer's account number while initiating an IMPS payment. For these cases, it is not possible to refund the payment.\n\n  Additionally, refunds will also fail if the payment was originally made from an Non-Resident External (NRE) bank account, as Razorpay is not permitted to deposit money into such accounts.\n\nNotification\nYou will be notified of any payments made to your QR Code via webhook and email. See Notifications for more details.\n\nAny payment made towards this QR Code by the customer will thus reflect on your dashboard as payment made using receiver “qr_code”.\n\nYou can view the funds received by a QR Code using the “amount_paid” field in the virtual account entity. This field tells you the total amount (in paise) that has been paid to the virtual account.\n","id":76},{"title":"Statuses","desc":"Your Razorpay smart collect virtual account can have active or closed status.","url":"smart-collect/status","body":"\nFollowing are the statuses virtual account can be in:\n\nActive\n\nWhen first created, a virtual account is said to be in active status. This means it is ready to receive payment from any of its receivers.\n\nClosed\n\nA virtual account will remain active until explicitly closed by you. The account is then said to be in closed state, and customers will no longer be able to make payments to the associated receivers.\n","id":77},{"title":"Testing","desc":"Create and manage your Razorpay smart collect virtual accounts in test mode before you start making and receiving actual payments.","url":"smart-collect/testing","body":"\nYou can create and manage your virtual accounts in test mode before you start making and receiving actual transactions.\n\nTest Payments\n\nTest payments can be initiated towards any virtual account made in test mode, via the Make Test Payment option available on your merchant Dashboard. This option will trigger the same webhook notifications that a live payment made via NEFT/IMPS/RTGS would.\n","id":78},{"title":"Vanity Account Numbers","url":"smart-collect/vanity","body":"\n\n  Enabling Vanity Account Numbers\n\n  To enable Vanity Accounts for your account, please write to us at razorpay.com/support, with the desired merchant handle.\n\nBy default, any virtual account created by you will have randomly generated numeric bank account number.\n\nHowever, Razorpay Smart Collect also allows you to create custom bank accounts with vanity account numbers. This means you will be able to create virtual bank accounts that have the account number  RZRPXXXXYYYYYYYYY, where the contents of the XY-segment is entirely within your control.\n\n  Alphanumeric Account Numbers\n  By default, the account numbers generated are always numeric. To use Vanity Accounts, you must set the receivers.bankaccount.numeric option to 0, and set the receivers.bankaccount.descriptor option to the desired custom value.\n\n  If receivers.bankaccount.descriptor is set without setting receivers.bankaccount.numeric to 0, the request will result in an error: \"Descriptor cannot be used for numeric accounts.\"\n\nThe possible options that can be set for the bank_account receiver are given below.\n\nAttribute                           | Mandatory/Optional (in request) | Type        | Description\n\nreceivers                         | Mandatory                       | JSON Object | Configuration of desired receivers for the virtual account\n\nreceivers.types                   | Mandatory                       | array       | List of desired receiver types. Currently bank_account is the only supported type.\n\nreceivers.bank_account.numeric    | Optional, default: 1            | integer     | Flag to indicate whether a numeric or alphanumeric account is desired.\n\nreceivers.bank_account.descriptor | Optional                        | string      | Alphanumeric string that is to be used for account number generation, only valid if numeric is 0.\n\nHandle\n\nThe 5th through 8th character segment in the account number (XXXX in the above example) is referred to as the merchant handle, and can be set on request. This segment is fixed and will then be used in the generation of all your alphanumeric virtual account numbers.\n\nAvoiding Ambiguous Handles\n\nWhen displaying a virtual account to a customer, the font used may cause the customer to misread the alphanumeric characters in the given account number. This means customers are very liable to committing typos when required to enter the beneficiary account while initiating a payment. Misreading the letter 'O' in an account number as the numeral '0', for example, is extremely common.\n\nPayments made to such mistyped accounts are considered invalid, and are refunded back to the customer's account within 1 working day. However, this is still a huge inconvenience for the customer, who now has to wait 24 hours to receive a refund for what is often a rather large payment.\n\nFor this reason, we strongly advice against using the following characters in your handle, as they may appear ambiguous in certain fonts.\n\n0 or O\n1 or I\n5 or S\n8 or B\n2 or Z\n\nDescriptor\n\nThe descriptor field can be used to define the last nine characters of the generated bank account number.\n\n{\n  \"receiver\": {\n    \"types\": [\n      \"bank_account\"\n    ],\n    \"bank_account\": {\n      \"descriptor\": \"000000001\",\n      \"numeric\": 0\n    }\n  },\n  \"customerid\": \"cust805c8oBQdBGPwS\",\n  \"description\": \"Vanity Virtual Account\"\n}\n{\n  \"id\": \"va_4xbQrmEoA5WJ0G\",\n  \"entity\": \"virtual_account\",\n  \"description\": \"Vanity Virtual Account\",\n  \"customerid\": \"cust805c8oBQdBGPwS\",\n  \"status\": \"active\",\n  \"amount_paid\": 0,\n  \"receivers\": [\n    {\n      \"id\": \"ba_4lsdkfldlteskf\",\n      \"entity\": \"bank_account\",\n      \"name\": \"Merchant Billing Label\",\n      \"account_number\": \"RZRPABCD000000001\",\n      \"ifsc\": \"RAZR0000001\"\n    }\n  ],\n  \"created_at\": 1455696638\n}\n\nHere in this example, a descriptor 000000001 is being used to generate an account number, while merchant handle ABCD is pre-decided.\n\nDescriptor Usage\n\nThe descriptor can have a maximum length of upto 9 characters. This is because some banks do not allow addition of beneficiary accounts that have an account number longer than 17 characters.\n\nThis descriptor field can only be used if your merchant handle is set. If it is not set, sending any value in the descriptor field will return an error.\n\n{\n  \"error\": {\n    \"description\": \"Descriptor field cannot be used as merchant handle is not set for your account.\",\n    \"code\": \"BADREQUESTERROR\"\n  }\n}\n\nThe descriptor is required to be unique amongst your active virtual accounts. If a descriptor is sent, which is already in use by another, active virtual account, the following error is returned.\n\n{\n  \"error\": {\n    \"description\": \"An active virtual account with the same descriptor already exists for your account.\",\n    \"code\": \"BADREQUESTERROR\"\n  }\n}\n\nIf the descriptor field is not sent but numeric is set to 0, the account number will be a randomly generated alphanumeric string that still uses the merchant handle.\n","id":79},{"title":"API Reference","desc":"The Razorpay APIs for subscriptions will help you create, fetch, query plans, subscriptions, add-ons and also delete or cancel subscriptions and add-ons.","url":"subscriptions/api","body":"\nPlan\n\nYou can create plans on-the-fly via the API and also fetch them as required.\n\nEntity\n\nThe plan entity has the following attributes:\n\nAttribute | Mandatory/Optional (in request) | Type | Description\n\nid | NA | string | Plan ID which will be used to create subscriptions for the customers.\n\nitem.name | Mandatory | string | Name of the plan.\n\nitem.description | Optional | string | Description of the plan.\n\nitem.amount | Mandatory | integer | Amount of the plan, that will be charged to all the customers subscribed to this plan, on a recurring basis.\n\nitem.currency | Mandatory | string | Currently, only INR is supported.\n\ninterval | Mandatory | integer | This, combined with period, defines the frequency. If the billing cycle is of 2 months, the value for this attribute would be 2. For daily plans, the minimum interval is 7.\n\nperiod | Mandatory | string | This, combined with interval, defines the frequency. If the billing cycle is of 2 months, the value for this attribute would be monthly. The values supported for this attribute currently are: daily, weekly, monthly, and yearly.\n\nnotes | Optional | JSON object | Object consisting of key value pairs as notes. Refer here for more details.\n\nCreating a Plan\n\nThe following endpoint creates a plan:\n\nhttps://api.razorpay.com/v1/plans\n\n{\n  \"period\": \"weekly\",\n  \"interval\": 1,\n  \"item\": {\n    \"name\": \"Test Weekly 1 plan\",\n    \"description\": \"Description for the weekly 1 plan\",\n    \"amount\": 600,\n    \"currency\": \"INR\"\n  }\n}\n\n{\n  \"id\": \"plan_7wAosPWtrkhqZw\",\n  \"entity\": \"plan\",\n  \"interval\": 1,\n  \"period\": \"weekly\",\n  \"item\": {\n    \"active\": true,\n    \"name\": \"Test Weekly 1 plan\",\n    \"description\": \"Description for the weekly 1 plan\",\n    \"amount\": 600,\n    \"currency\": \"INR\",\n    \"type\": \"plan\"\n  },\n  \"notes\": [],\n  \"created_at\": 1495995837\n}\n\nFetching a Plan\n\nThe following endpoint fetches the plan with the given ID:\n\nhttps://api.razorpay.com/v1/plans/{planId}\n\nFetch All Plans\n\nThe following endpoint fetches all plans:\n\n https://api.razorpay.com/v1/plans\n\nQuery Params:\n\nParameter | Description\n\nfrom | Timestamp from when plans are to be fetched\n\nto | Timestamp up till when plans are to be fetched\n\ncount | Count of plans to be fetched. Default value is 10. Maximum value is 100. This can be used for pagination, in combination with skip.\n\nskip | Numbers of plans to be skipped. Default value is 0. This can be used for pagination, in combination with count.\n\nSubscription\n\nSubscriptions allow you to charge a customer's card on a recurring basis.\nA subscription ties a customer to a particular plan you've created.\n\nEntity\n\nThe following are the attributes of a subscription entity:\n\nAttribute | Mandatory/Optional (in request) | Type | Description\n\nid | NA | string | Subscription ID\n\nplan_id | Mandatory | string | ID of the plan to which the customer is subscribing to.\n\ncustomer_id | NA | string | ID of the customer who is subscribing to a plan. This will be populated automatically once the customer completes the first transaction via our checkout.\n\ntotal_count | Mandatory | integer | The number of billing cycles that the customer needs to be charged for. If the customer is buying a 1 year subscription, billed bi-monthly, this value should be 6.\n\ncustomer_notify | Mandatory | integer | This indicates whether the communication to the customer would be handled by you or by us. If it's set to 0, the communication to the customer would be handled by the merchant. If it's set to 1, we would take care of communicating any failures or charges to the customer.\n\nstartat | Optional | integer (timestamp) | This would be the start of the first billing cycle. If the startat is not passed, the billing cycle for the customer starts immediately during the auth transaction. Otherwise, the billing cycle would start at the specified time.\n\nquantity | Optional | integer | The quantity of the plan to which the customer should be subscribed. For example, if the plan is Rs100/user/month, and the customer has 5 users, you should pass 5 as the quantity to have the customer charged Rs500 (5 x Rs100) monthly. By default, this value is set to 1, if nothing is passed.\n\nnotes | Optional | object | Object consisting of key value pairs as notes. Read more here\n\naddons | Optional | Array of objects | This can be used to charge the customer a one time fees before the start of the subscription. This can include something like one-time delivery charges or a security deposit. More details about this can be found at upfront section\n\nstatus | NA | string | Status of the subscription. Possible values: created, authenticated, active, pending, halted, cancelled, completed, expired. The explanations for these is provided in the Lifecycle section.\n\npaid_count | NA | integer | This indicates the number of billing cycles that the customer has already been charged for.\n\ncurrent_start | NA | integer (timestamp) | This indicates the start time of the current billing cycle of the subscription.\n\ncurrent_end | NA | integer (timestamp) | This indicates the end time of the current billing cycle of the subscription.\n\nended_at | NA | integer (timestamp) | This will have the timestamp of the time when the subscription has completed its period or has been cancelled midway.\n\ncharge_at | NA | integer (timestamp) | This indicates the time when the next charge on the subscription will be made.\n\nauth_attempts | NA | integer | The number of times that the charge for the current billing cycle has been attempted for, on the card.\n\nCreating a Subscription\n\nThe following endpoint creates a new subscription on an existing customer:\n\nhttps://api.razorpay.com/v1/subscriptions\n\n{\n  \"planid\": \"plan7wAosPWtrkhqZw\",\n  \"customer_notify\": 1,\n  \"total_count\": 6,\n  \"start_at\": 1495995837,\n  \"addons\": [\n    {\n      \"item\": {\n        \"name\": \"Delivery charges\",\n        \"amount\": 30000,\n        \"currency\": \"INR\"\n      }\n    }\n  ]\n}\n{\n    \"id\": \"sub_82uBGfpFK47AlA\",\n    \"entity\": \"subscription\",\n    \"planid\": \"plan7wAosPWtrkhqZw\",\n    \"status\": \"created\",\n    \"current_start\": null,\n    \"current_end\": null,\n    \"ended_at\": null,\n    \"quantity\": 1,\n    \"token_id\": null,\n    \"notes\": {},\n    \"charge_at\": 1495995837,\n    \"start_at\": 1495995837,\n    \"end_at\": null,\n    \"auth_attempts\": 0,\n    \"total_count\": 6,\n    \"paid_count\": 0,\n    \"customer_notify\": true\n}\n\nFetching a Subscription\n\nThe following endpoint fetches the subscription with the given ID:\n\nhttps://api.razorpay.com/v1/subscriptions/{subscriptionId}\n\nFetch All Subscriptions\n\nThe following endpoint fetches all subscriptions of a plan:\n\nhttps://api.razorpay.com/v1/subscriptions\n\nQuery Params:\n\nParameter | Description\n\nplan_id | The plan ID of which you want to retrieve all the subscriptions. MANDATORY\n\nfrom | Timestamp from when subscriptions are to be fetched\n\nto | Timestamp up till when subscriptions are to be fetched\n\ncount | Count of subscriptions to be fetched. Default value is 10. Maximum value is 100. This can be used for pagination, in combination with skip.\n\nskip | Numbers of subscriptions to be skipped. Default value is 0. This can be used for pagination, in combination with count.\n\nCancelling a Subscription\n\nThe following endpoint cancels a customer’s subscription.\nThe subscription once cancelled, cannot be renewed or reactivated.\n\nhttps://api.razorpay.com/v1/subscriptions/{subscriptionId}/cancel\n\nThe subscription can either be cancelled immediately or at the end of the current billing cycle.\n\nTo cancel the subscription at the end of the current billing cycle, send the following body in the request.\n\n{\n    \"cancelatcycle_end\": 1\n}\n\nNote that the subscription status will move to cancelled when the actual cancellation happens. That is, if the subscription is being cancelled at cycle end, the subscription's status will move to cancelled at the end of the cycle. Webhook will also be fired at the end of the cycle.If the subscription was created with customer_notify as 1, then a cancellation email will be sent to the customer when we receive a cancellation request from you, irrespective of immediate or future.\n\nAdd-on\n\nYou can create add-ons to charge an extra amount for a particular billing cycle.\nOnce you create an addon, it gets attached to the next invoice that gets generated for the given subscription. Hence, it'll get applied to the next automated charge scheduled for the subscription.\n\nEntity\n\nThe addon entity has the following attributes:\n\nAttribute | Mandatory/Optional (in request) | Type | Description\n\nid | NA | string | Addon ID\n\nitem.name | Mandatory | string | Name of the addon.\n\nitem.description | Optional | string | Description of the addon.\n\nitem.amount | Mandatory | integer | Amount of the addon, that will be charged to the subscription for the next billing cycle.\n\nitem.currency | Mandatory | string | Currently, only INR is supported.\n\nquantity | Optional | integer | This specifies the number of units of the item that you want to charge the customer for. By default, this is 1. The total amount is calculated as item.amount * quantity.\n\nsubscription_id | NA | string | The ID of the subscription to which the addon is being applied to.\n\ninvoice_id | NA | string | The ID of the invoice to which the addon has been applied to. This field gets populated only after the invoice is generated. Until then, it'll be null. The addon will get added to the next invoice that gets generated after the addon has been created. Once the addon has been consumed by an invoice, it cannot be deleted.\n\nCreating an Add-on\n\nThe following endpoint creates an addon:\n\nhttps://api.razorpay.com/v1/subscriptions/{subscriptionId}/addons\n\n{\n    \"item\": {\n        \"name\": \"Extra Chair\",\n        \"amount\": 30000,\n        \"currency\": \"INR\"\n    },\n    \"quantity\": 2\n}\n{\n    \"id\": \"ao_8nDvQYYGQI5o4H\",\n    \"entity\": \"addon\",\n    \"item\": {\n        \"id\": \"item_8nqvQe0e0SKDh3\",\n        \"active\": true,\n        \"name\": \"Extra Chair\",\n        \"description\": null,\n        \"amount\": 30000,\n        \"unit_amount\": 30000,\n        \"currency\": \"INR\",\n        \"type\": \"addon\",\n        \"unit\": null,\n        \"tax_inclusive\": false,\n        \"tax_id\": null,\n        \"taxgroupid\": null,\n        \"created_at\": 1507733751,\n        \"updated_at\": 1507733751\n    },\n    \"quantity\": 2,\n    \"created_at\": 1507733751,\n    \"subscriptionid\": \"sub8nqsgZSWSQA2s3\",\n    \"invoice_id\": null\n}\n\nFetching an Addon\n\nThe following endpoint fetches the addon with the given ID:\n\nhttps://api.razorpay.com/v1/addons/{addonId}\n\nDeleting an Addon\n\nThe following endpoint will allow you to delete an addon if the addon has not been associated with any invoice yet.\nOnce the addon has been associated to an invoice, it cannot be deleted.\n\nhttps://api.razorpay.com/v1/addons/{addonId}\n","id":80},{"title":"Creating Subscriptions","desc":"Create a Razorpay plan, subscription, authentication transaction with upfront amount, and payment verification using Razorpay APIs and Dashboard.","url":"subscriptions/create","body":"\nYou can create a subscription in three simple steps:\n\nStep 1. Create a Plan\nStep 2. Create a Subscription\nStep 3. Create an Authentication Transaction (auth transaction)\n\n Note: Creating a customer is not required at any point in the subscription creation flow. Once the auth transaction has been completed by a customer, we create a new customer with the customer details and associate that to the subscription.\n\n@image subsflowgeneral.png\n\nCreating a Plan\n\nThe first step to creating a subscription is to create a plan. A plan contains product details along with the amount and frequency of the billing cycles. Depending upon your business, you can create multiple plans with different billing cycles and pricing.\n\nFor example, you can create a Basic Plan that includes some of the regular services you provide for say, @data.Rs 200 per month and a Premium Plan that includes some additional services that you can price it at, say @data.Rs 300 per month.\n\nWhile creating a plan, you need to define the following details:\n\nAmount\n: Amount being charged for the plan.\n\nPeriod\n: This can be either daily, weekly, monthly, or yearly.\n\nInterval\n: Clubbed with period, this defines how often the customer should be charged.\n\nFor example:\n\nAmount: @data.Rs 200, Period: weekly, Interval: 3\n: Charge @data.Rs 200, every 3 weeks.\n\nAmount: @data.Rs 1000, Period: monthly, Interval: 2\n: Charge @data.Rs 1000, every 2 months.\n\nAmount: @data.Rs 50, Period: daily, Interval: 10\n: Charge @data.Rs 50, every 10 days.\n\n Note: Plans with daily period must have interval set to an value greater than 7.\n\n Note: Plans are like templates and can be reused. If you have only a few plans you can create them via the Dashboard. However, if your business has custom plans for every customer, you can create plans via the API.\n\nTo create a plan via the API, refer the API Reference page.\n\nTo create a plan from the Dashboard:\n\nLog in to Razorpay Dashboard.\nGo to Subscriptions.\nClick the Plans tab.\nClick New Plan and enter the following details:\n    Plan Name\n    Plan Description. This field is optional.\n    Billing Frequency. You can set billing cycle (start date and end date) and trial period later while, creating a subscription as well.\n    Billing Amount. This is considered per unit.\n    Internal Notes, if any.\nClick Create Plan.\n\nThe filled-in Plan creation page appears as shown below:\n@image creating-plan-new-final.png\n\nCreating a Subscription\nThe next step is creating a subscription using the plan you created in Step 1. You have to define the following details when creating a subscription:\n\nPlan ID\n: ID of the plan to which a customer wants to subscribe to on your website.\n\nStart at\n: Date and time at which the subscription would start.\n If this field is not passed, the subscription would start immediately. The first auth transaction will include the plan amount instead of a token amount of 5rs. More details on this provided in the next section.\n If this field is passed, the subscription would start at the time specified. This can be used to provide trial periods to your customers.\n\nTotal count\n: This defines how long the subscription should run for. Currently, the maximum time that a subscription is allowed to run without requiring an authentication again from the customer is 10 years. Please note that we do not support lifetime subscription as of now.\n For example, if a customer is subscribing to a monthly plan on March 1st, 2017 for 2 years, the total count would be 24. The subscription would automatically move into completed state on March 1st 2019.\n\nQuantity\n: This defines the number of units of the subscription. A B2B company can use this field to define the number of users that the company wants to subscribe a particular plan for. This is an optional field and the default value for this is 1.\n\nAddons\n: Addons can be used to collect an upfront amount from the customer at the time of auth transaction.\n If a subscription is created with addons input, the customer will be charged an extra amount during the auth transaction.\n For example, if you want to charge a delivery fees or installation charges or setup fees, you can pass this as part of subscription creation API. In the auth transaction, we will collect the addon amount instead of the token amount of 5rs. More details around this provided in the next section.\n\nCurrently, you can create a subscription via the API only. Refer the API Reference page for more details.\n\nAuthentication Transaction\n\nAfter you create a subscription, permission to charge the customer's card at periodic intervals is required. For this, an authentication transaction (auth transaction) is carried out.\n\nThe auth transaction can be collected from the customer by passing subscription_id in the checkout options, while instantiating the checkout. To collect the payments from customers using our checkout, pass the following options to checkout.js in the script tag given below:\n\nPay\n\nvar options = {\n    \"key\": \"YOURKEYID\",\n    \"subscriptionid\": \"sub8hYZKdAUDOpOXz\",\n    \"name\": \"Merchant Name\",\n    \"description\": \"Purchase Description\",\n    \"image\": \"/your_logo.png\",\n    \"handler\": function (response){\n        alert(response.razorpaypaymentid);\n    },\n    \"prefill\": {\n        \"name\": \"Customer Name\",\n        \"email\": \"test@email.com\"\n    },\n    \"notes\": {\n        \"address\": \"Hello World\"\n    },\n    \"theme\": {\n        \"color\": \"#F37254\"\n    }\n};\nvar rzp1 = new Razorpay(options);\n\ndocument.getElementById('rzp-button1').onclick = function(e){\n    rzp1.open();\n    e.preventDefault();\n}\n\nThe checkout options are similar to the normal payment. The only difference is that subscription_id has to be passed in the options, along with the other options. The complete list of options can be found here.\n\nAlso please note that you do not have to pass any order_id to the checkout options. You do not have to use the orders API while using subscriptions.\n\nNote: The auth transaction is an important and mandatory step to charge the customer automatically on a recurring basis.\nAs part of the auth transaction, we also create a customer using the customer details entered on the checkout and associate it with the subscription\n\nPayment Verification\n\nAfter the auth transaction has been successfully completed, Checkout will return the following data in the response:\nrazorpaypaymentid\nrazorpaysubscriptionid\nrazorpay_signature\n\nThe razorpaysignature received here needs to be verified on your backend server. In order to verify the signature, you need to fetch the subscriptionid from your database (not the one from the checkout response) and use your API Secret to generate the signature.\n\nTo generate the signature, calculate an HMAC hex digest using SHA256 algorithm and these fields. The razorpaypaymentid and subscription_id fields are concatenated using the | (pipe) symbol.\n\n$expectedSignature = hash_hmac(self::SHA256, $razorpayPaymentId . '|' . $subscriptionId, $secret);\n\nif ($expectedSignature === $razorpaySignature)\n{\n    echo \"Payment is successful!\";\n}\n\nNote: You should only consider the payment as successful and subscription as authenticated after the signature has been successfully verified,\n\nAuth Transaction Amount\n\nThe auth transaction amount is the very first amount you charge on the customer's card. Based on your business need, you can decide on what should be the auth transaction amount. If you are going to collect subscription charges at a later time, the auth transaction will be made of @data.Rs 5 (token amount) which gets auto-refunded. Otherwise, you can create an auth transaction with any of the following first transaction amounts as well:\n\nUpfront amount\n: If you pass the addons key while creating the subscription, the addon amount will be collected from the customer during the auth transaction. The addon can be used as a security deposit or delivery fees.\n\nImmediate start\n: If you do not pass the start_at key while creating the subscription, the subscription starts immediately. The amount used for the auth transaction here would be the plan amount. If you do pass the start at value, then the automated charges on the subscription will start on the specified time.\n\nUpfront amount + immediate\n: If you pass addons key while creating the subscription AND you want the subscription to start immediately (by not passing start_at key while creating subscription), then the amount charged in the auth transaction will be addon amount + plan amount.\n\n Note: In the above three cases, the auth transaction amount would not be refunded. An invoice will also be generated if any of the above three cases are satisfied.\n\nPossible Scenarios\n\nIn the following table, various scenarios of creating an auth transactions are listed based on the Upfront Amount you might collect in the beginning and the Start At date which defines if you are collecting subscription charges immediately or later.\n\nScenario\nUpfront Amount (addon)\nStart At\nAuth Transaction Amount\n\nScenario 1: When the subscription fees is charged immediately without an upfront amount.\nAbsent\nImmediate\nAuth Transaction Amount = Plan amount (subscription charge)  For example, a merchant has a weekly magazine plan of @data.Rs 150 and a customer subscribes to this plan and wants the subscription to start immediately. Here, as part of the auth transaction itself, we'll be charging the first charge of the subscription (@data.Rs 150). The second charge and the subsequent charges will be auto-charged on the card in the coming weeks as per the schedule defined.\n\nScenario 2: When the subscription fee is charged immediately with an upfront amount.\nPresent\nImmediate\nAuth Transaction Amount = Upfront amount + Subscription Charge.  For example, a merchant has a image editing software which can be used by customers by subscribing to different plans. The monthly plan costs @data.Rs 2500. The merchant also provides priority support for an additional cost (upfront amount) of @data.Rs 500. A customer subscribing to the monthly plan and opting for priority support would be making an auth transaction of @data.Rs 2500 + @data.Rs 500 = @data.Rs 3000. The second charge and the subsequent charges of @data.Rs 2500 will be auto-charged on the card in the coming months.\n\nScenario 3: When the subscription amount is charged in the future without an upfront amount.\nAbsent\nFuture\nAuth transaction amount of @data.Rs 5 is automatically created. The amount is auto-refunded immediately.  For example, a merchant that provides online source of e-books provides 1 month trial before charging the subscription fees of @data.Rs 250 per month. Since the subscription charges will be collected from the following month, an auth transaction amount of @data.Rs 5 is created and auto-refunded.\n\nScenario 4: When the subscription amount is charged in the future with an upfront amount.\nPresent\nFuture\nAuth Transaction Amount = Upfront Amount.  For example, a merchant charges @data.Rs 5000 as upfront amount and @data.Rs 2500 as monthly charges for renting a dining table set. The merchant requires a few days to deliver this product. Customer subscribes to this plan for which he needs to pay an upfront amount of @data.Rs 5000. This amount is used as the auth transaction amount. Once the dining table set has been delivered, the customer will start getting charged an amount of @data.Rs 2500 on a recurring basis.  Please note that the start_at value should be set to the delivery date while creating the subscription.\n\nWhen all the three steps mentioned above are completed, the subscription workflow is handled end-to-end by us without any intervention required from your side.\n\n Note: Only when the state changes to halted or completed, action is required from you or the customer. Refer the table on State change to know about how you can handle this.\n\nAdditional Functionalities\n\nYou can create your subscription with a trial period or an upfront amount. You can also cancel a subscription or handle retries. You can see how these can be done in our Manage your Subscriptions section.\n\nNote: Since most subscription activity happens automatically, you can enable webhooks to get notified of the events.\n","id":81},{"title":"Handling Payment Retries","desc":"Handle Razorpay payment retries when auto-charge fails. Learn about payment or card failure scenarios and how to handle the same with webhooks.","url":"subscriptions/handling-retries","body":"\nWith Razorpay Subscriptions, you can handle payment retries when auto-charge fails seamlessly. Following are some payment failure scenarios and how it can be handled:\n\nScenarios\n\nCard failure but payment success on auto-retry\nWhen a payment fails, auto-retry is attempted. If the payment succeeds on\nsubsequent auto-retries made by the customer, we will:\n\n Trigger subscription.charged webhook\n If customer notifications are hosted on Razorpay, customer will receive an\nemail confirmation\n Move subscription from pending to activated state\n Trigger subscription.activated webhook.\n\nCard failure and payment failure on auto-retry\n\nWhen the last auto-charge attempt made by your customers was unsuccessful and\nthe subsequent retries were also exhausted, we will:\n\n Send an email requesting manual attempt of a charge or request change of the\ncard if the customer notifications are hosted on Razorpay.\n Move subscription to halted state.\n Trigger subscription.halted webhook.\n Invoices continue to be created in halted state, but will not be charged.\n\nIf customer's notifications are not hosted on Razorpay, you will need to\nrequest the customer to change their card or you or the customer needs to manually\nattempt a charge on the same card.\n\nCustomer Changes Card on Payment Failure\n\nWhen a customer changes the card due to payment failure in the auto-retry\nattempts, we will:\n\n Automatically perform charge on the new card. On a successful charge, the\nfollowing webhooks will be triggered:\n subscription.charged webhook\n subscription.activated webhook\n\n Subscription will be moved from halted state to activated state.\n\nIf there are previous incomplete charges, they will have to be re-attempted via\nthe Dashboard manually.\n\nRetries\nThe auto-debit of the periodic charges takes place on the scheduled day as defined by you. However, due to unforeseen reasons such as card expiry, card blocking by bank, insufficient balance, and so on, the scheduled recurring payment could fail.\n\nHandling Retries\nIn such failure scenarios, Razorpay will ensure that a retry is initiated on the next day. You will be notified about the failed attempt via our webhooks and we will automatically process a retry without you having to take any action.\n\nA retry normally takes place in T+3 days cycle three times, i.e., once every day for 3 days, excluding the date of charge. If, even with the retries the payment fails, the subscription is moved to halted state. To know about the different Subscriptions' states, refer Subscription Lifecycle page.\n\nThe retry model works in the following manner:\n\nLet T=0 be the day when the charge was to be made.\nOn T=0 we will attempt to charge the card.\nIf it fails, the subscription's state will be changed to pending and we will attempt again on T+1.\nIf it fails again, we will attempt two more times on T+2 and T+3 respectively.\nIf the charge still fails, the subscription’s state will be changed to halted.\n\nWith the webhooks subscription.pending and subscription.halted enabled, you would receive a notification every time a subscription moves into one of these states. You could then decide to hold off the delivery of the service as per your business model. Razorpay would also send an email to the customer notifying about the failure. This email would contain a link through which the customer can change the card which is associated with the subscription.\nIf the customer changes the card while the subscription is in pending state, we would automatically attempt to charge the last invoice. If this charge is successful, the subscription will move to active state.\nIf the customer changes the card while the subscription is in halted state, no invoice is charged and the subscription just moves to active state, if the card change was successful.\n\nThe invoices for a subscription are created even when the subscription's state is halted. But, these invoices will not be charged by us. They can be charged manually by you from the Dashboard.\n\nMore information around subscription webhooks can be found here.\n","id":82},{"title":"Hosted Solution","desc":"Use our ready-to-use hosted page that sends emails to customers to handle Razorpay payment failures when an auto-charge on a subscription is attempted.","url":"subscriptions/hosted","body":"\nLanding Page\n\nYou can make use of our ready-made hosted page solution to handle payment failures when an auto-charge is attempted. The hosted page handles payment failure in the following ways:\n\nThe customer is notified via email about the payment failure.\nThe failure email contains a link that allows the customer to take further action on the failed payment.\nThe action could either be retrying the payment on the same card or updating the card- both of which are handled seamlessly by the hosted page.\n\nA sample hosted landing page is shown below:\n\n@image subs-hosted.png\n\nEmail Notifications\n\nEmails are sent to your customers at various important events such as the following:\n\nStart of the subscription\nPayment success\nPayment failure\nAction required during payment failure\nUpdation of card linked to subscriptions\n\nTypes of Emails\n\nThere are 8 types of emails that we send at different stages of the recurring payment. These are listed below:\n\nAuthenticated\n: This email is sent for a new subscription only. The authenticated email depends on the upfrontamount and startat date for the subscriptions.\n\nCard Change\n: This email is sent whenever a customer changes the card that is linked to the plan. This email notifies the customer about the successful changing of the card and the updation of the card details associated with the subscription.\n\nCompleted\n: This email is sent to the customer when the subscription moves to completed state. There would not be any completed email sent if the subscription moves from completed to completed. That is because the subscription was already completed and a charge was made on an older invoice.\n\nCancelled\n: This email is sent out when the customer or the merchant requests for a subscription cancellation and the subscription actually moves to cancelled state.\n\nPending\n:  When an automated charge on a subscription fails, we retry an auto-charge on the card. If the retries have not be exhausted, the subscription moves to pending. We send out an email everytime the subscription moves to pending state.\n\nHalted\n: When an automated charge on a subscription fails, we retry an auto-charge on the card. When all the retries have been exhausted, it moves to halted. We send out an email everytime the subscription moves to halted state.\n\nCharged\n: This email is sent when we make a successful automated charge on the subscription as per the billing cycle.\n\nInvoice Charge\n: This email is sent when a manual charge is made on an old invoice of the subscription (either by the merchant or the customer). If the subscription was in the halted state when the manual charge was done, we also mention that the subscription is now active and we would resume the automated charges from the next cycle onwards in the email.\n\nEmail Details\nThese emails contain details given below along with your company branding:\n\nSubscription ID\nDescription\nSubscription Plan\nPayment Details\nPayment Method\nPayment Due On\n\nThe email notification would also contain a link to the hosted page on which customers can change their card.\n\n Note: To host the payment page for the subscription at our end pass customernotify value as 1 (i.e. customernotify=1) in the API request. If you wish to notify manually pass the value as '0' (i.e. customer_notify=0). For more details, refer the API reference.\n","id":83},{"title":"Razorpay Subscriptions","desc":"Get started with Razorpay Subscriptions by understanding the recurring payment flow, the pre-requisites of using Subscriptions and read FAQ on the same.","url":"subscriptions","body":"\nIntroduction\n\nRazorpay Subscriptions provides you the platform to set up and manage recurring payments. Recurring payments are payments that:\n\nYou can charge as per a fixed schedule\nDo not require any intervention on the customer’s end as it is automated.\n\nUsing Razorpay Subscriptions you can automatically charge customers based on a billing cycle that you control. You can easily create and manage recurring payments and get instant alerts on payment activity as well as the status of subscriptions. Razorpay handles all the complexities of managing recurring payments on your behalf.\n\nNote: The Subscriptions platform is based on Razorpay’s existing\npayment flow. If you are new to\nRazorpay, we recommend you to understand this flow before you read further.\n\nGetting Started\n\nWith Razorpay Subscriptions, you can bill customers periodically in the following simple steps:\n\nDefine a plan that sets what amount should be billed and how often.\nCreate a subscription for the selected plan with the start and end details.\nCreate an authentication transaction (auth transaction). The auth transaction is an approval process that grants permission to charge the customer's card on a periodic basis. This is an important and mandatory step while creating a subscription.\n\nThe entire flow of creating a subscription is described in the section Creating Subscriptions.\n\n Note: You need not create a customer to create a subscription. When the auth transaction is completed by a customer, we automatically create a new customer with the customer details and associate it with the subscription.\n\nSubscriptions Payment Flow\n\nThe payment flow in subscriptions takes place in the following way:\n\nMerchant creates different plans for their products/services.\nCustomer selects the plan from the merchant site.\nOnce the customer selects a plan from the merchant's website, a subscription on Razorpay is created and the subscription_id received in the response, is passed on to the Razorpay Checkout via the checkout options.\nOn the Checkout form, the customer enters the card details and clicks Pay.\nThis forms an auth transaction and on a successful payment, a customer is created and linked to the subscription!\nAutomated charges on the subscription are now made as per the schedule defined by the plan.\n\nHow Recurring Payments Work\n\nRecurring payments do not require any intervention at the customer’s end. It is an automated payment collection system that requires one-time approval from the customer via the auth transaction. Following points summarizes recurring payments:\n\nCustomer’s approval is sought before recurring payments are collected. This approval process works just like normal payments with the 3D Secure authentication step. This is what we refer to as authentication transaction or simply 'auth transaction'.\nOnce the auth transaction has been successfully completed, the card is charged automatically at the start of every billing cycle.\nFor every recurring payment, an invoice is generated which includes customer and subscription details along with your branding.\n\nTerms Used\n\nPlan\n: A plan allows you to define what should be billed, for what price and when.\nFor example, you could define a plan for a particular service or a product, that is to be charged ₹1000 monthly or another product/service to be charged ₹12,000 yearly. You can define multiple plans and call it Basic, Intermediate, Pro and so on. Plans can be created via the Razorpay Dashboard as well as through APIs.\n\nSubscription\n: A subscription is created from a plan, customized for each customer. Subscription also defines the date at which the subscription should start and how long is the subscription for. You can also create subscriptions with trial period.\n\nAuth Transaction\n: The auth transaction is a 3D secure authentication step before recurring payments are charged on your customer's card. It is an approval process from the customer who is subscribing to a plan and also a way to validate a card to which a subscription would be charged on a periodic basis. The auth transaction is an RBI mandate for all recurring payments in India.\n\nFAQ\n\nHow do recurring payments on Credit Cards work in India?\nRecurring payments are allowed on MasterCard and Visa network credit cards provided the customer authorizes the first transaction through a normal Two-Factor Authentication/3DSecure flow.\n\nHow do recurring payments on Debit Cards work in India?\nRecurring payments are allowed on Mastercard and Visa network cards issued by ICICI Bank, Kotak Mahindra Bank, Citibank and Canara Bank, provided the customer authorizes the first transaction through a normal Two-Factor Authentication/3DSecure flow.\n\nHow does the two-factor authentication (2FA) work with recurring payments?\nThe first transaction needs to go through the 2FA process. Further charges can be made automatically, without 2FA.\n\nWhich payment instruments support recurring payments?\nCredit cards on MasterCard and Visa network issued by any bank in India. Debit cards on Mastercard and Visa network issued by ICICI Bank, Kotak Mahindra Bank, Citibank and Canara Bank.\n\nOne of my customers received this SMS from bank.\nYour trx is debited to xxxx Bank CREDIT Card for Rs. xx.xx. This is not an authenticated trx as per RBI Mandate effective 1 May 12.\nSome customers may receive such messages from the bank for subscription transactions. However, no need to worry about it as this communication is for information only. We assure you that all transactions on Razorpay are authorised as per RBI compliance.\n\nHow to edit a plan or subscription?\nCurrently, editing a plan or subscription is not available.","id":84},{"title":"Lifecycle","desc":"Razorpay Subscription Lifecycle involves subscription states such as created, authenticated, active, pending, halted, cancelled, expired, and completed.","url":"subscriptions/lifecycle","body":"\nOnce you create a subscription, you will be able to track it as it goes through various stages. While a simple lifecycle for a subscription includes creation, authentication, active and then completion; you also have the option to cancel a subscription that you create.\nUnderstanding what happens in the natural course of a subscription helps provide the smoothest experience for both you and your users.\nA detailed explanation of each of the stages is given below.\n\nThe stages that a subscription is likely to go through are illustrated here:\n\n@image subs-cycle_1.png\n\nSubscription States\n\nCreated\n: This is the initial state of the subscription after it is created.\n\nAuthenticated\n: A subscription goes to the authenticated state when the credit card is authenticated by the customer, that is, the auth transaction has been completed. It moves to active state right before the first charge attempt is made on the subscription.\n\nActive\n: A subscription goes to the active state when the billing cycle for the subscription starts.\n\nPending\n: A subscription goes to the pending state when the last auto-charge becomes unsuccessful and we are currently retrying the payment. The merchant can, in the meanwhile, ask the customer to change the card, if required. After all the retry attempts have been exhausted, the subscription moves to halted state.\n\nHalted\n: The subscription goes to halted state when the last auto-charge becomes unsuccessful and the retries are also exhausted. Invoices continue to be created in halted state for the future billing cycles, but will not be charged. The subscription can move to active state if the customer changes their card and we are able to perform a charge on it successfully. It can also be moved to active if a charge on an older invoice is attempted and it goes through successfully. This can be done from the Dashboard. Once the subscription moves into the active state, the previous charges are not re-attempted. They will have to be re-attempted via the Dashboard manually, if required. Only the future billing cycles are charged automatically after the subscription moves to active state.\n\nCancelled\n: A subscription moves to cancelled state when the cancel API for the subscription is called or is marked as cancelled from the Dashboard. A subscription in the cancelled state cannot be restarted again.\n\nExpired\n: If the startat for the subscription has been set and the auth transaction has not been done by the startat time, the subscription moves to expired state and cannot be used again.\n\nCompleted\n: A subscription moves to completed state when it reaches the end of its lifecyle, as per the end_date set for the subscription.\n\nSubscription State Changes\n\nThe following table explains how we assist you as the subscription moves from one state to another. It highlights a few parameters and explains what this change means. It also explains what you can do during this change.\n\nCreated\n: → Authenticated\nThis indicates that the auth transaction has been completed. If you are giving a trial period to the customer, this will be the state of the subscription until the trial period ends. After which, it will move to active state.\n\n→ Expired\nThis is valid only if a startat has been provided to the subscription. This indicates that the auth transaction was not completed before the startat time and hence the subscription moved to expired state. This is a terminal state and no further actions can be taken.\n\n→ Cancelled\n This indicates the subscription has been cancelled by the merchant even before completing the auth transaction. This is a terminal state and no further actions can be taken.\n\nAuthenticated\n: → Active\nThis indicates that the invoice for the first change has been created and an attempt to charge the authorized card against the invoice amount will be made.\n  Action on Razorpay: We will attempt to charge the authorized card against the invoice amount.\n→ Cancelled\nThis indicates that the subscription has been cancelled either by customer/merchant before initiating the first charge. This could have also been initiated during the trial period. Once the subscription has been marked as cancelled, no further action can be taken on it.\n\nActive\n: → Pending\nThis indicates that the last auto-charge was unsuccessful.\nWe will ensure that a retry is initiated on the next day.\n  Action on Razorpay: You will be notified about the failed attempt via our webhooks and we will automatically process a retry without you having to take any action. We will also send the customer an email notifying about this failure. This email will also have a call-to-action from the customer for changing their card which is associated with the subscription.\n\n→ Completed\nThis indicates that the subscription has successfully reached the end of its life cycle, as per the end_date set for the subscription. This is a terminal state and no further actions can be taken.\n\n→ Cancelled\nThis indicates that the subscription has been cancelled either by the customer or the merchant during the lifecycle of a subscription. This is a terminal state and no further action can be taken.\n\nPending\n: → Halted\n This indicates the last auto-charge was unsuccessful and all the retries have been exhausted.\n  Action on Razorpay: Invoices will continue to be created for the subsequent billing periods, but will not attempt a charge. It is important to note that once the subscription moves into active state, the previous charges will not be re-attempted and only future billing cycles will be charged automatically.\n Action on merchant/customer: To move the subscription back to active state, the customer will need to change the card which will enable us to perform a charge on it successfully. The customer/merchant can also manually attempt a charge on the same card by attempting to charge any of the older unpaid invoices and it should go through successfully.\n\n→ Cancelled\nThis indicates that the subscription has been cancelled either by the customer or merchant during the lifecycle of a subscription. Since this is a terminal state, no further action can be taken.\n\n→ Active → Completed\nThis can happen during the last billing cycle of a subscription. This indicates the attempt for the last auto-charge has failed but the retry has been successful. Hence, the subscription will move from pending, active and finally to completed - marking the end of subscription. This is a terminal state.\n  Action on Razorpay: We will be firing the following webhooks: subscription.charged, subscription.active and subscription.completed.\n\n→ Halted → Completed\nThis can happen during the last billing cycle of the subscription. This indicates that all the auto-charge attempts of the last invoice has failed, the subscription is moved to halted state and then to completed state. This is a terminal state.\n  Action on Razorpay: We will be firing the following webhooks: subscription.halted, subscription.completed.\n\nHalted\n: → Active\n A subscription will move from halted to active state when: 1. A customer changes the card and performs a charge successfully. 2. The merchant/customer manually attempts a charge on an older unpaid invoice and it goes through successfully.\n Note: It is important to note that once the subscription moves into active state, the previous charges will not be re-attempted and only future billing cycles will be charged automatically.\n\n→ Completed\nThis can happen during the last billing cycle of the subscription. If the subscription state remains in halted state till the last billing cycle, it automatically moves to Completed state. Since this is a terminal state, no further action can be taken.\n\n→ Cancelled\nThis indicates that the subscription has been cancelled either by the customer or the merchant during the lifecycle of a subscription. Since this is a terminal state, no further action can be taken.\n\n→ Halted\nThis indicates the subscription has continued to remain in halted state for more than one billing cycle.\n  Action on Razorpay: Invoices will continue to generate for all billing cycles but no auto-charge will be attempted.\nAction on merchant/customer: The customer will either need to change the card or the customer/merchant will need to manually attempt a charge on an older unpaid invoice. If the older invoice is not successfully charged, the subscription will automatically move to active state.\n","id":85},{"title":"Managing Subscriptions","desc":"Manage Razorpay Subscriptions using invoices, defining trial period, upfront amount, add-ons, card change, manual charge on the same card and cancellation.","url":"subscriptions/manage","body":"\nYou can create a subscription with a trial period or an upfront amount or both! You can also include add-ons to your future invoices and handle retries using webhooks and mails. The following section explains each of these in detail to help you manage your subscriptions.\n\nInvoices\nFor all subscriptions, Razorpay automatically handles invoicing on behalf of the merchant making subscriptions a complete end-to-end solution for the merchant. Invoice includes details like plan, amount, date of charge including merchant details.\n\nThe section below describes the importance of an invoice and how it interacts with a subscription:\n\nAt the beginning of the each billing cycle, an invoice is generated for the defined plan and amount and a charge is attempted on the invoice. In this case, the invoice is in issued state on your Dashboard.\nIf the charge is successful, an email is sent to the customer informing of the same and the invoice is moved to paid state on your dashboard. At this time, a webhook is also fired informing the merchant of the same.\nIf one or more auto-charge attempts fail, an email is sent to the customer informing next steps to fix the issue.\nA merchant can manually charge on the invoice via the API or the Dashboard.\n  Until a successful charge on the invoice is made again, the invoice will be in issued state. To manually charge a customer from the Dashboard:\n \tLog in to your Dashboard.\n\tGo to Subscriptions.\n \tClick the Subcription Id in the pending state.\n \tOn the subscription details screen, click Attempt Retry. This will issue an invoice against the Subscription Id.\n \tOn the invoice details screen, click Attempt Charge to manually attempt a charge. An invoice detail screen appears as shown below:\n\n@image subs-manual-charge7.png\n\nInvoices are created for every charge made on the customer's card for the recurring payment (including the auth transaction). However, an invoice is not created when an upfront amount is absent and the start date is in the future. The table below explains different scenarios where an invoice is sent:\n\nupfront_amount\nstart_at\nInvoice sent\n\nAbsent\nImmediate\nYes\n\nAbsent\nFuture\nNo (Auth transaction)\n\nPresent\nImmediate\nYes\n\nPresent\nFuture\nYes\n\nTrial Period\nSubscriptions allow you to provide a trial period for your customers. You can create a fully-customised trial period that does not have to follow the typical 1-week or 1-month trial period. In order to create a trial period for your customers, all you need to provide is a future start-at parameter. The actual billing cycle automatically starts at the specific date - essentially creating a trial period. The following is an example of a trial period:\nAcme Corp. provides video streaming services and wants to offer a 1-month free trial.\nThe customer selects the plan on Jan 5th, 2017 and completes the auth transaction.\nDuring the auth transaction, Acme Corp. creates a subscription with start-at date of Feb 5th, 2017.\nNow, although the 2FA transaction was done on Jan 5th, 2017, the customer’s card will be charged only from Feb 5th, 2017.\nThe customer or merchant can decide to cancel the subscription at any time before that. The time between Jan 5th, 2017 and Feb 5th, 2017 could be used as a trial period.\n\nUpfront Amount\nThe upfront amount is charged at the time of auth transaction. The following is an example where an upfront amount is charged by a merchant who rents out furniture:\n\nMerchant provides furniture on rent.\nMerchant charges @data.Rs 1000 as security deposit. This needs to be collected before the delivery of furniture.\nWhile creating a subscription for the customer, merchant passes an upfront amount of @data.Rs 1000.\nAt the time of subscribing (during auth transaction), @data.Rs 1000 is collected from the customer.\n\nIn a scenario, where upfront amount is not provided by the merchant, Razorpay will collect @data.Rs 5 as part of the auth transaction to validate the credit card. The amount is called a token amount and would be refunded back to the customer with 3 to 5 business days.\nUpfront Amount is charged when the customer subscribes to a plan.\n\nThe table below explains the various scenarios of what amount is collected from the customer during auth transaction:\n\nupfront_amount\nstart_at\nauth transaction amount\n\nAbsent\nImmediate\nplan_amount\n\nAbsent\nFuture\n@data.Rs 5 (will be auto refunded)\n\nPresent\nImmediate\nupfrontamount + planamount\n\nPresent\nFuture\nupfront_amount\n\nTo charge an upfront amount, add ons key needs to be passed at the time of creating a subscription.\nRefer Subscription API for APIs around creating and fetching subscriptions.\n\nAdd-ons\n\nAdd-ons can be also be charged to your customer during the course of the subscription. Add-ons are typically charged for extra-services taken by a customer during the billing cycle.\n\nFor example, Acme Corp. is a merchant who provides DTH services. Customer requests for HD channels for the next month and it costs an additional @data.Rs 300 over the existing fixed recurring charges.\nBefore the next billing cycle, Acme Corp. can request to add @data.Rs 300 on top of the existing fixed recurring charges using add-ons.\n\n Note: Add-ons are charged for a single billing cycle only. They are not recurring in nature and will be automatically removed from the next billing cycle unless added again by the merchant.\n\nChange Card\nIn case an auto-charge on a card fails, we will send out an email notification informing your customer about the failed payment. This email will include further actions that your customer can take, which are:\nManually attempt the charge on the same card\nChange card on the subscription.\nThese emails are automated and take care of the re-try flow and no intervention is required from your end.\n\nNote: If a card change is initiated when the subscription status is pending, we will attempt to charge the latest invoice.\n\nManual Charge on the Same Card\n\nWhen a manual charge on the same card is done, @data.Rs 5 as auth transaction is carried out.\nOnce the manual charge on the card is successfully completed:\nCustomer receives an email\nYou receive a webhook.\n\nCancellation\nYou can cancel subscriptions yourself, either through the API or the Dashboard.\nCancellation takes effect immediately. Once a customer’s subscription is cancelled, no further invoices are generated on that subscription, nor any charges are attempted on the subscription. The subscription cannot be reactivated from this state.\nIf you want to refund money to the customer after cancelling a subscription, you can refund the corresponding amount on a previous payment on the subscription.\n\n Note: A merchant can opt to cancel a subscription at the end of the current subscription cycle. The subscription will then move to cancelled state at the end of the current period.\n\nA subscription can be cancelled at multiple stages such as:\n\nAuthenticated State\nActive State\nHalted State\n\nSome examples of cancelled subscription are listed below:\nIf a customer is on a trial period, the subscription can be cancelled before the trial period gets over. This ensures that the customer is not charged for the next billing cycle after the trial period ends.\nIf a subscription has been moved into the halted state, the merchant can either ask the customer to change their card or cancel the subscription, as per the business model.\nA customer can ask to cancel the subscription before the subscription cycle is complete.\n\n Note: The invoices for a subscription are created even when the subscription is in halted state. But these invoices will not be charged by us. They can be charged manually from the your merchant Dashboard.\n","id":86},{"title":"Testing","desc":"Test Razorpay Subscriptions with test webhooks, test plan and subscription, test authentication transaction, and cancellation using our APIs/dashboard.","url":"subscriptions/testing","body":"\nThis section explains how you can create a test subscription, and test the various flows that may arise during actual use.\n\nSetting up a Webhook\n\nBefore we can get started with creation and management of our test subscriptions, we will need to configure a test webhook to receive notifications pertaining to the subscriptions. You can read about how a webhook can be configured here.\n\nCreating a Plan\n\nThe very first step of testing the subscriptions flow is to create a plan. Plans act as reusable templates, and if you only need a few of them, you can create them from your Razorpay dashboard, and use them in your code while creating subscriptions.\n\n@image subscriptions-dashboard-plan-create.png\n\nIf, however, your business requires the creation of plans on-the-fly, for example, a different plan for every customer, then you can also create plans via API. A sample payload for creation of a plan is given below.\n\n{\n  \"period\": \"monthly\",\n  \"interval\": 2,\n  \"item\": {\n    \"name\": \"Test plan\",\n    \"description\": \"₹500, charged every 2 months\",\n    \"amount\": 50000,\n    \"currency\": \"INR\"\n  }\n}\n\nFor our example, we will create a plan with a billing amount of ₹500 and a cycle of 2 months.\n\ncurl -X POST \\\n  -u \"rzptestyourTestApiKey:yourTestApiSecret\" \\\n  --data \"period=monthly\" \\\n  --data \"interval=2\" \\\n  --data \"item[name]=Test plan\" \\\n  --data \"item[amount]=50000\" \\\n  --data \"item[currency]=INR\" \\\n  https://api.razorpay.com/v1/plans\n{\n  \"id\": \"plan_8se9opU8rADx2t\",\n  \"entity\": \"plan\",\n  \"interval\": 1,\n  \"period\": \"monthly\",\n  \"item\": {\n    \"id\": \"item_8se9omR728cXv9\",\n    \"active\": true,\n    \"name\": \"Test plan\",\n    \"description\": \"₹500, charged every 2 months\",\n    \"amount\": 50000,\n    \"unit_amount\": 50000,\n    \"currency\": \"INR\",\n    \"type\": \"plan\",\n    \"unit\": null,\n    \"tax_inclusive\": false,\n    \"tax_id\": null,\n    \"taxgroupid\": null,\n    \"created_at\": 1508762880,\n    \"updated_at\": 1508762880\n  },\n  \"notes\": [],\n  \"created_at\": 1508762880\n}\n\nCreating a Subscription\n\nA subscription needs to be created for every customer who is using a plan. For our example, we will create a subscription for the plan created above, to be charged a total of 6 times, and due to be started immediately. We will refer to this as Subscription A.\n\ncurl -X POST \\\n  -u \"rzptestyourTestApiKey:yourTestApiSecret\" \\\n  --data \"planid=plan8se9opU8rADx2t\" \\\n  --data \"total_count=6\" \\\n  --data \"notes[name]=Subscription A\" \\\n  https://api.razorpay.com/v1/subscriptions\n{\n  \"id\": \"sub_8seKGNhVEOwnjj\",\n  \"entity\": \"subscription\",\n  \"planid\": \"plan8se9opU8rADx2t\",\n  \"customer_id\": null,\n  \"status\": \"created\",\n  \"current_start\": null,\n  \"current_end\": null,\n  \"ended_at\": null,\n  \"quantity\": 1,\n  \"notes\": {\n    \"name\": \"Subscription A\"\n  },\n  \"charge_at\": null,\n  \"start_at\": null,\n  \"end_at\": null,\n  \"auth_attempts\": 0,\n  \"total_count\": 6,\n  \"paid_count\": 0,\n  \"customer_notify\": true,\n  \"created_at\": 1508763473\n}\n\nWe will also create a second subscription, again to be charged a total of 6 times, but which is due to start on 1st January 2020. To indicate a future starting date, we send the desired timestamp in the start_at parameter in the request. We will refer to this as Subscription B.\n\ncurl -X POST \\\n  -u \"rzptestyourTestApiKey:yourTestApiSecret\" \\\n  --data \"planid=plan8se9opU8rADx2t\" \\\n  --data \"total_count=6\" \\\n  --data \"notes[name]=Subscription B\" \\\n  --data \"start_at=1577817000\" \\\n  https://api.razorpay.com/v1/subscriptions\n{\n  \"id\": \"sub_8seLkPNmUSPxut\",\n  \"entity\": \"subscription\",\n  \"planid\": \"plan8se9opU8rADx2t\",\n  \"customer_id\": null,\n  \"status\": \"created\",\n  \"current_start\": null,\n  \"current_end\": null,\n  \"ended_at\": null,\n  \"quantity\": 1,\n  \"notes\": {\n    \"name\": \"Subscription B\"\n  },\n  \"charge_at\": 1577817000,\n  \"start_at\": 1577817000,\n  \"end_at\": 1580841000,\n  \"auth_attempts\": 0,\n  \"total_count\": 6,\n  \"paid_count\": 0,\n  \"customer_notify\": true,\n  \"created_at\": 1508763558\n}\n\nBoth subscriptions are now in created state, and await a authentication transaction wherein the payer will authorize the use of his card by the subscription.\n\nMaking the Auth Payment\n\nTo authenticate a subscription, you will need to make a regular payment using Razorpay, but pass an extra subscription_id parameter in the options sent to checkout.js. To see this in action, use the following piece of code on a test webpage, and hit the Authenticate button. This will trigger a Razorpay payment that will in turn authenticate the subscription.\n\n    Authenticate\n\n      var options = {\n        \"key\": \"rzptest9bhKjJVNxvO3rB\",\n        \"subscriptionid\": \"sub8seKGNhVEOwnjj\",\n        \"name\": \"My Billing Label\",\n        \"description\": \"Auth txn for sub_8seKGNhVEOwnjj\",\n        \"handler\": function (response){\n          alert(response.razorpaypaymentid);\n        }\n      };\n      var rzp1 = new Razorpay(options);\n      document.getElementById('rzp-button').onclick = function(e){\n        rzp1.open();\n      }\n\nThese are the bare minimum options that need to be sent to initiate a payment, i.e. only key and subscription_id are mandatory. A complete list of options that can be passed can be found here.\n\nAmount\n\nNote that unlike a regular payment, amount does not need to be passed as an option here. This is because the amount to be charged is determined completely by the subscription that is being authenticated.\n\n For Subscription A, which is to start immediately upon completion of this payment, the charge amount will be ₹500, i.e. the amount we used while creating the plan.\n For subscription B, this payment acts only as an authentication step, as the subscription is not due to start until January 2020. So for subscription B, the charge amount is ₹5 - a token amount that will be immediately refunded.\n\nTest Card\nFor the test payment itself, you can use card number 5104015555555558 with any CVV, and any future expiry date. This is a test card that is valid for subscription payments. On usage of this card, you will be prompted to succeed or fail this payment on the mocked bank page.\n\nIf you choose to succeed the payment, the payment response will contain a few fields carrying information about the subscription that has been authenticated. You can read more about how this payment response can be authenticated here.\n\nEffects of the Auth Payment\nOnce the payment has been successfully, Subscription A is marked as active. At this stage you will also receive the webhook payloads for 2 events that Subscription A has gone through.\n Firstly, you will receive the subscription.activated webhook when Subscription A moves from created to activated state.\n Then, almost immediately afterwards, you will also receive the subscription.charged webhook when Subscription A moves from authenticated state to active state.\n\nNote that performing the same payment request on Subscription B will result it being marked as authenticated. It is not charged just yet, as it not due to be started at all for a few months. For this reason, no webhook events are triggered by performing an auth payment for Subscription B.\n\nSubsequent Charges\n\nAfter the first payment, i.e. the authentication of the subscription, all subsequent charges are triggered automatically by Razorpay. When these charges are triggered, the result or the impact upon the subscriptions entity is communicated via webhooks.\n\nIn test mode, it is possible to simulate these charges from the Razorpay dashboard, using the 'Charge This Now' button. Using this option, you can trigger all the same events and notifications that you would normally expected to take place on the next date that a subscription is due. Thus there is no need to wait till the start of January 2020 to see how Subscription B behaves in reponse to different events, as all of these events can be triggered before their given due date, in test mode.\n\n@image subscriptions-dashboard-test-charge.png\n\nExpected Webhooks\nYou can now integrate with our webhooks and ensure that the different webhook events are being consumed correctly.\n\nWith regards to our example, attempting a test charge on Subscription A will result in only one webhook event being triggered, i.e. simply subscription.charged.\n\nHowever, attempting a test charge from dashboard on Subscription B will result it moving from authenticated state to active state. This indicates that the start_at time of Subscription B has passed, and this will trigger an subscription.activated webhook. This is immediately followed by the charge itself, which will be trigger a subscription.charged webhook event.\n\nCharge Failures\n\nDuring the automatic charges initiated by Razorpay, it is possible that a charge attempt on the card saved for a subscription could fail. In this case too, failure event webhooks are triggered.\n\nTo simulate this in test mode, when used, the test charge option will prompt you to choose the result of a charge attempt. This is similar to the screen you had seen earlier, for the auth payment, when deciding on which result to choose for a test payment.\n\n@image subscriptions-dashboard-test-charge-result.png\n\n If you decide to charge a subscription as a success, a new payment is simply created (and captured), and a subscription.charged webhook is triggered.\n If you decide to charge a subscription as a failure, the subscription moves from active to pending state, and a subscription.pending webhook event is triggered. With each failure, the number of charge attempts made on a subscription increase, and the next charge time is updated by a single day, rather than the actual plan period, which in this case is two months.\n If you fail a charge 4 times in a row, you will have exhausted your remaining retries, and this results in a subscription being marked as halted. A subscription.halted webhook event is triggered as well.\n\nHalted Subscriptions\n\nOnce a subscription has reached halted state, Razorpay will no longer trigger automatic charge attempts on the saved card. However, invoices will continued to be issued in accordance with the orignal plan.\n\nIn test mode as well, the 'Charge This Now' button available on dashboard is replaced with an 'Issue Invoice' button for halted subscriptions. Using this option will issue a new invoice, but a charge will not be attempted on the saved card.\n\nManually Charging an Invoice\n\nThe invoices created by a subscription may remain in issued state if the charge attempts on the saved card result in failure. Once the max retries attempts are exhausted, the subscription is halted and moves on to the next plan period.\n\nHowever, the invoice that got left behind in that manner is still chargeable, after the customer has fixed the issue on his/her end (either by correcting the issue with his/her card, or simply changing the card associated with a subscription). This is via the 'Attempt Charge' option available for each invoice on dashboard. Using this option triggers a new charge attempt on that issued invoice, and not increase the number of retries remaining for a subscription.\n\n@image subscriptions-dashboard-invoice-manual-charge.png\n\n  A manual charge of an issued invoice is distinct from a test charge of a subscription.\n  A manual charge on an invoice is possible even in live mode, anytime an issue is observed to be in issued state. A manual charge attempt does not count towards he remaining retries that a subscription.\n  A charge of a subscription has be triggered by the merchant only in test mode, and the result of this charge attempt is up to the merchant. If failed, these attempts count towards the remaining retries that a subscription has before it moves to halted state.\n\nCompletion and Cancellation\n\nA subscription can be moved to any of the terminal states in the following ways.\n Charging a subscription repeatedly in test mode, until all the invoices for a subscription have been issued.\n Cancelling a subscription via dashboard or API.\n\n@image subscriptions-dashboard-cancel.png\n","id":87},{"title":"Using Webhooks","url":"subscriptions/webhooks","body":"\nWebhooks are used to notify your site about events that occur on your account. Although webhooks can be used for many purposes, they are especially important when using subscriptions, as most activity occurs asynchronously and behind the scenes.\n\nAny activity performed with regards to a subscription can be notified to your system via webhooks.\n\nTo use webhooks with your subscriptions, follow the general webhooks guide to create your webhook endpoint.\n\nAvailable Webhooks\n\nSome of the webhooks that you can enable with subscriptions are listed below:\n\nsubscription.activated\n: Sends an event when the subscription moves to activated state. This event is fired even when the subscription moves from pending or halted to active state. Note that the last charge would not be attempted if a subscription has been moved to active from pending or halted. Only the subsequent billing cycles would be charged.\n\nsubscription.charged\n: This event is fired every time there is a successful charge on the subscription.\n\nsubscription.pending\n: Sends an event when the subscription has moved into pending state. This happens when the charge has failed. We would retry charging the card on a periodic basis in the meantime.\n\nsubscription.halted\n: Sends an event when all retries have been exhausted and the subscription has now moved to halted state. The customer would have to manually retry the charge or change their card, for the subscription to move into active state again.\n\nsubscription.cancelled\n: This event is fired when a subscription is cancelled and is moved to the cancelled state.\n\nsubscription.completed\n: Once a subscription completes all the billing cycles, this event gets fired. This is basically called when the subscription moves to completed state.\n\nNote: The payload for all these events would contain the subscription entity. They would also contain a payment entity if a payment attempt was made before the event was triggered. Refer the payloads examples given in the Sample Payload page.\n\nExamples\n\nSome examples on where you can use webhooks are given below:\n\nDelivering the service after receiving subscription.charged.\nHalting the service when you receive subscription.halted or delaying the service when you receive subscription.pending\nCommunicating to the customer for a change of card or reattempting a charge when you receive subscription.pending or subscription.halted events.\nResume the service if delayed or halted, on receiving subscription.activated. The last charge would have to be reattempted manually from the dashboard or via the API, after the subscription moves into active state from halted or pending.\n","id":88},{"title":"Team Support","url":"team-support","body":"\nIntroduction\n\nYou can invite members in your organization and assign various roles to team using the option Team provided in the Razorpay Dashboard.\n\nTo access the Team feature:\n\nOn the Razorpay Dashboard, click My Account.\nClick Manage Team  tab.\n\nThe Manage Team screen appears as shown below. Select User Role from the drop-down.\n\nYou can invite anyone to your Razorpay account. Every user will have their own email and password. If you invite an existing user to your dashboard, they will see the invite in the profile section of the Dashboard.\n\nIf the user you have invited does not have an account, a registration link is sent on their email. They will then have to accept the invite and create an account by providing a username and password.\n\nSwitching Accounts\nAfter accepting the invite, the user can switch between both the accounts using a switcher option Switch Merchant available in the Dashboard header.\n\nThe Dashboard also displays any pending invites that you may have, as shown below:\n\nThe list of Pending invitations will be as shown below:\n\nOnce a user has accepted an invite, you can view the list of users that you have added in your team. You can choose to Remove or Update their roles, as required.\n\nThe following table explains each of the roles and the permissions in details:\n\nDashboard Permissions | Owner | Admin | Manager | Operations | Finance | Support | ePOS\n\nPayments | All | All | All | All | Read only | Read only | None\n\nOrders | All | All | All | Read only | Read only | Read only | None\n\nRefunds | All | All | All | All | Read only | Read only | None\n\nInvoices | All | All | All | Read only | Read only | Read only | None\n\nReferrals | All | All | All | Read only | Read only | Read only | None\n\nSettlements | All | All | All | Read only | Read only | None | None\n\nAdd Funds | All | All | All | All | Read only | Read only | None\n\nReports | All | All | All | Read only | Read only | None | None\n\nTeam | All | None | None | None | None | None | None\n\nCredits | All | All | All | Read only | Read only | None | None\n\nAPI Keys | All | All | None | None | None | None | None\n\nActivation | All | All | All | None | None | None | None\n\nWebhook | All | All | All | None | None | None | None\n\nProfile | All | All | All | All | All | All | All\n\nProfile- GST Details | All | None | None | None | All | None | None\n\nConfiguration | All | All | All | None | None | None | None\n\nPayment Links | All | All | All | All | Read only | None | All\n\nFinance role cannot perform any action on the payment such as capture or refund.","id":89},{"title":"Test Cards Details","url":"test-card","body":"\nUse our test cards, any future expiry and a random CVV to inspect a flow. The domestic and international test card details as given in the tables below:\n\nDomestic\n\nMastercard | 5104 0155 5555 5558\n5104 0600 0000 0008\n\nVisa | 4111 1111 1111 1111 |\n\nInternational\n\nMastercard | 5555 5555 5555 4444\n5105 1051 0510 5100\n\nVisa | 4012 8888 8888 1881\n4000 1841 8621 8826\n","id":90},{"title":"Subscription","url":"test-card/subscriptions","body":"\nFor the testing the auth  payment for Razorpay Subscription, you can use the following test card that is valid for subscription payments:\n\nTest Card\n\nMastercard | 5104015555555558\n\nUse the above with any CVV, and any future expiry date. On usage of this card, you will be prompted to succeed or fail this payment on the mocked bank page.\n\nIf you choose to succeed the payment, the payment response will contain a few fields carrying information about the subscription that has been authenticated. You can read more about how this payment response can be authenticated here.\n\nLearn more about Razorpay Subscription.","id":91},{"title":"Webhooks","desc":"Use webhooks to get notified when Razorpay payment are authorized, captured, failed, order paid, invoice paid/expired, settlement processed and dispute created.","url":"webhooks","body":"Introduction\n\nWebhooks allow you to build or set up integrations which subscribe to\ncertain events on Razorpay API. When one of those events is triggered,\nwe send an HTTP POST payload in JSON to the webhook's configured URL.\n\nYou can set up a webhook from your dashboard and configure separate URLs\nfor live mode and test mode.\nA test mode webhook will only receive events for your test transactions.\nIn URLs, only port numbers 80 and 443 are currently allowed.\n\nWhen setting up the webhook, you will be asked to specify a secret. Using\nthis secret, you can validate that the webhook is from Razorpay. Entering the\nsecret is optional but recommended. The secret should never be exposed anywhere\npublicly.\n\nIdempotency\nYour server should be configured to handle or receive the same event\ndetails multiple times. In case you are receiving the same webhook event again,\nyou should check for the same webhook event data and ignore it.\n\nDeactivation\n\nAll webhook responses must return a status code in the range 2XX within a window\nof 5 seconds. If we receive response codes other than this or if the request\ntimes out, it is considered a failure. On failure, a webhook is retried once every hour for 24 hours. If we keep receiving failure responses consecutively for 24 hours, we disable the webhook. You will then need to manually\nre-enable the webhook from the Dashboard after fixing the errors at your end.\n\nNote: For every failure, we send out an email notification along with the reason\nand the error code received by us.\n\nAvailable Events\nFollowing table describes the events for which webhooks are currently\navailable:\n\nPayments\npayment.authorized\n: Triggered whenever a payment is authorized.\n\npayment.captured\n: Triggered whenever a payment is successfully captured.\n\npayment.failed\n: Triggered whenever a payment fails.\n\nOrders\n\norder.paid\n: Triggered when an order is successfully paid.\n\nInvoices\n\ninvoice.paid\n: Triggered when an invoice is successfully paid.\n\ninvoice.expired\n: Triggered when an invoice gets expired.\n\nSettlements\n\nsettlement.processed\n: Triggered when a transfer made to a linked account is settled with the parent merchant. (Available only for Razorpay Route.\n\nDisputes\n\npayment.dispute.created\n: Triggered when a dispute is raised by the issuing bank of the customer against a payment.\n\npayment.dispute.won\n: Triggered when a merchant has won a dispute against a payment.\n\npayment.dispute.lost\n: Triggered when a merchant has lost a dispute against a payment.\n\npayment.dispute.closed\n: Triggered when a dispute is closed.\n\nYou can view sample payloads of the above mentioned events here.\n\nUse Cases\nThere can be multiple usages of webhook events. Two of which are listed\nbelow:\n\nCapturing Delayed Authorized Payments\nCapturing payments for which you did not receive a response on client side\nis perhaps the most important use case for payment.authorized event.\nSometimes, the communication between the bank and Razorpay or between you and\nRazorpay may not take place. This could be due to slow network connection, or\nclosing the window when payment is being processed.\nThis could lead to a payment being marked as Failed on Razorpay Dashboard\nbut changed to Authorized at a later time. You can use webhooks to get\nnotified about payments that get authorized and analyse this data to decide\nwhether or not to capture the payment.\n\nNotifications on Failed Payments\nWhen a payment attempted by your customer fails, we receive the failed payment status\nfrom the bank. This payment gets recorded in our system as Failed.\nIf you have enabled the webhook for the event payment.failed, you will receive a\nnotification from us about the failed payment. You can then further analyse this payment\nand send out an email to your customer informing them about the same.\n","id":92},{"title":"Integration","desc":"Integrate webhooks and get notified on various Razorpay payment events by setting up webhooks and validate webhook signature on all our SDKs.","url":"webhooks/integrations","body":"You can integrate webhooks and receive webhook payloads as and when an event occurs.\n\nSetting up\n\nTo setup webhook for various events\n\nGo to Razorpay Dashboard> Settings > Webhooks.\nClick Setup your Live Webhook.\nEnter the Webhook URL where you will receive the webhook payload when the\nevent is triggered.\nEnter Secret. This field is optional.\n\n        Note: The secret that you enter here can be used to validate that the\n        webhook is from Razorpay. This should not be exposed publicly.\n        The details about how webhooks can be validated using the secret are mentioned\n        in the following section.\n\nSelect events from the list of Active Events that you would like to activate.\nClick Save to enable the webhook.\n\nValidation\n\nWhen your webhook secret is set, Razorpay uses it to create a hash signature with\neach payload.\n\nThis hash signature is passed along with each request under the X-Razorpay-Signature\nheader which you need to validate at your end.\n\nX-Razorpay-Signature\n: The hash signature is calculated using HMAC with SHA256 algorithm; with\nyour webhook secret set as the key, and the webhook request body as the message.\n\nSupport for validating the signature is provided in all of our SDKs:\n\n// PHP SDK: https://github.com/razorpay/razorpay-php\nuse Razorpay\\Api\\Api;\n$api = new Api(\"\", \"\");\n\n$api->utility->verifyWebhookSignature($webhookBody, $webhookSignature, $webhookSecret);\nPython SDK: https://github.com/razorpay/razorpay-python\nimport razorpay\nclient = razorpay.Client(auth=(\"\", \"\"))\n\nclient.utility.verifywebhooksignature(webhookbody, webhooksignature, webhook_secret)\nRuby SDK: https://github.com/razorpay/razorpay-ruby\nrequire razorpay\n\nRazorpay::Utility.verifywebhooksignature(webhookbody, webhooksignature, webhook_secret)\n// C# SDK: https://github.com/razorpay/razorpay-dot-net\n\nUtils.verifyWebhookSignature(webhookBody, webhookSignature, webhookSecret);\n// Java SDK: https://github.com/razorpay/razorpay-java\n\nUtils.verifyWebhookSignature(webhookBody, webhookSignature, webhookSecret);\n\nYou can also validate the webhook signature yourself using an HMAC calculated as shown below:\n\nkey                = webhook_secret\nmessage            = webhook_body\nreceivedsignature = webhooksignature\n\nexpected_signature = hmac('sha256', message, key)\n\nif expectedsignature != receivedsignature\n    throw SecurityError\nend\n","id":93},{"title":"Sample Payload","desc":"Integrate webhooks on Razorpay payment gateway and view sample payloads for payments, orders, invoices, subscriptions and dispute created events.","url":"webhooks/webhook-payloads","body":"Following are samples of various webhook payloads in JSON structure.\nThese are returned as and when each of these payment events occur:\n\nPayment Authorized\n\nThe sample payload posted for the payment.authorized event is shown below.\npayment.failed and payment.captured events have a similar structure\nexcept that the values differ slightly.\n\n{\n  \"event\": \"payment.authorized\",\n  \"entity\": \"event\",\n  \"contains\": [\n    \"payment\"\n  ],\n  \"payload\": {\n    \"payment\": {\n      \"entity\": {\n        \"id\": \"pay_6X6jcHoHdRdy79\",\n        \"entity\": \"payment\",\n        \"amount\": 50000,\n        \"currency\": \"INR\",\n        \"status\": \"authorized\", // for payments that have failed, the status would be \"failed\".\n        \"amount_refunded\": 0,\n        \"refund_status\": null,\n        \"method\": \"card\",\n        \"orderid\": \"order6X4mcHoSXRdy79\",\n        \"cardid\": \"card6GfX4mcIAdsfDQ\",\n        \"bank\": null,\n        \"captured\": true,\n        \"email\": \"gaurav.kumar@example.com\",\n        \"contact\": \"9123456780\",\n        \"description\": \"Payment Description\",\n        \"error_code\": null,\n        \"error_description\": null,\n        \"fee\": 200,\n        \"tax\": 10,\n        \"international\": false,\n        \"notes\": {\n          \"reference_no\": \"848493\"\n        },\n        \"vpa\": null,\n        \"wallet\": null\n      }\n    },\n    \"created_at\": 1400826760\n  }\n}\n\nNote: The webhook data regarding an entity or payment contains a snapshot\nof the entity when the event occurred. A webhook corresponding to a\npayment.authorized event will contain payment entity snapshot when the payment\nwas authorized.\nWhile the webhook is delivered, it may be that the payment had already been\ncaptured, however, the webhook data about the payment entity will not be updated\nas it is a snapshot. You may query the Razorpay API with the payment ID to get the\nlatest status of the payment.\n\nOrder Paid\n\nThe sample payload given below is posted for the order.paid event:\n\n{\n  \"entity\": \"event\",\n  \"event\": \"order.paid\",\n  \"contains\": [\n    \"payment\",\n    \"order\"\n  ],\n  \"payload\": {\n    \"payment\": {\n      \"entity\": {\n        \"id\": \"pay_8B33XWu170gVbv\",\n        \"entity\": \"payment\",\n        \"amount\": 29935,\n        \"currency\": \"INR\",\n        \"status\": \"captured\",\n        \"orderid\": \"order9A33XWu170gUtm\",\n        \"invoice_id\": null,\n        \"international\": false,\n        \"method\": \"upi\",\n        \"amount_refunded\": 0,\n        \"refund_status\": null,\n        \"captured\": true,\n        \"description\": null,\n        \"card_id\": null,\n        \"bank\": null,\n        \"wallet\": null,\n        \"vpa\": \"gauravkumar@okexmpl\",\n        \"email\": \"gaurav.kumar@example.com\",\n        \"contact\": \"+919123456780\",\n        \"notes\": {\n          \"loginID\": \"1234567890\",\n          \"lobID\": \"1\",\n          \"txnID\": \"123456789012\"\n        },\n        \"fee\": 598,\n        \"tax\": 3592,\n        \"error_code\": null,\n        \"error_description\": null,\n        \"created_at\": 1536137632\n      }\n    },\n    \"order\": {\n      \"entity\": {\n        \"id\": \"order_9A33XWu170gUtm\",\n        \"entity\": \"order\",\n        \"amount\": 29935,\n        \"amount_paid\": 29935,\n        \"amount_due\": 0,\n        \"currency\": \"INR\",\n        \"receipt\": \"123456789012\",\n        \"offer_id\": null,\n        \"status\": \"paid\",\n        \"attempts\": 1,\n        \"notes\": [],\n        \"created_at\": 1536137630\n      }\n    }\n  },\n  \"created_at\": 1536137660\n}\n\nInvoice Paid\n\nThe sample payload given below is posted for the invoice.paid event:\n\n{\n  \"entity\": \"event\",\n  \"event\": \"invoice.paid\",\n  \"contains\": [\"payment\", \"order\", \"invoice\"],\n  \"payload\": {\n    \"payment\": {\n      \"entity\": {\n        \"id\": \"pay_5k7WN7vvxujrxn\",\n        \"entity\": \"payment\",\n        \"amount\": 10000,\n        \"currency\": \"INR\",\n        \"status\": \"captured\",\n        \"orderid\": \"order6koWN7bvxujzxM\",\n        \"invoiceid\": \"inv6GfX4mcIAdsfDQ\",\n        \"international\": false,\n        \"method\": \"card\",\n        \"amount_refunded\": 0,\n        \"refund_status\": null,\n        \"captured\": true,\n        \"description\": \"A Wild Sheep Chase is the third novel by Japanese author Haruki Murakami\",\n        \"cardid\": \"card6koWNAT6LASUqy\",\n        \"bank\": null,\n        \"wallet\": null,\n        \"vpa\": null,\n        \"email\": \"gaurav.kumar@example.com\",\n        \"contact\": \"9123456780\",\n        \"notes\": {\n          \"merchantorderid\": \"merchantrecieptid\"\n        },\n        \"fee\": 23000,\n        \"tax\": 3000,\n        \"error_code\": null,\n        \"error_description\": null,\n        \"created_at\": 1479978483\n      }\n    },\n    \"order\": {\n      \"entity\": {\n        \"id\": \"order_6koWN7bvxujzxM\",\n        \"entity\": \"order\",\n        \"amount\": 10000,\n        \"currency\": \"INR\",\n        \"receipt\": \"random\",\n        \"status\": \"paid\",\n        \"attempts\": 1,\n        \"notes\": [],\n        \"created_at\": 1479978483\n      }\n    },\n    \"invoice\": {\n      \"entity\": {\n        \"id\": \"inv_6GfX4mcIAdsfDQ\",\n        \"receipt\": null,\n        \"entity\": \"invoice\",\n        \"customerid\": \"cust6koWNAT6LASUqt\",\n        \"customer_details\": {\n          \"name\": \"test\",\n          \"email\": \"gaurav.kumar@example.com\",\n          \"contact\": \"9123456780\",\n          \"address\": null\n        },\n        \"orderid\": \"merchantreciept_id\",\n        \"line_items\": [],\n        \"paymentid\": \"pay5k7WN7vvxujrxn\",\n        \"status\": \"paid\",\n        \"issued_at\": null,\n        \"paid_at\": 1479978484,\n        \"sms_status\": \"sent\",\n        \"email_status\": \"sent\",\n        \"date\": null,\n        \"terms\": null,\n        \"amount\": 10000,\n        \"notes\": [],\n        \"currency\": \"INR\",\n        \"short_url\": \"http://bit.ly/3he311a\",\n        \"view_less\": true,\n        \"type\": \"link\",\n        \"created_at\": 1479978483\n      }\n    }\n  },\n  \"created_at\": 1479978484\n}\n\nInvoice Expired\n\nThe sample payload given below is posted for the invoice.expired event:\n\n{\n  \"entity\": \"event\",\n  \"event\": \"invoice.expired\",\n  \"contains\": [\"invoice\"],\n  \"payload\": {\n    \"invoice\":{\n      \"entity\":{\n        \"id\":\"inv_6koWN7bvxujzxM\",\n        \"entity\":\"invoice\",\n        \"receipt\":null,\n        \"invoice_number\":null,\n        \"customerid\":\"cust6koWN7bvxujzxM\",\n        \"customer_details\":{\n          \"name\":\"test\",\n          \"email\":\"gaurav.kumar@example.com\",\n          \"contact\":\"9123456780\",\n          \"billing_address\":null,\n        },\n        \"orderid\":\"order6koWN7bvxujzxM\",\n        \"payment_id\":null,\n        \"status\":\"expired\",\n        \"expire_by\":1505201091,\n        \"issued_at\":1505088000,\n        \"paid_at\":null,\n        \"cancelled_at\":null,\n        \"sms_status\":\"sent\",\n        \"email_status\":\"sent\",\n        \"date\":null,\n        \"terms\":null,\n        \"partial_payment\":false,\n        \"gross_amount\":null,\n        \"tax_amount\":null,\n        \"amount\":10000,\n        \"amount_paid\":0,\n        \"amount_due\":10000,\n        \"currency\":\"INR\",\n        \"description\":null,\n        \"notes\":[],\n        \"comment\":null,\n        \"short_url\":\"https://rzp.io/xyzxyzx\",\n        \"view_less\":true,\n        \"billing_start\":null,\n        \"billing_end\":null,\n        \"type\":\"invoice\",\n        \"grouptaxesdiscounts\":false,\n        \"user_id\":null,\n        \"created_at\":1505201092\n      }\n    }\n  },\n  \"created_at\":1505201092\n}\n\nSubscription Charged\n\nThe sample payload given below is posted for the subscription.charged event:\n\n{\n  \"entity\": \"event\",\n  \"event\": \"subscription.charged\",\n  \"contains\": [\"subscription\", \"payment\"],\n  \"payload\": {\n    \"subscription\": {\n      \"entity\": {\n        \"id\": \"sub_9YTNCoIHdixfPk\",\n        \"entity\": \"subscription\",\n        \"planid\": \"plan9Y8NDP057sq5b1\",\n        \"customerid\": \"cust9WfpcOkyPzub0L\",\n        \"status\": \"active\",\n        \"current_start\": 1517895195,\n        \"current_end\": 1525545000,\n        \"ended_at\": null,\n        \"quantity\": 1,\n        \"notes\": [],\n        \"charge_at\": 1525545000,\n        \"start_at\": 1517895195,\n        \"end_at\": 1541442600,\n        \"auth_attempts\": 0,\n        \"total_count\": 4,\n        \"paid_count\": 1,\n        \"customer_notify\": false,\n        \"created_at\": 1517895187\n      }\n    },\n    \"payment\": {\n      \"entity\": {\n        \"id\": \"pay_9YTNKSVmLS8uAq\",\n        \"entity\": \"payment\",\n        \"amount\": 30000,\n        \"currency\": \"INR\",\n        \"status\": \"captured\",\n        \"orderid\": \"order9YTNCv2ONTsBcJ\",\n        \"invoiceid\": \"inv9YTNCs15NFi8xm\",\n        \"international\": false,\n        \"method\": \"card\",\n        \"amount_refunded\": 0,\n        \"refund_status\": null,\n        \"captured\": true,\n        \"description\": \"Your family doctor\",\n        \"cardid\": \"card9YTNLbCisI3wAb\",\n        \"card\": {\n          \"id\": \"card_9YTNLbCisI3wAb\",\n          \"entity\": \"card\",\n          \"name\": \"shahnawaz bag\",\n          \"last4\": \"5558\",\n          \"network\": \"MasterCard\",\n          \"type\": \"credit\",\n          \"issuer\": \"KARB\",\n          \"international\": false,\n          \"emi\": false\n        },\n        \"bank\": null,\n        \"wallet\": null,\n        \"vpa\": null,\n        \"email\": \"gaurav.kumar@example.com\",\n        \"contact\": \"9123456780\",\n        \"customerid\": \"cust9WfpcOkyPzub0L\",\n        \"notes\": [],\n        \"fee\": 870,\n        \"tax\": 0,\n        \"error_code\": null,\n        \"error_description\": null,\n        \"created_at\": 1517895195\n      }\n    }\n  },\n  \"created_at\": 1517895204\n}\n\nNote: The subscription.charged payload contains the subscription entity and a payment entity. A payment entity is included in the payload if a payment attempt was made before the event was triggered.\n\nPayment Dispute Created\n\nThe sample payload given below is posted for the payment.dispute.created event.\npayment.dispute.lost, payment.dispute.won, and payment.dispute.closed events\nhave a similar structure except that the values differ slightly.\n\n{\n \"entity\": \"event\",\n \"event\": \"payment.dispute.created\",\n \"contains\": [\n  \"payment\",\n  \"dispute\"\n ],\n \"payload\": {\n  \"payment\": {\n   \"entity\": {\n    \"id\": \"pay_9EnFZTBmQcxoUA\",\n    \"entity\": \"payment\",\n    \"amount\": 50000,\n    \"currency\": \"INR\",\n    \"status\": \"captured\",\n    \"order_id\": null,\n    \"invoice_id\": null,\n    \"international\": false,\n    \"method\": \"netbanking\",\n    \"amount_refunded\": 0,\n    \"amount_transferred\": 0,\n    \"refund_status\": null,\n    \"captured\": true,\n    \"description\": \"Add Funds to Account\",\n    \"card_id\": null,\n    \"bank\": \"HDFC\",\n    \"wallet\": null,\n    \"vpa\": null,\n    \"email\": \"gaurav.kumar@example.com\",\n    \"contact\": \"9123456789\",\n    \"notes\": {\n     \"dashboard\": \"true\"\n    },\n    \"fee\": 1476,\n    \"tax\": 226,\n    \"error_code\": null,\n    \"error_description\": null,\n    \"created_at\": 1513598384\n   }\n  },\n  \"dispute\": {\n   \"entity\": {\n    \"id\": \"disp_9bg0Jxor3LpROR\",\n    \"entity\": \"dispute\",\n    \"paymentid\": \"pay9EnFZTBmQcxoUA\",\n    \"amount\": 45000,\n    \"amount_deducted\": 0,\n    \"currency\": \"INR\",\n    \"gatewaydisputeid\": \"dfghj\",\n    \"reasoncode\": \"chargebackauthorization\",\n    \"respond_by\": 1518853863,\n    \"status\": \"open\",\n    \"phase\": \"chargeback\",\n    \"created_at\": 1518594688\n   }\n  }\n },\n \"created_at\": 1518594688\n}\n","id":94},{"title":"Razorpay Platform Integration","url":"integrations/guides/platform","body":"\nYou can integrate Razorpay payments as a gateway into any e-commerce platform. This could be e-commerce plugins such as Wordpress, Drupal or Spree Commerce.\n\nIntegrations Quick Guide\n\nThis is what the integration must do, in sequence, To integrate Razorpay for processing payments:\n\nSections marked :lock: are important and needs to be considered for security purposes.\n\nCreate an order from the backend using the Orders API.\n    :lock:: All the parameters for this call must be generated on the server, and not accepted from user input.\n    Ensure that the currency is set to INR. If the customer's currency is not INR, convert it to INR.\n    Pass amount in Paise. For example, 50.45 INR has to be passed as 5045 in the amount parameter.\n    The receipt parameter should be the order ID at your end. If you do not have an invoice/order ID, you can generate one. This is something that you will be quoting to your customers.\nStore the order ID at your end. The order ID starts with order and is 20 characters long (including the order prefix). Store it in the session or the database.\nOpen Checkout, with all the required parameters. Also, ensure that you pass the order_id parameter as well. Using automatic checkout is recommended, unless you are well versed with JavaScript.\n4 Set the form action parameter in automatic checkout to your post-processing page.\nStore the following 3 parameters from post submission:\n  razorpaypaymentid\n  razorpay_signature\n  razorpayorderid\n:lock: Verify the signature using the 3 parameters.\n:lock: If the signature verification passes, lookup your invoice/order ID against the razorpayorderid, and mark that as successful.\n\nFAQs\n\nHow do I signup for a test account?\n\nYou can signup for a Razorpay account at https://dashboard.razorpay.com. You don't need to submit any documents, and the test mode is enabled for your account as soon as you confirm your email address.\n\nHow do I find SDKs for various languages?\n\nWe provide ready-to-use SDK packages for various languages. You can find a complete list at razorpay.com/integrations/. If the language you prefer is not in the list, you can continue making the requests using CURL or HTTP package of that particular language.\n\nHow to create a Razorpay API instance?\n\nPlease see the README file of that particular SDK.\n\nHow do I find my Razorpay credentials?\n\nThe email/password is only used to login to the Dashboard. To authenticate against the API, you will need to generate a KeyID, and KeySecret. You can generate the same by logging in to the dashboard, then visiting the Settings->API Keys section.\n\nHow do I find the base URL for Razorpay API?\n\nThe current Razorpay API is versioned at v1, so all requests should be made to https://api.razorpay.com/v1/\n\nHow do I find Sample Code for my language?\n\nWe have sample applications for many languages, and you can find the same at razorpay.com/integrations/.\n\nHow do I decide between automatic or manual checkout?\n\nAutomatic checkout is usually very easy to integrate into your own product. However, when you have multiple products, or a complex way to pre-calculate amount for a payment (in javascript), you can switch to the manual checkout method for greater control.\n\nRule of thumb: Use Automatic Checkout if you are confused. Manual Checkout is helpful if you are integrating with a Javascript framework, or want more control in the payment process. See our Checkout Docs for more details.\n\nCommon Gotchas\n\nFollowing are some of the common issues that you must watch out for while integrating:\n\nNot storing the Razorpay Order ID at your end.\nPassing the amount from the frontend to the Razorpay order creation call.\nPassing USD or any other non-INR currency while creating the order.\nPassing razorpayorderid from the frontend while verifying the signature.\n\nAlternatively, you can use this value to check the integrity of the signature, while looking up the corresponding order at your end with this Razorpay Order ID and marking only that as successful.\n\nChecklist\n\nAn integration related to-do list is given below. Ensure that you have taken into account all of the following while integrating:\n\nClone Razorpay Sample application in your language and test the flow with it.\nCorrectly generate the Razorpay Order ID.\nCorrectly show checkout to the customer.\nVerify the signature post checkout form submission.\nDisplay a confirmation message to the customer.\nMark the Platform Order as successful after looking up razorpayorderid.\nTest for failure cases.\n\nSpecial Use Cases\n\nFollowing are some specific cases whose integration is handled on case-to-case basis:\n\nDonations\n\nIf the platform is used for Donations, you cannot rely on the amount to be generated on the backend. While you will be ignoring this check, you should still be storing the Razorpay Order ID, and re-verifying it after payment completion.\n\nAlso, note that we won't be able to activate all non-profits, and would be considering such merchants on a case-to-case basis.\n\nWebviews\n\nIf your website is likely to be accessed mostly in the facebook browser, or via other mobile applications in a webview, it might face certain issues. See our docs for more details on how to handle this.\n\nNetwork Connectivity Issues\n\nIf the customer has an issue with the network connectivity, your website will not be informed of the customer completing the payment. In such cases, you can use Webhooks to get notified of all authorized payments, and mark them as successful at your end.\n\nHelp and Support\n\nYou can get in touch with us at https://razorpay.com/support for any queries.\nIf you have a registered merchant account, you can also use the Support chat feature on the Razorpay Dashboard.\n\n[integrations]: https://razorpay.com/integrations/ \"Razorpay Integrations List\"\n[checkout-docs]: https://docs.razorpay.com/docs/checkout-form\n[callback]: https://docs.razorpay.com/v1/page/callback-url \"Callback URL Documentation\"\n[webhooks]: https://razorpay.com/docs/webhooks/ \"Webhooks Docs\"\n","id":95},{"title":"Dashboard Guide","url":"partners/resellers/dashboard-guide","body":"Razorpay Dashboard for Resellers lets you onboard your sub-merchants and view other useful details.\n\nAdd a Sub-merchant\n\nLog in to your Razorpay Dashboard.\nClick Partner Dashboard.\n\nUnder the Affiliated Accounts tab, click Add New Merchant.\n\nOn the input form, enter\n    Merchant Name or the name of the business.\n    Merchant Email address registered in your application. Razorpay will send a sign-up link to the specified email.\n\nThe newly added sub-merchants will appear on the merchant list on the Partner Dashboard with a default Activation Status as Not Submitted.\n\nThe sub-merchant should individually access their Razorpay Dashboard and activate their account.\n","id":96},{"title":"Razorpay Reseller Partners","url":"partners/resellers","body":"\nRazorpay's Partner Program aims to enable businesses to build payments into their platform products and introduce  payment capabilities to their suite of services.\n\nThe Partner Program provides a smoother onboarding of clients (sub-merchants) and lets Partners take action on their behalf.\n\nLearn the basics of Razorpay Partner Program.\n\nWho is a Reseller?\n\nReseller Partners are businesses or individuals who refer and/or integrate Razorpay for their clients. Unlike Aggregators, Reseller Partners are typically not involved in managing transactions on behalf of their clients.\n\nThe Reseller Partner model focuses mainly on the commissions earned by the merchant for their referrals.\n\nFor example, a blogging platform company, Acme, registers as a Reseller with Razorpay and refers a client. Acme can add clients directly from the Razorpay dashboard, and can view the list of referred merchants and their activation statuses.","id":97},{"title":"API Authentication","url":"partners/aggregators/authentication","body":"\nWe use Basic Auth for authenticating Partner requests. Authentication utilizes the Partner credentials as described in the previous section.\n\nThese credentials are mode specific. In addition to the username:password, the Partner needs to provide the sub-merchant identification in the API requests. The sub-merchant identification needs to be passed as a header in x-razorpay-account.\n\nExample Request\nThe below request retrieves 2 payments for a particular merchant:\n\ncurl -XGET \\\n'https://api.razorpay.com/v1/payments/?count=2&skip=1&from=1400826740' \\\n-u rzptestpartner_AQJPmBpwbQ2bg3:fVZkAtVKwAsIR2gQuKSnS8G7 \\ //partner credentials\n-h 'x-razorpay-account: acc_AQGtV93g7sDCwB'\n{\n  \"count\": 2,\n  \"entity\": \"collection\",\n  \"items\": [\n    {\n      \"id\": \"pay_7IZD7aJ2kkmOjk\",\n      \"entity\": \"payment\",\n      \"amount\": 500,\n      \"currency\": \"INR\",\n      \"status\": \"captured\",\n      \"order_id\": null,\n      \"invoice_id\": null,\n      \"international\": false,\n      \"method\": \"wallet\",\n      \"amount_refunded\": 0,\n      \"refund_status\": null,\n      \"captured\": true,\n      \"description\": \"Purchase Description\",\n      \"card_id\": null,\n      \"bank\": null,\n      \"wallet\": \"freecharge\",\n      \"vpa\": null,\n      \"email\": \"saurav.kumar@gmail.com\",\n      \"contact\": \"9988776655\",\n      \"notes\": {\n        \"merchantorderid\": \"order id\"\n      },\n      \"fee\": 12,\n      \"tax\": 2,\n      \"error_code\": null,\n      \"error_description\": null,\n      \"created_at\": 1487348129\n    },\n    {\n      \"id\": \"pay_19btGlBig6xZ2f\",\n      \"entity\": \"payment\",\n      \"amount\": 500,\n      \"currency\": \"INR\",\n      \"status\": \"captured\",\n      \"order_id\": null,\n      \"invoice_id\": null,\n      \"international\": false,\n      \"method\": \"card\",\n      \"amount_refunded\": 0,\n      \"refund_status\": null,\n      \"captured\": true,\n      \"description\": \"Purchase Description\",\n      \"cardid\": \"card12abClEig3hi2k\",\n      \"bank\": null,\n      \"wallet\": null,\n      \"vpa\": null,\n      \"email\": \"saurav.kumar@gmail.com\",\n      \"contact\": \"9988776655\",\n      \"notes\": {\n        \"merchantorderid\": \"order id\"\n      }\n    },\n    {\n      \"fee\": 12,\n      \"tax\": 2,\n      \"error_code\": null,\n      \"error_description\": null,\n      \"created_at\": 1400826750\n    }\n  ]\n}\nIn the above request, Partner key is rzptestpartnerAQJPmBpwbQ2bg3 Partner secret is fVZkAtVKwAsIR2gQuKSnS8G7. accAQGtV93g7sDCwB is the sub-merchant identifier and the result will be a collection of payments of the associated sub-merchant.\n\nLearn how to authenticate a request for your sub-merchant account on Test mode.","id":98},{"title":"Dashboard Guide","url":"partners/aggregators/dashboard-guide","body":"\nThis Dashboard tutorial will guide to perform operations on behalf of the sub-merchants and also get familiar with the Partner Dashboard.\n\nAdd a Sub-merchant\n\nLog in to your Razorpay Dashboard.\nClick Partner Dashboard.\n\nUnder the Affiliated Accounts tab, click Add New Merchant.\n\nOn the input form, enter\n    Merchant Name or the name of the business.\n    Merchant Email address registered in your application. Razorpay will send a sign-up link to the specified email.\n\nThe newly added sub-merchants will appear on the merchant list on the Partner Dashboard.\n\nSwitching Dashboards\n\nOnce a sub-merchant is added, you can anytime switch to their Dashboard. To switch between Dashboard of a particular sub-merchant\nSearch the sub-merchant using:\n    Merchant ID\n    Merchant Name\n    Mail ID\n\nOn the merchant list, click Switch to go to the Dashboard of that sub-merchant.\n\nSwitch between Dashboards quickly:\nYou can also quickly switch between Dashboards from the Switch Merchant dropdown button. The dropdown options will display all the connected Dashboard in addition to the sub-merchant's.\n\nActivation\n\nActivation of the sub-merchant account can either be done by the you or the sub-merchant.\n\nThe newly added sub-merchants will appear on the merchant list on the Partner Dashboard with a default Activation Status as Not Submitted.\n\nThe activation will follow the standard process according to which the Activation Status will move from Under Review to Activated.\n\nActivation Failed\nIf the activation has failed due to some invalidation, it must rectified and resubmitted.\n\nUser Access\n\nAccording to the user roles, Razorpay provide a predefined user roles for your team members based on their access on the Dashboard. The following are the available user roles.\nOwner\nManager\nOperations\nSupport\n\nLearn more about the user account accessibility.\n\nSettings\n\nThe Settings option contain Partner Credentials and Webhooks settings for the sub-merchant account\n\nPartner Credentials\n\nPartner credentials are used to make API requests to Razorpay on behalf of the sub-merchant account. The Partner credentials will have a different format from the regular account.\n\nTwo sets of credentials are provided, one for Test and Live mode.\n\nLearn how to use the Partner credentials.\n\nNote:\nThe mode here corresponds to sub-merchant’s mode. So if a fetch payment API is called using Partner’s test credentials, it would attribute to sub-merchant’s test mode account.\n\nWebhooks\n\nYou can also setup webhooks for certain events on the sub-merchant account.\n\nClick Setup your Live Webhook.\nEnter the Webhook URL where you will receive the webhook payload when the\nevent is triggered.\nEnter Secret. This field is optional.\nSelect events from the list of Active Events that you would like to activate.\nClick Save to enable the webhook.\n","id":99},{"title":"Razorpay Aggregator Partner","desc":null,"url":"partners/aggregators","body":"\nRazorpay's Partner Program aims to enable businesses to build payments into their platform products, as well as introduce  payment capabilities to their suite of services.\n\nThe Aggregator Partner Program provides a smoother onboarding of clients (sub-merchants, and allows Partners to take actions on behalf of their clients.\n\nLearn the basics of Razorpay Partner Program.\n\nWho is an Aggregator?\n\nRazorpay Aggregator Partners are businesses that provide managed services to their clients, through their digital offerings. Along with providing a platform to their clients, they are also involved in managing their transactions.\n\nThis means Aggregator Partners can collect payments, create refunds as well as view settlements on behalf of their clients, via API as well as Dashboard access.\n\nImagine a company, Acme Corp. wants to manage payments on its application, for its client Gekko & Co. Since Acme cannot natively to do so, it signs up with Razorpay as a Partner, and creates a sub-merchant account for Gekko.\nOnce the sub-merchant account is activated, Acme Corp can use its account credentials to create and manage transactions on behalf of Gekko. It can also access Gekko’s Razorpay Dashboard.\n\nSince Gekko is also a registered Razorpay merchant, it will have the ability to transact and access account details, using its own set of API keys and Dashboard, if required.","id":100},{"title":"Testing Operations","url":"partners/aggregators/testing","body":"\nRazorpay lets Partners create/manage transactions on behalf of their sub-merchant in two modes:\nTest\nLive\n\nTest\nThe test mode is used for testing purposes and involves no actual money transactions.\n\nLive\nThe live mode is to be used in production once testing is complete and setup is in place on the merchant’s platform.\n\nThe mode here corresponds to sub-merchant’s mode. So if an API to get payments is called using Partner’s test credentials, it would return sub-merchant’s test mode payments’ details.\n\nTo onboard as a Partner, you can get in touch with us at https://razorpay.com/support.\n","id":101},{"layout":"api","title":"3. Create Recurring Payment","desc":"Learn how to make a recurring payment request to Razorpay.","url":"recurring-payments/api/create-recurring-payments","body":"\n1. Create a New Order\n\nFor every billing cycle, a unique order must be created for a defined amount.\n\nThe API endpoint for creating an order is given below:\n\n/order\n\nA sample API request and response to create an order is given beside:\n\ncurl -u : \\\n    -X POST https://api.razorpay.com/v1/orders \\\n    --data \"amount=12000\" \\ amount in Paise as per the billing cycle\n    --data \"currency=INR\" \\\n    --data \"receipt=BILL0000455\" \\\n    --data \"payment_capture=1\"\n{\n  \"id\": \"order_4xbQrmEoA5WJ0G\",\n  \"entity\": \"order\",\n  \"amount\": 0,\n  \"currency\": \"INR\",\n  \"receipt\": \"BILL0000455\",\n  \"status\": \"created\",\n  \"attempts\": 0,\n  \"created_at\": 1455696638,\n  \"notes\": {}\n}\n\nWhile using the Orders API, paymentcapture defaults to 0, you must set paymentcapture to 1 as shown in the example request to enable automatic capturing of payments.\n\nNote:\nIf you are creating a Recurring Payment using the Razorpay Dashboard, you need not perform this step as Razorpay creates an order on your behalf.\n\nRead more about Razorpay Orders.\n\n2. Create Recurring Payment\n\nOnce our system validates the recurring payment request along with tokenid, a razorpaypayment_id is returned. In case of some banks like HDFC & Axis, the payment entity returned will be in created state since the charge system of these banks are file-based and can take a few hours.\n\nTo create a recurring payment, you can use the following end point:\n\n/payments/create/recurring\n\nTo create a recurring payment the following parameters are mandatory:\n\norderid string_\n: The unique identifier of the order created.For example, order_4xbQrmEoA5WJ0G.\n\namount integer\n: The order amount to be charged at every billing cycle.\n\ncustomerid string_\n: The same customerid created on the first payment.For example, cust4xbQrmEoA5WJ01.\n\ntoken string\n: The Token generated to enable recurring payment.\n\nrecurring string\n: Determines if recurring payment is enabled or not.If enabled set recurring to 1 (recurring=1), if not recurring set to 0 (recurring=0).\n\ncurl -u : \\\n     -X POST https://api.razorpay.com/v1/payments/create/recurring/ \\\n    --data \"email=gaurav.kumar@example.com\" \\\n    --data \"contact=9123456789\" \\\n    --data \"amount=12000\" \\\n    --data \"currency=INR\" \\\n    --data \"orderid=order4xbQrmEoA5WJ0G\" \\\n    --data \"customerid=cust4xbQrmEoA5WJ01\" \\\n    --data \"token=token_r4hsbMHri87Yi1\" \\\n    --data \"recurring=1\" \\\n    --data \"notes={\"detail1\" : \"x\", \"detail2\" : \"y\"}\" \\\n    --data \"description=Creating recurring payment for Gaurav\"\n{\n  \"razorpaypaymentid\" : \"pay_2xxQoUBi66xm2f\",\n  \"razorpayorderid\" : \"order_4xbQrmEoA5WJ0G\",\n  \"razorpay_signature\" : \"9ef4dffbfd84f1318f6739a3ce19f9d85851857ae648f114332d8401e0949a3d\"\n}\n\nOnce our system validates the recurring payment request along with the tokenid, a razorpaypayment_id is  returned.\n\nNote:\nYou can also create a Recurring Payment using the Razorpay Dashboard. Learn how to create a Recurring Payment using Dashboard.\n\nVoila! Looks like you have completed integrating Subscription on your site. For any queries reach out to our Support Team.\n","id":102},{"layout":"api","title":"1. Create First Payment","desc":"Learn how to do a first payment using RESTful APIs.","url":"recurring-payments/api/first-payment","body":"\nThere are two ways to create a First Payment:\n\nAuthorization Payment (Razorpay Standard Checkout)\nAuthorization Link\n\nFirst Payment using Authorization Payment\n\nTo create an authorization payment you need to:\n\nCreate a Customer\nCreate an Order\nCreate Authorization Payment (Implement Razorpay Standard Checkout)\n\n@//Internal_note:The section class tag will show the respective code beside the third-level headings as well.\n\n1. Create a Customer\n\nCreating a unique identifier for a customer allows Razorpay to tie the associated recurring Tokens to it via the first payment.\n\nYou can create customers with basic details such as email and contact and use them for various Razorpay offerings.\n\nThe API endpoint for creating a customer is given below:\n\n/customers\n\n Note: If a customer with the same details already exists, the request throws an exception by default. You can pass an additional parameter fail_existing (string, 0/1) to get the details of the existing customer in the response.\n\ncurl -u : \\\n    -X POST https://api.razorpay.com/v1/customers\n    --data \"name=Gaurav Kumar\" \\\n    --data \"email=gaurav.kumar@example.com\" \\\n    --data \"contact=9123456780\"\n{\n  \"id\" : \"cust_4xbQrmEoA5WJ01\",\n  \"entity\": \"customer\",\n  \"name\" : \"Gaurav Kumar\",\n  \"email\" : \"gaurav.kumar@example.com\",\n  \"contact\" : \"9123456789\",\n  \"notes\" : {},\n  \"created_at \": 1234567890\n}\n\nLearn more about Razorpay Customers.\n\nOnce a customer is created, you can create an order for the First Payment.\n\n2. Create an Order\n\nOrders API allows you to create a unique Razorpay orderid (for example, order4xbQrmEoA5WJ0G) that would be tied to a payment. This order_id will have a 1:1 mapping with the order created for authorization payment at your end.\n\nThe API endpoint for creating an order is given below:\n\n/order\n\nTo create an order, the following attributes are mandatory:\n\namount integer Card/emandate\n: An order must always have an amount (in Paise) which the customer would be charged with at the time of checkout. In case of a First Payment, for emandate (Netbanking) amount will be 0 (amount=0). For cards, the order amount will be a minimum of @data.Rs 1 (amount=100).\n\ncurrency string Card/emandate\n: Currently, we only support only INR.\n\nreceipt string Card/emandate\n: Optional. The unqiue identifier of the order created at your end. For example, \"BILL0000455\". receipt should be mapped to the order_id sent by Razorpay.\n\npaymentcapture integer_ Card/emandate\n: This parameter is responsible for enabling auto-capture of payments.\n\nmethod string emandate only\n: This parameter is applicable only in the case of emandate and not for cards. Pass method=emandate while creating the order.\n\ncurl -u : \\\n    https://api.razorpay.com/v1/orders\n    -X POST \\\n    --data \"amount=0\" \\\n    --data \"currency=INR\" \\\n    --data \"method=emandate\" \\\n    --data \"receipt=rcptid #1\" \\\n    --data \"payment_capture=1\"\n    https://api.razorpay.com/v1/orders\n{\n  \"id\": \"order_4xbQrmEoA5WJ0G\",\n  \"entity\": \"order\",\n  \"amount\": 0,\n  \"currency\": \"INR\",\n  \"receipt\": \"orderrcptid11\",\n  \"status\": \"created\",\n  \"attempts\": 0,\n  \"created_at\": 1455696638,\n  \"notes\": {}\n}\n\nTo learn more about Razorpay Orders API, refer our detailed Order API documentation.\n\nOnce the order is created, you can now create a payment against the order_id.\n\n3. Create an Authorization Payment\n\nOnce the customer and the order are created, the authentication payment can be created by passing the following additional parameters to the existing checkout script:\n\nAdditional Checkout Fields\n\nFor the First Payment, certain additional parameters must be sent along with the existing checkout (manual) options.\n\nThe following table shows all the parameters required for a First Payment. The table displays parameters specific to cards only, emandate only or Card/emandate.\n\ncustomerid string_ Card/emandate\n: Mandatory. The Razorpay customer Id created in the first step.\n\norderid string_ Card/emandate\n: The Razorpay order Id created in the previous step.\n\nrecurring string Card/emandate\n: Mandatory. Set to 1 if recurring payment is enabled.\n\nmethodstring emandate\n: This parameter is applicable only in the case of emandate and not for cards. Pass method=emandate while creating the payment.\n\ntoken.maxamount string_ emandate only\n: Use to set the maximum amount per debit request. Minimum value is 500 (in Paise). Defaults to 9999900 (maximum value).\n\ntoken.expirebystring_ emandate only\n: Use to set the expiry by date. Minimum value is 1 day. Defaults to 10 years for emandate (Netbanking Auth). Maximum value is 12-31-2099. Expected data format is epoch timestamp.\n\nbank string emandate only\n: Bank code to preselect a bank. For example, HDFC is the bank code for HDFC Bank. You could fetch bank codes using a GET request as shown below: https://@api.razorpay.com/v1/methods.\n\nbankaccount[name] string_ emandate only\n: Prefill name on bank account. For example, \"Gaurav Kumar\".\n\nbankaccount[accountnumber]string emandate only\n: Bank account number. For example \"5129988123\".\n\nbankaccount[ifsc]string_ emandate only\n: The 11 character long IFSC number for the bank. For example, \"HDFC0000013\" is HDFC Bank's IFSC number.\n\nAn example checkout script of an authorization payment with all the additional parameters included is shown below:\n\nPay\n\nvar options = {\n    \"key\": \"\",\n    \"amount\": \"0\",\n    \"name\": \"Acme Corp\",\n    \"orderid\": \"order4xbQrmEoA5WJ0G\", //additional parameter\n    \"customerid\": \"cust4xbQrmEoA5WJ01\", //additional parameter\n    \"recurring\": \"1\", //additional parameter\n    \"token.max_amount\": \"500\", //additional parameter in Paise\n    \"token.expire_by\": \"1527746781\", //additional parameter\n    \"prefill\": {\n        \"name\": \"Gaurav Kumar\",\n        \"email\": \"gaurav.kumar@razorpay.com\",\n        \"contact\": \"9123456780\",\n        \"method\": \"emandate\",\n        \"bank\": \"UTIB\", //additional parameter\n        \"bank_account[name]\": \"Gaurav Kumar\", //additional parameter\n        \"bankaccount[accountnumber]\": \"5129988123\", //additional parameter\n        \"bank_account[ifsc]\": \"UTIB0000013\", //additional parameter\n    },\n    \"handler\": function (response){\n        alert(response.razorpaypaymentid);\n        alert(response.razorpayorderid);\n        alert(response.razorpay_signature);\n    },\n    \"notes\": {\n        \"address\": \"note value\"\n    },\n    \"theme\": {\n        \"color\": \"#F37254\"\n    }\n};\nvar rzp1 = new Razorpay(options);\ndocument.getElementById('rzp-button1').onclick = function(e){\n    rzp1.open();\n    e.preventDefault();\n}\n\nTo learn more about the Razorpay Checkout, refer our detailed Checkout documentation\n\nFirst Payment using Authorization Link\n\nAuthorization Links are an alternate way of creating a first payment. This means, if you are creating an authorization link, you need not create a Razorpay customer or a Razorpay order.\n\nAn Authorization Link when created also automatically issues a Razorpay Invoice to the customer. The customer can use the invoice to make the First Payment.\n\nLearn how to create Authorization Links using the Razorpay Dashboard.\n\nCreate an Authorization Link\n\nThe API Endpoint for creating an authorization link is shown below:\n\n/subscriptionregistration/authlinks\n\ncurl -u :\n-XPOST https://api.razorpay.com/v1/subscriptionregistration/authlinks\n-d\n'{\n    \"customer\":\n    {\n        \"name\": \"Gaurav Kumar\",\n        \"email\": \"gaurav.kumar@example.com\",\n        \"contact\": \"9123456780\"\n    },\n    \"type\": \"link\",\n    \"email_notify\":1,\n    \"sms_notify\":1,\n    \"expire_by\":\"1234567890\",\n    \"description\":\"test authorization link\",\n    \"currency\": \"INR\",\n    \"amount\":\"0\",\n    \"notes\": {\n        \"address\": \"note value\"\n    },\n    \"subscription_registration\":\n    {\n        \"method\":\"emandate\",\n        \"max_amount\":\"10000\",\n        \"auth_type\":\"netbanking\",\n        \"expire_at\":\"1234567890\",\n        \"bank_account\":\n        {\n        \"bank_name\":\"HDFC\",\n        \"account_number\":\"1111111111111\",\n        \"ifsc_code\":\"HDFC0001233\",\n        \"beneficiary_name\":\"Gaurav Kumar\"\n        }\n    }\n}\n{\n    \"id\": \"inv_8fZcMz3hW9Iqy2\",\n    \"entity\": \"invoice\",\n    \"receipt\": null,\n    \"customerid\": \"cust8fZcN0jhKp6Syj\",\n    \"customer_details\": {\n        \"name\": 'Gaurav Kumar',\n        \"email\": \"gaurav.kumar@example.com\",\n        \"contact\": \"9123456780\",\n        \"billing_address\": null,\n    },\n    \"orderid\": \"order8fZcN2GrrTxazk\",\n    \"line_items\": [],\n    \"payment_id\": null,\n    \"status\": \"issued\",\n    \"expire_by\": 1234567890,\n    \"issued_at\": 1505908472,\n    \"paid_at\": null,\n    \"cancelled_at\": null,\n    \"expired_at\": null,\n    \"sms_status\": \"sent\",\n    \"email_status\": \"sent\",\n    \"date\": 1505908472,\n    \"terms\": null,\n    \"partial_payment\": false,\n    \"gross_amount\": 0,\n    \"tax_amount\": 0,\n    \"amount\": 0,\n    \"amount_paid\": 0,\n    \"amount_due\": 0,\n    \"currency\": \"INR\",\n    \"description\": \"test authorization link\",\n    \"notes\": [],\n    \"comment\": null,\n    \"short_url\": \"http://example.com/sdzt51e\",\n    \"view_less\": true,\n    \"billing_start\": null,\n    \"billing_end\": null,\n    \"type\": \"link\",\n    \"grouptaxesdiscounts\": false,\n    \"user_id\": null,\n    \"created_at\": 1505908472\n}\n\nFollowing table lists attributes and their explanations, which are sent in request body.\n\n[name] string customer\n: Name of the customer.\n\n[email] string customer\n: Email address of the customer.\n\n[contact]string customer\n: Phone number of the customer.\n\ntype string\n: Entity type. Can have these values: link/ecod/invoice. In this case, send type=link.\n\nsmsnotify string_\n: Optional. Indicates the notification enablement. Can have these values, 0/1. Defaults to 1.\n\nemailnotify string_\n: Can have these values: 0/1. Optional. Defaults to 1.\n\nexpireby epoch_\n: Optional. If specified Authorization Link expires after the specified time\n\ndescription string\n: Mandatory. Description of the link.\n\nnotes object\n: Optional. Notes for the authorization link.\n\ncurrency string\n: Currently, only INR is supported.\n\namount integer\n: Amount must be in Paise.\n\n[method] string subscription_registration\n: Authorization method. Can have these values: emandate/card\n\n[maxamount] integer_ subscription_registration\n: Use to set the maximum amount per debit request. Minimum value is 500. Defaults to the maximum value of 9999900.\n\n[authtype] string_ subscription_registration\n: Currently, only netbanking is supported .\n\n[expireat] epoch_ subscription_registration\n: Use to set the expiry by date. Minimum value is 1 day. Defaults to 10 years for emandate. Maximum value is 12-31-2099. Expected data format is epoch timestamp.\n\n[bankname] string_ bank_account\n: Bank code to preselect a bank. For example UTIB is the bank code for Axis Bank. You can fetch the bank codes using the below GET request https://@api.razorpay.com/v1/methods\n\n[accountnumber] integer_ bank_account\n: Bank account number. For example 765432123456789.\n\n[ifsc] string bank_account\n: The 11 character long IFSC number for the bank. For example UTIB0000053 is Axis Bank's IFSC number.\n\n[beneficiaryname] string_ bank_account\n: Name on bank account. For example \"Gaurav Kumar\".\n\nNote\n\nAuthorization Link Amount\nAn authorization link must always have an amount (in Paise) which the customer would be charged at the time of checkout. In the case of emandate, the order amount must be 0 (\"amount\"=\"0\"). For cards, the amount must be a minimum of ₹ 1 (\"amount\"=\"100\").\n\nNote:\nUpon successful payment completion, you can get notified about payments using Webhooks. Refer the Notifications using Webhooks section for more information.\n\nSend/Resend Notifications\n\nYou can send/resend notifications with the short URL to the customer via email/SMS, using the following endpoint:\n\n/invoices/:id/notify_by/:medium\n\nAllowed values for medium url param is sms and email\n\ncurl -u :\n-XPOST https://api.razorpay.com/v1/invoices/:id/notify_by/:medium\n{\n    \"success\": true\n}\n\nCancel an Authorization Link\n\nYou can cancel an Authorization Link using the following endpoint:\n\n/invoices/:id/cancel\n\nIts response is the invoice entity, similar to the create/update API response with status attribute value as canceled.\n\nNoteThe method can only be called on a payment link that is in the issued state.\n","id":103},{"layout":"api","title":"API Workflow","desc":"Learn how you can integrate Recurring Payments using RESTful APIs.","url":"recurring-payments/api","body":"\nTo integrate Subscriptions in your application using the APIs, do the following:\nCreate First Payment\n    Using Authorization Payment\n        Create a Customer\n        Create an Order\n        Create an Authorization Payment (Razorpay Standard Checkout)\n    Using Authorization Links\nFetch Tokens\n    Using APIs\n    Using Webhooks\nCreate Recurring Payments\n    Create an New Order\n    Create a recurring request\n","id":104},{"layout":"api","title":"2. Retrieve the Token","url":"recurring-payments/api/token","body":"\nAfter the payment is captured, Razorpay generates a token_id that needs to be fetched manually using either APIs or Webhooks.\n\nLearn about about Tokens.\n\nYou can fetch Tokens by:\nPayment Id\nCustomer Id\n\nNote\nYou can also search for the Token on your Dashboard. Learn how to search for a Token.\n\nFetch Token by Payment Id\n\nOnce the first payment is completed, Razorpay Checkout will return a razorpaypaymentid which can be used to retrieve the recurring tokenid via the following API. This tokenid is used to create recurring payments.\n\nThe endpoint for retrieving the recurring Token is given below:\n\n/payments/:id\n\nid string\n: Mandatory. The ID of the payment to be retrieved. For example, pay_2911oUBitexs2f.\n\nAn example request and response to retrieve a Token is given beside:\n\ncurl -u : \\\n     -X GET https://api.razorpay.com/v1/payments/pay_2911oUBitexs2f\n{\n    \"id\": \"pay_2911oUBitexs2f\",\n    \"entity\": \"payment\",\n    \"amount\": 0,\n    \"currency\": \"INR\",\n    \"status\": \"captured\",\n    \"orderid\": \"order32hsbEKriO6a1r\",\n    \"invoice_id\": null,\n    \"international\": false,\n    \"method\": \"emandate\",\n    \"amount_refunded\": 0,\n    \"refund_status\": null,\n    \"captured\": true,\n    \"description\": \"A Wild Sheep Chase is the third novel by Japanese author Haruki Murakami\",\n    \"card_id\": null,\n    \"bank\": UTIB,\n    \"wallet\": \"null\",\n    \"vpa\": null,\n    \"email\": \"gaurav.kumar@example.com\",\n    \"contact\": \"9123456789\",\n    \"customerid\": \"cust32hsbEKriO6ai4\"\n    \"tokenid\": \"tokenr4hsbMHri87Yi1\",\n    \"notes\": {\n        \"merchantorderid\": \"order id\"\n    },\n    \"fee\": 1438,\n    \"tax\": 188,\n    \"error_code\": null,\n    \"error_description\": null,\n    \"created_at\": 1400826750\n}\n{\n   \"error\": {\n      \"code\": \"BADREQUESTERROR\",\n      \"description\": \"The payment was not found\"\n   }\n}\n{\n    \"error\": {\n        \"code\": \"BADREQUESTERROR\",\n        \"description\": \"The api key provided is invalid\"\n    }\n}\n\n Note: You can also retrieve the token_id via the payment.authorized webhook .\n\nFetch Tokens by Customer Id\n\nThe fetch tokens API returns an array of saved Tokens for a unique customer_id. The endpoint for fetching saved Tokens for your customer is given below:\n\n/customers/:customer_id/tokens\n\nA single customerid can have multiple tokenid tied to it. These can be used to create recurring payments for multiple products or services.\n\nA sample API request and response for retrieving a token is given on the right:\n\ncurl -u : \\\n     -X GET https://api.razorpay.com/v1/customers/cust_2911oUBitexs2f/tokens\n{\n  \"entity\" : \"collection\",\n  \"count\" : 2,\n  \"items\" : [\n    {\n      \"id\" : \"token_4lsdksD31GaZ09\",\n      \"entity\" : \"token\",\n      \"method\" : \"emandate\",\n      \"emandate\" : {\n        \"issuer\" : \"HDFC\"\n      },\n      \"recurring\": true,\n      \"recurring_details\": { //applicable only for emandate.\n                \"status\": \"confirmed\",\n                \"failure_reason\": null\n      },\n      \"auth_type\": \"netbanking\",\n      \"used_at\" : 1473765044,\n      \"created_at\" : 1473765044\n    },\n    {\n      \"id\" : \"token_4zwefDSCC829ma\",\n      \"entity\" : \"token\",\n      \"method\" : \"card\",\n      \"card\" : {\n        \"entity\": \"card\",\n        \"name\": \" first last\",\n        \"network\": \"MasterCard\",\n        \"international\": false,\n        \"expiry_month\": 9,\n        \"expiry_year\": 2020,\n        \"last4\" : 1111,\n        \"emi\": false\n      },\n      \"recurring\": true,\n      \"auth_type\": null,\n      \"used_at\": null,\n      \"created_at\" : 1473765043\n    }\n  ]\n}\n\nrecurringdetails boolean_\n: Optional. This applicable only for emandate.\n\nstatus string recurring_details\n: The status of the mandate. Supported values: confirmed, rejected, and initiated.\n\nfailurereason string_ recurring_details\n: Reason of failure. null if the status is confirmed.\n\nLearn about the different Token webhooks available for Recurring Payments\n\nDelete Tokens\n\nThe following end point is used to delete tokens:\n\n/customers/:customerid/tokens/:tokenid\n\nThe delete token API returns a 200 OK response if a card is deleted successfully. A sample API request and response to delete a token is given beside:\n\ncurl -u : \\\n     -X GET https://api.razorpay.com/v1/customers/cust2911oUBitexs2f/tokens/token4zwefDSCC829ma\n{\n    \"deleted\": true\n}\n","id":105},{"title":"Amazon Pay","url":"checkout/android/customui/amazonpay","body":"\nIntroduction\n\nThe Amazon Pay is another wallet based payment method that allows customers with an Amazon account to make payments for transactions through Amazon Pay balance or the configured methods on their Amazon account.\n\nLearn more about Amazon Pay.\n\nAmazon Pay will be listed as an option under the wallet payment method.\n\nIntegration\nTo integrate Amazon Pay wallet:\n\nDownload the following SDKS and add the aar files to the application library.\n    Amazon-SDK.\n\n    Download the Razorpay-Amazon Pay SDK.\n\n    NoteThe Razorpay-Amazon Pay SDK acts as a wrapper over the native Amazon-SDK.\n\nAdd the following lines of code to the build.gradle file of your application:\n\n    dependencies {\n      compile(name: 'razorpay-amazonpay', ext: 'aar')\n      compile(name:'PayWithAmazon', ext:'aar')\n    }\n\nThis will add the dependencies for the SDK and create an Amazon Pay payment method on your Checkout form.\n","id":106}]